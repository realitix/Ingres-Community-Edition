/*
**Copyright (c) 2004, 2010 Actian Corporation
*/
EXEC SQL include sqlca;

#define		        DU_SQL_NONE     100	/* sqlca.sqlcode value for
						** 'no tuples found'
						*/

#include    <compat.h>
#include    <gl.h>
#include    <iicommon.h>
#include    <dbdbms.h>
#include    <tr.h>
#include    <pc.h>
#include    <me.h>
#include    <si.h>
#include    <ex.h>
#include    <st.h>
#include    <ut.h>
#include    <cv.h>
#include    <lo.h>
#include    <er.h>
#include    <duf.h>
#include    <cs.h>
#include    <lk.h>
#include    <di.h>
#include    <nm.h>
#include    <duerr.h>
#include    <duenv.h>
##include   <dudbms.qsh>
#include    <duvfiles.h>
##include   <upgradedb.qsh>
##include   <dustar.qsh>
#include    <cm.h>
/**
** Name:	doview.qsc
**
** Description:
**	This file defines:
**
**		populate_secalarm - rebuild security alarms for 6.5 ES
**
** History:
**	16-dec-92 (billc) written.
**	11-mar-93 (jpk) modified for upgradedb
**	18-sep-1993 (jpk) wean from FElibs dependence.
**	20-nov-1993 (jpk) make TXTBUF member number agree with
**	initialization parameter number.  Add rebuilding
**	of procedures, rules, and integrities as well as
**	views and permits.
**	13-oct-93 (swm)
**	    Bug #56448
**	    Removed d_print() function because it accepts a variable number
**	    of variable-sized arguments, which is not portable. It could
**	    not become a varargs function as this practice is outlawed in
**	    main line code.
**	    Replaced invocations of the function with calls to SIprintf. This
**	    works because SIprintf is a varargs function.
**	29-Jan-1994 (jpk)
**	    Bug #58408.
**	    Made those SIprintfs depend on upg_dbg_out flag.
**	28-March-1994 (jpk)
**	    Bug 58586: upgrading iidbdb required fixing view and permits
**	    rebuilding for databases where dba is $ingres, the iidbdb
**	    being one such.
**	28-March-1994 (jpk)
**	    Incorporate rblumer fixes for bugs:
**	    	60810: drop DBEVENT not EVENT
**		60812: work around server limit of 255 DDL/cursor
**		80813: parse quel query text more robustly
**		60814: exclude 6.5 permits, integrities from upgrade
**		60816: be $ingres before dropping iitmp_ tables
**      03-feb-1995 (chech02)
**          Bug# 66464, 66467, 64589, 64590
**          Added commit  statements at the beginning of each function.	
**      27-mar-1995 (chech02) 67532
**          Cant access views in stardb. Added star_populate_views() to
**          populate user views in stardb.
**      29-mar-1995 (chech02) 67789    
**          In Release 6.4 create permit insert was allowed on aggregate views 
**          that is not permitted in 1.1. Modified exec_txt() to test for sql  
**          return code of -34000 when attempting to create a permit.
**      24-may-1995 (lawst01) 68771
**          When insert permit is specified on a table for a user
**          'copy_into' permission should also be granted.
**	13-sep-1996 (canor01)
**	    Remove STATIC on prototype for chkinqerr().  This makes it
**	    static for Solaris (even without a static on the function
**	    definition).
**	02-oct-96 (mcgem01)
**	    Add include for duvfiles.h.
**      21-apr-1999 (hanch04)
**          replace STindex with STchr
**      28-apr-1999 (hanch04)
**          Replaced STlcopy with STncpy
**	21-may-1999 (hanch04)
**	    Replace STbcompare with STcasecmp,STncasecmp,STcmp,STncmp
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      09-jan-2002 (stial01)
**          Deleted code, functionality replaced by calling unloaddb (SIR 106745
**	12-Apr-2008 (kschendel)
**	    Remove unnecessary DMF includes.
**      16-jun-2008 (stial01)
**          Write to debug log, unless -n (nolog) specified
**	13-May-2009 (kschendel) b122041
**	    Compiler warning fixes.  Remove qef/dmf includes (again?).
**	2-May-2010 (kschendel) SIR 123639
**	    Toss do-quel, not needed any more.
**	24-Mar-2011 (frima01) Bug 125214
**	    Don't delimit the $ingres user name for authentication.
**	    Otherwise it wouldn't turn into the INGRES token
**	    and sql92 upgrades would fail.
**	    Upgradedb mainline isn't smart enough to supply $ingres in
**	    the correct case.
*/

/* GLOBALDEFs */

/* externs */
/*
** Definition of all global variables owned by this file.
*/
GLOBALREF DU_UPGRADE_CB	upgr_cb ;	/* upgradedb control block */

/* statics */
STATIC STATUS	exec_txt(char *buf);
STATUS		setauth(char *owner);
static STATUS 	populate_alarms_for_user( char *alarm_owner);

GLOBALREF	bool		upg_dbg_out;

/*
** Test driver
**      MKMFIN Hints
**
PROGRAM =       doview

NEEDLIBS =      SQLCALIB GNLIB UFLIB RUNSYSLIB RUNTIMELIB FDLIB FTLIB FEDSLIB \
                UILIB LIBQSYSLIB LIBQLIB UGLIB FMTLIB AFELIB \
                LIBQGCALIB CUFLIB GCFLIB ADFLIB \
                COMPATLIB MALLOCLIB

UNDEFS =        II_copyright
*/


static char     Last_owner[DB_MAXNAME + 1] = ERx("");

/*{
** Name:	setauth: set session authorization auth_id.
**
** Inputs:
**	owner	auth id to set session authorization to.
**		Pass NULL to reset session authorization to "unknown".
**
** Outputs:
**	none.
**
**	Returns:
**		OK on success, FAIL (or other status) on failure.
**
** History:
**	June 1993 (jpk) written
**	November 1993 (jpk) make sure to commit before setting
**	authorization.  Also after, why not.
**	19-jul-94 (robf)
**         Do regular COMMIT instead of creating a string, then execute
**         immediate.
**	8-Sep-2004 (schka24)
**	    Init "last owner" by passing NULL, e.g. on (re)connect.
**	5-May-2010 (kschendel)
**	    Always quote-delimit the owner name.  This is almost always
**	    safe, no matter what kind of wacky owner names exist.
**	    (Unless someone managed to set different reg-id-case and
**	    delim-id-case in their config.dat, and I can't be bothered
**	    at the moment.)
*/
STATUS
setauth(char *owner)
{
    if (owner != NULL && *owner != EOS && !STequal(Last_owner, owner))
    {
	char nbuf[((2 * DB_MAXNAME) + 2 + 1)];
	char obuf[512];

	STncpy( Last_owner, owner, sizeof(Last_owner) - 1);
	Last_owner[ sizeof(Last_owner) - 1 ] = EOS;

	/* Do we need to denormalize the name? */
	/*
	** XXX I hope not.  This requires FElibs, and seems silly.
	** 6.4 owners shouldn't have funky names.  But for the
	** idempotency (we aren't currently trying to exclude 6.5
	** views, so they may have 6.5 owners), is this really
	** necessary?
	*/
/*	if (IIUGdlm_ChkdlmBEobject(owner, NULL, TRUE))*/
/*	{*/
/*	    IIUGrqd_Requote_dlm(owner, nbuf);*/
/*	    owner = nbuf;*/
/*	}*/

	exec sql commit;

	if(STcompare(owner,"$ingres") == 0)
	    STprintf(obuf, "SET SESSION AUTHORIZATION $ingres");
	else
	    STprintf(obuf, "SET SESSION AUTHORIZATION \"%s\"", owner);
	if (exec_txt(obuf) != OK)
	    return (FAIL);
	
	exec sql commit;
    }
    if (owner == NULL)
	Last_owner[0] = EOS;
    return (OK);
}

STATIC STATUS
exec_txt(txt_buf)
EXEC SQL BEGIN DECLARE SECTION;
char	*txt_buf;
EXEC SQL END DECLARE SECTION;
{
    if (txt_buf == NULL || *txt_buf == EOS)
    {
	/* Nothing to exec. */
	return (OK);
    }

#ifdef T_DEBUG

    SIprintf("]==> %s\\p\\g\n%s%s\\p\\g\n\n\n",
	(dml == DB_SQL) ? "\\sql\nselect count(*) from iirelation"
		: "\\quel\nretrieve (c = count(iirelation.all))",
	txt_buf,
	(dml == DB_SQL) ? ";" : "");
    return (OK);

#else
    if (upg_dbg_out)
    {
	SIfprintf(upgr_cb.du_dbg.du_file, "]==> executing SQL <%s>\n\n", txt_buf);
    }
    EXEC SQL EXECUTE IMMEDIATE :txt_buf;
    if (upg_dbg_out)
	    check_sql(sqlca.sqlcode);
    if (sqlca.sqlcode == -50)
    {
	return(OK);
    }
    if (sqlca.sqlcode == -34000)
    {
      show_sql_error(sqlca.sqlcode,txt_buf);
      return (OK);
    }
    return (chkinqerr());

#endif
}


/*
** Name: check_sql - check sql status code
**
** Description:
**	Check an sql return status and print diagnostic
**
** Inputs:
** 	code - and sqlca.sqlcode
**
** History:
**     xxx-xx-xx (xxx)
**         Created
**     19-jul-94 (robf)
**         Added history, always print an error if present to minimize
**         silent failures in conversion.
*/

check_sql(code)
int	code;
{
EXEC SQL BEGIN DECLARE SECTION;
	char	err_msg[500];
EXEC SQL END DECLARE SECTION;
	if (upg_dbg_out && code!=0)
	{
	    SIfprintf(upgr_cb.du_dbg.du_file, "]==> ]=> sqlcode %d\n\n", code);
	}
	if (code < 0 || code > 1024)
	{
	    EXEC SQL inquire_ingres (:err_msg = errortext);
	    if (upg_dbg_out)
	    {
		SIfprintf(upgr_cb.du_dbg.du_file, "]==> error text: %s\n\n", err_msg);
	    }
	    else
	    {
		SIprintf("%s\n",err_msg);
	    }

	}
}


/*{
** Name:    chkinqerr -- clone of FEinqerr() -- FE bad for DUF stuff.
**
** Description:
**	Returns the DBMS status of the most recent query.
**
** Returns:
**	{nat}  The DBMS status of the most recent query.
**
*/
i4
chkinqerr()
{
EXEC SQL BEGIN DECLARE SECTION;
    i4	errnum;
EXEC SQL END DECLARE SECTION;

    EXEC SQL INQUIRE_INGRES (:errnum = errorno);

    return errnum;
}  


/*
** Name: populate_seclarm
**
** Description:
**     Fill the iisecalarm table when converting from 65 to 65ES.
**     roles.
**
**     In 6.5 security alarms were stored in iiprotect as fake permits,
**     whereas in 6.5 ES they became distinct items, stored in iisecalarm
**     This routine extracts alarm permits from iiprotect and formats them
**     appropriately into iisecalarm. Any tables with alarms are also updated
**     to have their relstat2 bit marked (TCB_ALARM) so the 6.5 ES DBMS
**     knows they have alarms.
**
** Inputs:
**      none
** 
** Outputs:
**      none
**
** History:
**    13-jul-94 (robf)
**         Created
*/
STATUS
populate_secalarm(char *dbname_curr)
{
EXEC SQL BEGIN DECLARE SECTION;
    char    	alarm_owner[DB_MAXNAME+1];
    i4		owner_count = 0;
    char	**owner_list = NULL;
    char	**list_ptr = NULL;
EXEC SQL END DECLARE SECTION;
    int		i;
    STATUS	stat = OK;


	EXEC SQL COMMIT WORK;
    EXEC SQL select count(distinct(probjowner))
	into :owner_count 
	from iiprotect p
        where mod((p.proopset/128), (2))=1; /* Alarms */

    if (upg_dbg_out)
    {
	SIfprintf(upgr_cb.du_dbg.du_file, "]==> There are %d alarm owners in the database\n\n",
	    owner_count );
    }

    if (owner_count == 0)
    {
	/* Nothing to do */
	return OK;
    }

    list_ptr = owner_list = (char **)
	MEreqmem(0, owner_count * sizeof(char *), FALSE, &stat);
    if (stat != OK)
	goto badness;

    EXEC SQL select distinct trim(probjowner)
	into :alarm_owner
	from iiprotect p
        where mod((p.proopset/128), (2))=1; /* Alarms */
    EXEC SQL begin;
	*list_ptr = (char *)
	    MEreqmem(0, STlength(alarm_owner) + 1, FALSE, &stat);
	if (stat != OK)
	    goto badness;
	STcopy(alarm_owner, *list_ptr++);
    EXEC SQL END;

    /* debugging, verify list is OK */
    if (upg_dbg_out)
    {
	for (i = 0; i < owner_count; i++)
	{
	    SIfprintf(upgr_cb.du_dbg.du_file, "]==> ==> %s\n\n", owner_list[i]);
	}
    }

    for (i = 0; i < owner_count; i++)
    {
	if (setauth(owner_list[i]) != OK)	/* set session owner */
	    return (FAIL);
						/* rebuild alarms */
	if (populate_alarms_for_user(owner_list[i]) != OK)	
	    return (FAIL);
    }

    MEfree(owner_list);
    setauth("$ingres");

badness:
    EXEC SQL ROLLBACK WORK;
    return (stat);

}

/*
** Name: populate_alarms_for_user
**
** Description:
**	Recreate the security  alarms for a single user
**
** Inputs:
**	Current user name
**
** Outputs:
**	none
** 
** History:
**	14-jul-94 (robf)
**	    Created
*/
static STATUS
populate_alarms_for_user( char *alarm_owner)
{
exec sql begin declare section;
	 char *sa_owner;
	 char saqtxt[256];
exec sql end declare section;
	bool err=FALSE;

     sa_owner=alarm_owner;

    if (upg_dbg_out)
    {
	    SIfprintf(upgr_cb.du_dbg.du_file, "]==> Converting alarms owned by '%s'\n", sa_owner);
    }
    /*
    ** This assumes that in 6.5 alarms are short and always fit into
    ** a single text segment
    */
    exec sql declare sacur cursor for
	      select trim(q.txt)
	      from   iiqrytext q,
		     iiprotect p
	      where mod((p.proopset/128), (2))=1
	      and   q.mode=19
	      and   p.proqryid1=q.txtid1
	      and   p.proqryid2=q.txtid2
	      and   p.probjowner=:sa_owner
	      order by 1;

    exec sql open sacur for readonly;
    check_sql(sqlca.sqlcode);

    for(;;)
    {
	exec sql fetch sacur into  :saqtxt;
	check_sql(sqlca.sqlcode);

	if (sqlca.sqlcode == DU_SQL_NONE)
	{       
	    break;
	}
	if (sqlca.sqlcode < 0)
	{
		err=TRUE;
		break;
	}
	if(exec_txt(saqtxt)!=OK)
	{
    	    if (upg_dbg_out)
    	    {
	    	SIfprintf(upgr_cb.du_dbg.du_file, "]==> Error converting alarm\n");
		err=TRUE;
		break;
	    }
	}
    }
    exec sql close sacur;
    /*
    ** Now cleanup old values if all went well so far
    */
    if (err==FALSE)
    {
        if (upg_dbg_out)
	    	SIfprintf(upgr_cb.du_dbg.du_file, "]==> Cleaning up iiqrytext\n");
	exec sql delete 
		 from iiqrytext q
		 where  exists (select *
				from iiprotect p
	      			where mod((p.proopset/128), (2))=1
			      	and   p.proqryid1=q.txtid1
			        and   p.proqryid2=q.txtid2
			        and   p.probjowner=:sa_owner
				)
		and   q.mode=19;
	check_sql(sqlca.sqlcode);
	if(sqlca.sqlcode<0)
		err=TRUE;

    }
    if (err==FALSE)
    {
        if (upg_dbg_out)
	    	SIfprintf(upgr_cb.du_dbg.du_file, "]==> Cleaning up iiprotect\n");

	exec sql delete from iiprotect p
		where mod((p.proopset/128), (2))=1
		and   p.probjowner=:sa_owner;
	check_sql(sqlca.sqlcode);
	if(sqlca.sqlcode<0)
		err=TRUE;

    }
    if(err)
    {
	    exec sql rollback;
	    return FAIL;
    }
    else
    {
	    exec sql commit;
	    return OK;
    }
}


/*{
** Name: populate_iischema() - add implicit schema defs to 6.4 databases
**
** Description:
**
** Inputs:
**	none
**
** Outputs:
**	none
**
** History:
**	November 1993 (jpk)
**	     written
**	15-jul-94 (robf)
**           moved from upgradedb.qsc and essentially rewritten due to
**	     mainline bug 64590. Problem is a schema authorization must
**           be created by a user with the same name, so we need to
**           follow the view/grant/alarm methodolgy and build a list
**           of schemas and change user authorization as necessary to
**           create the schemas. 
**	3-Sep-2004 (schka24)
**	    Fix (silent) error converting iidbdb since the only schema
**	    it's likely to have is $ingres;  which is placed into iischema
**	    when we create tables.
**	5-May-2010 (kschendel)
**	    Always quote-delimit the schema name.
*/
VOID
populate_iischema()
{
EXEC SQL BEGIN DECLARE SECTION;
    char    	owner[DB_MAXNAME+1];
    i4		owner_count = 0;
    char	**owner_list = NULL;
    char	**list_ptr = NULL;
    char	stmt[DB_MAXNAME+100];
EXEC SQL END DECLARE SECTION;
    int		i;
    STATUS	stat = OK;


    exec sql commit;
    
    du_talk(__LINE__, DU_MODESENS, &upgr_cb, I_DU00EF_UPG_SCHEMA, 0);
    EXEC SQL DROP xxsch_owner;
/*    EXEC SQL DECLARE GLOBAL TEMPORARY TABLE SESSION.sch_owner (owner) */
    EXEC SQL CREATE  TABLE xxsch_owner (owner)
	AS SELECT distinct relowner 
	FROM iirelation
	/* db procedures */
	/* synonyms */
	UNION
	SELECT distinct synonym_owner FROM iisynonym
	UNION
	SELECT dbp_owner FROM iiprocedure
	/* events */
	UNION
	select distinct event_owner from iievent
/*	ON COMMIT PRESERVE ROWS
	WITH NORECOVERY*/;

     check_sql(sqlca.sqlcode);
     EXEC SQL DELETE FROM xxsch_owner
	      WHERE owner in (select schema_name from iischema);
     check_sql(sqlca.sqlcode);

     EXEC SQL SELECT COUNT(*)
	      INTO :owner_count
	      FROM xxsch_owner;
    check_sql(sqlca.sqlcode);

    if (owner_count == 0)
    {
	if (upg_dbg_out)
	    SIfprintf(upgr_cb.du_dbg.du_file, "]==> No schemas to add\n");
	exec sql drop xxsch_owner;
	exec sql commit;
	return;
    }

    list_ptr = owner_list = (char **)
	MEreqmem(0, owner_count * sizeof(char *), FALSE, &stat);
    if (stat != OK)
	goto badness;

	/* tables and views */
    EXEC SQL SELECT varchar(owner)
	     INTO :owner
	     FROM xxsch_owner;
    EXEC SQL begin;
	*list_ptr = (char *)
	    MEreqmem(0, STlength(owner) + 1, FALSE, &stat);
	if (stat != OK)
	    goto badness;
	STcopy(owner, *list_ptr++);
    EXEC SQL END;

    EXEC SQL DROP xxsch_owner;
    check_sql(sqlca.sqlcode);

    EXEC SQL COMMIT;

    /* debugging, verify list is OK */
    if (upg_dbg_out)
    {
	for (i = 0; i < owner_count; i++)
	{
	    SIfprintf(upgr_cb.du_dbg.du_file, "]==> ==> %s\n\n", owner_list[i]);
	}
    }

    for (i = 0; i < owner_count; i++)
    {
	if (setauth(owner_list[i]) != OK)	/* set session owner */
		break;
						
	STprintf(stmt, "create schema authorization \"%s\"", owner_list[i]);
	if(exec_txt(stmt)!=OK)
	{
	    if (upg_dbg_out)
	    {
		SIfprintf(upgr_cb.du_dbg.du_file, "]==> Error creating schema\n");
		break;
	    }
	}
	exec sql commit;
    }

    MEfree(owner_list);
    setauth("$ingres");
    return;

badness:
    EXEC SQL ROLLBACK WORK;
    if (upg_dbg_out)
	    SIfprintf(upgr_cb.du_dbg.du_file, "]==> Error in populate_iischema\n");
    setauth("$ingres");
    return ;

}

show_sql_error(code,qrytxt)
 int code;
 char *qrytxt;
{
EXEC SQL BEGIN DECLARE SECTION;
	char	err_msg[500];
EXEC SQL END DECLARE SECTION;
char lbuf[25];
        SIprintf ("]==> -- %s --\n\n", qrytxt);
	SIprintf ("]==> ]=> sqlcode %d\n\n", code);
        EXEC SQL inquire_ingres (:err_msg = errortext);
        SIprintf("]==> error text: %s\n\n", err_msg);
        du_log( upgr_cb.du_skiplog, &upgr_cb.du_log, qrytxt);
	STprintf(&lbuf[0], "\nsqlcode = %d\n", code);
	du_log( upgr_cb.du_skiplog, &upgr_cb.du_log, &lbuf);
        du_log( upgr_cb.du_skiplog, &upgr_cb.du_log, &err_msg);
}
