/*
** CK command template file
**
**
** This file is processed with `ccpp', which calls the C preprocessor.
** The file generates `cktmpl.def', which specifies commands used for
**
** the fifth character must be a colon ':'
**
** the rest of the line is a command to run after the following substitutions
** have been made:
**
** With Partial recovery the following as also been implemented
**
** %A   - Specify checkpoint path and file_name
** %B   - Physical datafile in the ../ingres/data/default/xxx
** %C   - Checkpoint pathname
** %D   - Physical pathname of data ../ingres/data/default/xxx
** %E   - Physical path and file_name of table to extract
** %F   - Checkpoint filename
** %G   - Total number of checkpoint files
** %H   - Number of tables in a location
** %I   - User specified string
** %J0  - either REDO or UNDO processing
**   1  - First journal file
**   2  - Last journal file
**   3  - Journal pathname
**   4  - Journal filename
** %K   - Checkpoint file number
** %N   - Total number of locations be operated on
** %M   - Current location number of operated on
** %P   - Location size in number of blocks 
** %O   - Offset of location in number of blocks 
** %Q   - Blocksize
** %T   - Device number (assending!)
** %U0  - First Dump file
**   1  - Last Dump file
**   2  - Pathname of dump file
**   3  - Dump filename
** %X   - Table name
**
** History:
**	08-dec-2003 (horda03)
**	    Created.
**	02-Feb-2005 (hanje04)
**	    BUG 113830
**	    iseek and oseek are not supported options to dd on Linux
**	22-Jun-2009 (kschendel) SIR 122138
**	    Use any_aix, sparc_sol, any_hpux symbols as needed.
**	    Drop a couple ancient mystery configs.
**      29-Jan-2010 (hanal04) SIR 116377
**          Add use of -E flag on Solaris and Tru64 tar commands to provide
**          support for archiving large files. All supported versions
**          of Solaris and Tru64 provide support for the -E option under
**          II 9.2.x.
**	22-Nov-2010 (kschendel) SIR 124685
**	    Fix broken ifdef a||b (use if defined);  drop obsolete ports.
*/

! The CKTMPL_WRAP.TPL is a template for invoking a shell script to trap warning
! messages generated by the backup utility (e.g. tar) performing an online 
! checkpoint, specifically when the backup utility reports an error because the
! size of files changed during the backup.
!
! To prevent a security loophole, it is not possible to use $II_SYSTEM to
! reference the location of the shell script used to detect/handle the warnings
! logged by the backup utility (without specifying absolute paths, it is
! possible for any user with privilege to checkpoint a database to have a
! script they created executed as Ingres, with all the priviliges of the Ingres
! account).
!
! In order to make use of the wrapper shell script, please enter the following
! command
!
!     sed -e "/^W/s^--II_SYSTEM^$II_SYSTEM^g" cktmpl_wrap.tpl >cktmpl_wrap.def
!
! Then define II_CKTMPL_FILE as $II_SYSTEM/ingres/files/cktmpl_wrap.def
!

# ifdef sqs_us5
/*
** Symmetry "cktmpl.def"  We use tar from bsd, /.bin/tar
*/
BSTD:   /bin/echo beginning checkpoint to tape %C of %N locations
BSDD:   /bin/echo beginning checkpoint to disk %C of %N locations
ESTD:   /bin/echo ending checkpoint to tape %C of %N locations
ESDD:   /bin/echo ending checkpoint to disk %C of %N locations
PSTD:   /bin/echo mount tape %M and press return; read foo;
WSTD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /.bin/tar cbf 20 %C *
PSDD:   /bin/echo executing checkpoint to disk
WSDD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /.bin/tar cf %A *
BSTT:   /bin/echo PARTIAL: beginning checkpoint to tape %C of %N locations
BSDT:   /bin/echo PARTIAL: beginning checkpoint to disk %C of %N locations
ESTT:   /bin/echo PARTIAL: ending checkpoint to tape %C of %N locations
ESDT:   /bin/echo PARTIAL: ending checkpoint to disk %C of %N locations
PSTT:   /bin/echo PARTIAL: mount tape %K and press return; read foo;
WSTT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cbf 20 %C %B
PSDT:   /bin/echo executing checkpoint to disk %C of %N locations
WSDT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /.bin/tar cf %A %B

BRDD:   /bin/echo beginning restore of disk %C of %N locations
BRTD:   /bin/echo beginning restore of tape %C of %N locations
BRDT:   /bin/echo PARTIAL: beginning restore of disk %C of %N locations
BRTT:   /bin/echo PARTIAL: beginning restore of tape %C of %N locations
BJDA:   /bin/echo beginning restore of journals
BJTA:   /bin/echo beginning restore of journals
BUDA:   /bin/echo beginning restore of dumps
BUTA:   /bin/echo beginning restore of dumps

PRDD:   /bin/echo executing restore to disk %C of %N locations
WRDD:   cd %D; /.bin/tar xf %A
PRTD:   /bin/echo mount tape %M and press return; read foo;
WRTD:   cd %D; /.bin/tar xf %C
PRDT:   /bin/echo restoring table %X in database location %D;
WRDT:   cd %D; /.bin/tar xf %A %B
PRTT:   /bin/echo mount tape %K and press return; read foo;
WRTT:   cd %D; /.bin/tar xf %C %B
WJDA:   /bin/true
WJTA:   /bin/true
WUDA:   /bin/true
WUTA:   /bin/true
WCDA:   /bin/echo Checking database snapshot for table level recovery
WCTA:   /bin/echo Checking database snapshot for table level recovery
WDDD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDTD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDDT:   /bin/echo deleting table %X in database location %D
WDTT:   /bin/echo deleting table %X in database location %D

IRDT:   /bin/echo beginning table level recovery
IRTT:   /bin/echo beginning table level recovery

FRDT:   /bin/echo ending table level recovery
FRTT:   /bin/echo ending table level recovery

EETE:   /bin/echo done with tape operations
EEDE:   /bin/echo done with disk operations
# define HAVE_CKTMPL
#endif	 /* sqs_us5 */

# if defined(odt_us5) || defined(sco_us5)
/*
** odt_us5
*/
BSTD:   /bin/echo beginning checkpoint to tape %C of %N locations
BSFD:   /bin/echo beginning checkpoint to tar device %C of %N locations
BSDD:   /bin/echo beginning checkpoint to disk %C of %N locations
PSTD:   /bin/echo please insert first floppy disk or cartridge tape and press return; read foo;
WSTD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cbf 20 %C *
PSFD:   /bin/echo please insert first floppy disk or cartridge tape and press return; read foo; 
WSFD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar c%C *
PSDD:   /bin/echo executing checkpoint to disk
WSDD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cf %A *
ESTD:   /bin/echo ending checkpoint to tape %C of %N locations
ESFD:   /bin/echo ending checkpoint to tar device %C of %N locations
ESDD:   /bin/echo ending checkpoint to disk %C of %N locations
BSTT:   /bin/echo PARTIAL: beginning checkpoint to tape %C of %N locations
BSDT:   /bin/echo PARTIAL: beginning checkpoint to disk %C of %N locations
ESTT:   /bin/echo PARTIAL: ending checkpoint to tape %C of %N locations
ESDT:   /bin/echo PARTIAL: ending checkpoint to disk %C of %N locations
PSTT:   /bin/echo PARTIAL: please insert first floppy disk or cartridge tape and press return; read foo;
WSTT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cbf 20 %C %B
PSFT:   /bin/echo PARTIAL: please insert first floppy disk or cartridge tape and press return; read foo;
WSFT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar c%C %B
PSDT:   /bin/echo executing checkpoint to disk %C of %N locations
WSDT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cf %A %B

BRDD:   /bin/echo beginning restore of disk %C of %N locations
BRTD:   /bin/echo beginning restore of tape %C of %N locations
BRDT:   /bin/echo PARTIAL: beginning restore of disk %C of %N locations
BRTT:   /bin/echo PARTIAL: beginning restore of tape %C of %N locations
BJDA:   /bin/echo beginning restore of journals
BJTA:   /bin/echo beginning restore of journals
BUDA:   /bin/echo beginning restore of dumps
BUTA:   /bin/echo beginning restore of dumps

PRDD:   /bin/echo executing restore to disk %C of %N locations
WRDD:   cd %D; /usr/bin/tar xf %A
PRTD:   /bin/echo please insert first floppy disk or cartridge tape tape %N and press return; read foo;
WRTD:   cd %D; /usr/bin/tar xf %C
PRFD:   /bin/echo please insert first floppy disk or cartridge tape tape %N and press return; read foo;
WRFD:   cd %D; /usr/bin/tar x%C
PRDT:   /bin/echo executing restore to disk %C of %N locations
WRDT:   cd %D; /usr/bin/tar xf %A %B
PRTT:   /bin/echo please insert first floppy disk or cartridge tape %N and press return; read foo;
WRTT:   cd %D; /usr/bin/tar xf %C %B
PRFT:   /bin/echo please insert first floppy disk or cartridge tape %N and press return; read foo;
WRFT:   cd %D; /usr/bin/tar x%C %B
WJDA:   /bin/true
WJTA:   /bin/true
WUDA:   /bin/true
WUTA:   /bin/true
WCDA:   /bin/echo Checking database snapshot for table level recovery
WCTA:   /bin/echo Checking database snapshot for table level recovery
WDDD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDTD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDDT:   /bin/echo deleting table %X in database location %D
WDTT:   /bin/echo deleting table %X in database location %D

IRDT:   /bin/echo beginning table level recovery
IRTT:   /bin/echo beginning table level recovery

FRDT:   /bin/echo ending table level recovery
FRTT:   /bin/echo ending table level recovery

EETE:   /bin/echo done with tape operations
EEDE:   /bin/echo done with disk operations
# define HAVE_CKTMPL
# endif	 /* odt_us5 || sco_us5 */

# if defined(any_hpux)
/*
** hpux
*/
BSTD:   /bin/echo beginning checkpoint to tape %C of %N locations
BSDD:   /bin/echo beginning checkpoint to disk %C of %N locations
ESTD:   /bin/echo ending checkpoint to tape %C of %N locations
ESDD:   /bin/echo ending checkpoint to disk %C of %N locations
PSTD:   /bin/echo please insert first tape and press return; read foo;
WSTD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cbf 20 %C *
PSDD:   /bin/echo executing checkpoint to disk
WSDD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cf %A *
BSTT:   /bin/echo PARTIAL: beginning checkpoint to tape %C of %N locations
BSDT:   /bin/echo PARTIAL: beginning checkpoint to disk %C of %N locations
ESTT:   /bin/echo PARTIAL: ending checkpoint to tape %C of %N locations
ESDT:   /bin/echo PARTIAL: ending checkpoint to disk %C of %N locations
PSTT:   /bin/echo PARTIAL: mount tape %K and press return; read foo;
WSTT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cbf 20 %C %B
PSDT:   /bin/echo executing checkpoint to disk %C of %N locations
WSDT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cf %A %B

BRDD:   /bin/echo beginning restore of disk %C of %N locations
BRTD:   /bin/echo beginning restore of tape %C of %N locations
BRDT:   /bin/echo PARTIAL: beginning restore of disk %C of %N locations
BRTT:   /bin/echo PARTIAL: beginning restore of tape %C of %N locations
BJDA:   /bin/echo beginning restore of journals
BJTA:   /bin/echo beginning restore of journals
BUDA:   /bin/echo beginning restore of dumps
BUTA:   /bin/echo beginning restore of dumps

PRDD:   /bin/echo executing restore to disk %C of %N locations
WRDD:   cd %D; /bin/tar xf %A
PRTD:   /bin/echo please insert first tape %N and press return; read foo;
WRTD:   read foo; cd %D; /bin/tar xf %C
PRDT:   /bin/echo restoring table %X in database location %D;
WRDT:   cd %D; /bin/tar xf %A %B
PRTT:   /bin/echo please insert first tape %N and press return; read foo;
WRTT:   cd %D; /bin/tar xf %C %B
WJDA:   /bin/true
WJTA:   /bin/true
WUDA:   /bin/true
WUTA:   /bin/true
WCDA:   /bin/echo Checking database snapshot for table level recovery
WCTA:   /bin/echo Checking database snapshot for table level recovery
WDDD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDTD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDDT:   /bin/echo deleting table %X in database location %D
WDTT:   /bin/echo deleting table %X in database location %D

IRDT:   /bin/echo beginning table level recovery
IRTT:   /bin/echo beginning table level recovery

FRDT:   /bin/echo ending table level recovery
FRTT:   /bin/echo ending table level recovery

EETE:   /bin/echo done with tape operations
EEDE:   /bin/echo done with disk operations
# define HAVE_CKTMPL
# endif	 /* hpux */

# if defined(sos_us5)
/*
**  In att universe, use /usr/bin/tar.
*/
BSTD:   echo beginning checkpoint to tape %C of %N locations
BSDD:   echo beginning checkpoint to disk %C of %N locations
ESTD:   echo ending checkpoint to tape %C of %N locations
ESDD:   echo ending checkpoint to disk %C of %N locations
PSTD:   echo mount tape %M and press return; read foo; cd %D;
WSTD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cbf 20 %C *
PSDD:   echo executing checkpoint to disk
WSDD:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cf %A *
BSTT:   echo PARTIAL: beginning checkpoint to tape %C of %N locations
BSDT:   echo PARTIAL: beginning checkpoint to disk %C of %N locations
ESTT:   echo PARTIAL: ending checkpoint to tape %C of %N locations
ESDT:   echo PARTIAL: ending checkpoint to disk %C of %N locations
PSTT:   echo PARTIAL: mount tape %K and press return; read foo;
WSTT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cbf 20 %C %B
PSDT:   echo executing checkpoint to disk %C of %N locations
WSDT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /usr/bin/tar cf %A %B

BRDD:   echo beginning restore of disk %C of %N locations
BRTD:   echo beginning restore of tape %C of %N locations
BRDT:   echo PARTIAL: beginning restore of disk %C of %N locations
BRTT:   echo PARTIAL: beginning restore of tape %C of %N locations
BJDA:   echo beginning restore of journals
BJTA:   echo beginning restore of journals
BUDA:   echo beginning restore of dumps
BUTA:   echo beginning restore of dumps

PRDD:   echo executing restore to disk %C of %N locations
WRDD:   cd %D; /usr/bin/tar xf %A
PRTD:   echo mount tape %M and press return; read foo;
WRTD:   cd %D; /usr/bin/tar xf %C
PRDT:   echo restoring table %X in database location %D;
WRDT:   cd %D; /usr/bin/tar xf %A %B
PRTT:   echo mount tape %K and press return; read foo; cd %D;
WRTT:   cd %D; /usr/bin/tar xf %C %B
WJDA:   /bin/true
WJTA:   /bin/true
WUDA:   /bin/true
WUTA:   /bin/true
WCDA:   echo Checking database snapshot for table level recovery
WCTA:   echo Checking database snapshot for table level recovery
WDDD:   echo deleting files in location %D; cd %D; rm -f *
WDTD:   echo deleting files in location %D; cd %D; rm -f *
WDDT:   echo deleting table %X in database location %D
WDTT:   echo deleting table %X in database location %D

IRDT:   echo beginning table level recovery
IRTT:   echo beginning table level recovery

FRDT:   echo ending table level recovery
FRTT:   echo ending table level recovery

EETE:   echo done with tape operations
EEDE:   echo done with disk operations
# define HAVE_CKTMPL
# endif	 /* sos_us5 */


# if defined(int_w32) || defined(axp_w32) || defined(i64_win)
BSTD:    echo Beginning checkpoint to tape %C of %N locations.
BSDD:    echo Beginning checkpoint to disk %C of %N locations.
ESTD:    echo Ending checkpoint to tape %C of %N locations
ESDD:    echo Ending checkpoint to disk %C of %N locations
BRTD:    echo Beginning restore of tape %C of %N locations.
BRDD:    echo Beginning restore of disk %C of %N locations.
BSTT:    echo PARTIAL: Beginning checkpoint to tape %C of %N locations.
BSDT:    echo PARTIAL: Beginning checkpoint to disk %C of %N locations.
ESTT:    echo PARTIAL: Ending checkpoint to tape %C of %N locations
ESDT:    echo PARTIAL: Ending checkpoint to disk %C of %N locations
BRTT:    echo PARTIAL: Beginning restore of tape %C of %N locations.
BRDT:    echo PARTIAL: Beginning restore of disk %C of %N locations.
BJDA:    echo beginning restore of journals
BJTA:    echo beginning restore of journals
BUDA:    echo beginning restore of dumps
BUTA:    echo beginning restore of dumps
WJDA:    iitrue
WJTA:    iitrue
WUDA:    iitrue
WUTA:    iitrue
WCDA:    echo Checking database snapshot for table level recovery
WCTA:    echo Checking database snapshot for table level recovery
PSTD:    echo executing checkpoint
WSTD:    ckntbkup "%C" %N "%D" BACKUP
PSDD:    echo executing checkpoint
WSDD:    ckxcopy  "%D" "%A" BACKUP
PSTT:    echo executing checkpoint to tape %C of %N locations
WSTT:    ckntbkup "%C" %N "%D" BACKUP PARTIAL %B
PSDT:    echo executing checkpoint to disk %C of %N locations
WSDT:    ckxcopy  "%D" "%A" BACKUP PARTIAL %B
PRTD:    echo executing restore from tape
WRTD:    ckntbkup "%C" %N "%D" RESTORE
PRDD:    echo executing restore from disk
WRDD:    ckxcopy  "%D" "%A" RESTORE
PRTT:    echo executing restore from tape
WRTT:    ckntbkup "%C" %N "%D" RESTORE PARTIAL %B
PRDT:    echo executing restore from disk 
WRDT:    ckxcopy  "%D" "%A" RESTORE PARTIAL %B

WDDD:    echo deleting files in location %D & del /Q "%D\*.*"
WDTD:    echo deleting files in location %D & del /Q "%D\*.*"
WDDT:    echo deleting table %X in database location %D
WDTT:    echo deleting table %X in database location %D

IRDT:    echo beginning table level recovery
IRTT:    echo beginning table level recovery

FRDT:    echo ending table level recovery
FRTT:    echo ending table level recovery

EETE:    echo Done with tape operations.
EEDE:    echo Done with disk checkpoint operations.
# define HAVE_CKTMPL
# endif /* int_w32, axp_w32, i64_win */

# ifndef HAVE_CKTMPL
/*
** default "cktmpl.def"
*/
/*
** DEFINITIONS FOR PARTIAL BACKUP DMFCPP
*/
BSTD:	/bin/echo beginning checkpoint to tape %C of %N locations
BSDD:	/bin/echo beginning checkpoint to disk %C of %N locations
ESTD:   /bin/echo ending checkpoint to tape %C of %N locations
ESDD:   /bin/echo ending checkpoint to disk %C of %N locations
PSTD:	/bin/echo mount tape %M and press return; read foo; 
# if defined(sparc_sol) || defined(a64_sol) || defined(axp_osf)
WSTD:	cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cbfE 20 %C *
# else
WSTD:	cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cbf 20 %C *
# endif
PSDD:   /bin/echo executing checkpoint to disk 
# if defined(sparc_sol) || defined(a64_sol) || defined(axp_osf)
WSDD:	cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cfE %A *
# else
WSDD:	cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cf %A *
# endif
PSDR:   /bin/echo executing checkpoint to disk 
# ifdef LNX
WSDR:   dd if=%E of=%A count=%P bs=%Q
PSTR:   /bin/echo mount tape %M and press return; read foo;
WSTR:   dd if=%E of=%C count=%P bs=%Q
# else

WSDR:	dd if=%E of=%A iseek=%S count=%P bs=%Q
PSTR:	/bin/echo mount tape %M and press return; read foo; 
WSTR:	dd if=%E of=%C iseek=%S count=%P bs=%Q
# endif
BSTT:   /bin/echo PARTIAL: beginning checkpoint to tape %C of %N locations
BSDT:   /bin/echo PARTIAL: beginning checkpoint to disk %C of %N locations
ESTT:   /bin/echo PARTIAL: ending checkpoint to tape %C of %N locations
ESDT:   /bin/echo PARTIAL: ending checkpoint to disk %C of %N locations
PSTT:   /bin/echo PARTIAL: mount tape %K and press return; read foo;
# if defined(sparc_sol) || defined(a64_sol) || defined(axp_osf)
WSTT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cbfE 20 %C %B
# else
WSTT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cbf 20 %C %B
# endif
PSDT:   /bin/echo executing checkpoint to disk %C of %N locations
# if defined(sparc_sol) || defined(a64_sol) || defined(axp_osf)
WSDT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cfE %A %B
# else
WSDT:   cd %D; --II_SYSTEM/ingres/bin/cktmpl_wrap /bin/tar cf %A %B
# endif

/*
** DEFINITIONS FOR PARTIAL RECOVERY DMFRFP
*/
BRDD:	/bin/echo beginning restore of disk %C of %N locations
BRTD:	/bin/echo beginning restore of tape %C of %N locations
BRDT:   /bin/echo PARTIAL: beginning restore of disk %C of %N locations
BRTT:   /bin/echo PARTIAL: beginning restore of tape %C of %N locations
BJDA:   /bin/echo beginning restore of journals
BJTA:   /bin/echo beginning restore of journals
BUDA:   /bin/echo beginning restore of dumps
BUTA:   /bin/echo beginning restore of dumps
PRDD:   /bin/echo executing restore to disk %C of %N locations
WRDD:	cd %D; /bin/tar xf %A
PRTD:	/bin/echo mount tape %M and press return; read foo; 
WRTD:	cd %D; /bin/tar xf %C
PRDT:	/bin/echo restoring table %X in database location %D;
WRDT:	cd %D; /bin/tar xf %A %B
PRTT:	/bin/echo mount tape %K and press return; read foo; 
WRTT:	cd %D; /bin/tar xf %C %B
PRDR:   /bin/echo executing restore to disk %C of %N locations
# ifdef LNX
WRDR:   dd if=%A of=%E count=%P bs=%Q
PRTR:   /bin/echo mount tape %M and press return; read foo;
WRTR:   dd if=%A of=%C count=%P bs=%Q
# else
WRDR:	dd if=%A of=%E oseek=%S count=%P bs=%Q
PRTR:	/bin/echo mount tape %M and press return; read foo; 
WRTR:	dd if=%A of=%C oseek=%S count=%P bs=%Q
# endif

WJDA:	/bin/true
WJTA:	/bin/true
WUDA:   /bin/true
WUTA:   /bin/true
WCDA:   /bin/echo Checking database snapshot for table level recovery
WCTA:   /bin/echo Checking database snapshot for table level recovery
WDDD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDTD:   /bin/echo deleting files in location %D; cd %D; rm -f *
WDTR:   /bin/true
WDDT:   /bin/echo deleting table %X in database location %D
WDTT:   /bin/echo deleting table %X in database location %D

IRDT:   /bin/echo beginning table level recovery
IRTT:   /bin/echo beginning table level recovery

FRDT:	/bin/echo ending table level recovery
FRTT:	/bin/echo ending table level recovery

EETE:	/bin/echo done with tape operations
EEDE:	/bin/echo done with disk operations
# define HAVE_CKTMPL
#endif	 /* Default case */
