@echo off
setlocal
REM
REM  Name: buildpatch.bat
REM
REM  Description:
REM	Similiar to buildrel script, builds patch image on windows.
REM	Requires additional two variables to be set to work properly:
REM	II_PATCH_DIR (i.e. %ING_ROOT%\patchimage)
REM	II_PATCH_RELEASE_DIR (i.e. %ING_ROOT%\patch_release)
REM
REM  History:
REM	28-Nov-2005 (drivi01)
REM		Created.
REM	03-Mar-2006 (drivi01)
REM		If patch.lis contains files in a directories and those
REM		directories that don't
REM	    	exist in a patch directory of the image we will not
REM		be able to copy patch files onto the image.
REM		Added routines to check if the directories on the 
REM		patch image exist to successfully copy files in
REM		patch.lis.
REM	09-Mar-2006 (drivi01)
REM		1. Added automatic generation of version.rel on a
REM		patchimage.  
REM		2. Added DEEDXID into env.
REM		3. Modified script to work with cygwin.
REM		4. Added support for using list of files generated
REM		by r3genpick.sh utility since the files comes out
REM		in a different format with unix slashes.
REM		5. Added check for AWK_CMD variable and
REM		patch.html document.
REM		6. Copy list generated by r3genpick to patchimage.
REM	31-Mar-2006 (drivi01)
REM		Strip out p from DEEDXID before it's appended to
REM		version.rel.  Modify routine that verifies patch
REM		id was successfully added to version.rel.
REM	14-Jun-2006 (drivi01)
REM		Made extensive changes to buildpatch. buildpatch no
REM		longer expects any parameters and will expect 
REM		picklist.dat and picklist_SOL.dat in ING_ROOT of
REM		the buildarea.  picklist.dat and picklist_SOL.dat
REM		will result in a building of two patches 
REM		in BLDROOT\patches\%DEEDXID% one of them being SOL.
REM	09-Oct-2007 (wanfr01)
REM		Bug 118216
REM		patches need manifest.dat to know what files to backup
REM		for incremental patching.
REM	13-Mar-2009 (shust01)
REM		Bug 121786
REM		Add code to digitally sign binaries during patch process
REM	06-Jan-2010 (drivi01)
REM	     chktrust utility no longer available with Visual Studio 2008.
REM	     SignTool is the recommended utility to use with the new
REM	     compiler.  This change replaces chktrust instances with 
REM	     SignTool.
REM	11-Jan-2010 (drivi01)
REM	     Replace /kp flag with /pa flag to ensure compatibility with
REM	     different version of signtool.  /pa flag ensures the signature
REM	     is verified using the "Default Authenticode" verification
REM	     policy.
REM	12-Sep-2011 (drivi01)
REM	     rm -rf on setup.exe is not working with cygwin tools.  Change
REM	     the direction of the last slash which appears to fix the problem
REM	     and also appears to work with MKS Toolkit.  For VectorWise product
REM	     remove instmsiw.exe as would never need version 3 of MSI engine
REM	     for VW product.  Add a call to readvers.bat to determine the 
REM	     product that a patch being built for.
REM	
REM

call readvers.bat

set PICKLIST=%ING_ROOT%\picklist.dat
set PICKLIST_SOL=%ING_ROOT%\picklist_SOL.dat

:CHECK-10
if exist %PICKLIST% goto CHECK-9
echo File %PICKLIST% doesn't exist or could not be found!!
goto DONE

:CHECK-9
if exist %TMPDIR% goto CHECK-8
echo Couldn't find temporary directory, TMPDIR isn't set!!
goto DONE

:CHECK-8
ls -ltr %PICKLIST% | %AWK_CMD% '{print "@set buildpatch_file_list_size="$5}' > %TMPDIR%\buildpatch.$$1.bat
call %TMPDIR%\buildpatch.$$1.bat
rm %TMPDIR%\buildpatch.$$1.bat
if "buildpatch_file_list_size" GTR "0" goto CHECK0
echo File %PICKLIST% doesn't contain any files!!
goto DONE

:CHECK0
if not x%II_PATCH_DIR%==x goto CHECK1
echo You must set II_PATCH_DIR !!
goto DONE


:CHECK1
if not x%II_SYSTEM%==x goto CHECK2
echo You must set II_SYSTEM !!
goto DONE

:CHECK2

:CHECK3
if not x%ING_SRC%==x goto CHECK4
echo You must set ING_SRC !!
goto DONE

:CHECK4
if not x%BLDROOT%==x goto CHECK5
echo You must set BLDROOT !!
goto DONE

:CHECK5

:CHECK6
if not x%DEEDXID%==x goto CODE1
echo You must assign patch id to DEEDXID !!
goto DONE

:CODE1
set II_PATCH_DIR=%BLDROOT%\patches\%DEEDXID%
if not exist %II_PATCH_DIR% mkdir %II_PATCH_DIR%

:CODE1_1
echo %DEEDXID%|sed s:p:patch: |awk '{print "@set DEEDXID2="$1}'> %TEMP%\buildpatch.$$1.bat
call %TEMP%\buildpatch.$$1.bat
rm %TEMP%\buildpatch.$$1.bat
set II_PATCH_DIR_IMAGE=%II_PATCH_DIR%\%DEEDXID2%
if not exist %II_PATCH_DIR_IMAGE% mkdir %II_PATCH_DIR_IMAGE%
test -s %PICKLIST_SOL% 
if %ERRORLEVEL%==0  goto CODE_SOL
goto CODE_NOSOL

:CODE_SOL
set II_PATCH_DIR_SOL=%II_PATCH_DIR%\%DEEDXID2%_SOL
if not exist %II_PATCH_DIR_SOL% mkdir %II_PATCH_DIR_SOL%
goto CODE2

:CODE_NOSOL
set II_PATCH_DIR_SOL=


:CODE2
if exist %II_PATCH_DIR%\version.rel rm %II_PATCH_DIR%\version.rel
cat %ING_BUILD%\version.rel |head -1> "%II_PATCH_DIR%\version.rel"
echo %DEEDXID%|echo %DEEDXID%|sed s/"p"/""/g >> %II_PATCH_DIR%\version.rel

:CODE2_SOL
if x%II_PATCH_DIR_SOL% == x goto CHECK7
if exist %II_PATCH_DIR_SOL%\version.rel rm %II_PATCH_DIR_SOL%\version.rel
cat %ING_BUILD%\version.rel |head -1> "%II_PATCH_DIR_SOL%\version.rel"
echo %DEEDXID%|sed s/"p"/""/g|awk '{print $1"_SOL"}' >> %II_PATCH_DIR_SOL%\version.rel

:CHECK7
cat %II_PATCH_DIR%\version.rel|egrep "^[0-9]" >%TMPDIR%\buildpatch.$$1
ls -ltr %TMPDIR%\buildpatch.$$1|%AWK_CMD% '{print "@set buildpatch_patch_id="$5}'>%TMPDIR%\buildpatch.$$2.bat
call %TMPDIR%\buildpatch.$$2.bat
rm "%TMPDIR%\buildpatch.$$1" "%TMPDIR%\buildpatch.$$2.bat"
if %buildpatch_patch_id% GTR 0 goto CHECK8
echo Your %II_PATCH_DIR_IMAGE%\version.rel is missing patch id.
goto DONE

:CHECK7_SOL
if x%II_PATCH_DIR_SOL% == x goto CHECK8
cat %II_PATCH_DIR_SOL%\version.rel|egrep "^[0-9]" >%TMPDIR%\buildpatch.$$1
ls -ltr %TMPDIR%\buildpatch.$$1|%AWK_CMD% '{print "@set buildpatch_patch_id="$5}'>%TMPDIR%\buildpatch.$$2.bat
call %TMPDIR%\buildpatch.$$2.bat
rm "%TMPDIR%\buildpatch.$$1" "%TMPDIR%\buildpatch.$$2.bat"
if %buildpatch_patch_id% GTR 0 goto CHECK8
echo Your %II_PATCH_DIR_SOL%\version.rel is missing patch id.
goto DONE

:CHECK8
echo.
echo Generating List of Files that Need to be Digitally Signed
echo.

set TEMP1=%TEMP%\picklist.$$%RANDOM%
if exist "%TEMP1%" del "%TEMP1%"
for /F %%I IN (%PICKLIST%) do (
	if %%~xI==.cab echo %%I|grep / >> "%TEMP1%"
	if %%~xI==.exe echo %%I|grep / >> "%TEMP1%"
	if %%~xI==.dll echo %%I|grep / >> "%TEMP1%"
	if %%~xI==.dist echo %%I|grep / >> "%TEMP1%"
)
set TEMP2=%TEMP%\picklist.$$%RANDOM%
if exist "%TEMP2%" del "%TEMP2%"
for /F "delims=. tokens=1*" %%I IN (%TEMP1%) do (
echo %II_SYSTEM%\ingres%%I.%%J | sed s:/:\\:g >> "%TEMP2%"
)
if exist "%TEMP1%" del "%TEMP1%"

echo.
echo Checking if the files are signed already
echo.
for /F %%I in (%TEMP2%) do (
echo signtool verify /pa /q "%%~I"
signtool verify /pa /q "%%~I"
if ERRORLEVEL 1 call iisign "%%~I"
if not ERRORLEVEL 0 goto DIGSIG_ERROR
)
if exist "%TEMP2%" del "%TEMP2%"

:DIGSIG_DONE
echo.
echo All Files are digitally signed!
echo.

:CHECK8A
REM 
REM Check if the directory for files being copied from patch.lis exist on the patchimage.
REM 
echo @echo off > %TMPDIR%\buildpatch.$$1.bat
cat %PICKLIST%|sed s:./:\\:|sed s:/:\\:g|%AWK_CMD% '{print "dirname "$1}' >> %TMPDIR%\buildpatch.$$1.bat
call %TMPDIR%\buildpatch.$$1.bat > %TMPDIR%\buildpatch.$$2.bat
cat  %TMPDIR%\buildpatch.$$2.bat| sed s:/:\\:g |%AWK_CMD% '{print "if not exist %%II_PATCH_DIR_IMAGE%%\\\\patch\\\\ingres"$1" mkdir %%II_PATCH_DIR_IMAGE%%\\\\patch\\\\ingres"$1}' > %TMPDIR%\buildpatch.$$3.bat
call %TMPDIR%\buildpatch.$$3.bat
rm %TMPDIR%\buildpatch.$$1.bat
rm %TMPDIR%\buildpatch.$$2.bat
rm %TMPDIR%\buildpatch.$$3.bat

REM
REM Checksum files that will be patched from %PICKLIST% in II_SYSTEM then save checksum to
REM patchfiles.lis in II_PATCH_DIR_IMAGE with II_PATCH_DIR_IMAGE path to files.
REM
echo %II_SYSTEM%|sed s:\\:\\\\:g|%AWK_CMD% '{print "@set buildpatch_system="$0}'>"%TMPDIR%\buildpatch.$$3.bat" 
call "%TMPDIR%\buildpatch.$$3.bat" 
rm "%TMPDIR%\buildpatch.$$3.bat" 
echo @echo off>"%TMPDIR%\buildpatch.$$1.bat"
cat %PICKLIST%|%AWK_CMD% '{print "iicksum "$0}'|sed s:./:%%II_SYSTEM%%\\ingres\\: |sed 's:/:\\:g' >> "%TMPDIR%\buildpatch.$$1.bat"
call "%TMPDIR%\buildpatch.$$1.bat">"%TMPDIR%\buildpatch.$$2"
if not %ERRORLEVEL%==0 goto ERROR1
cat "%TMPDIR%\buildpatch.$$2"|sed -e s$'%buildpatch_system%'$patch$g|sed -e s/\//\\/g>%II_PATCH_DIR_IMAGE%\patchfiles.lis
rm "%TMPDIR%\buildpatch.$$2"   "%TMPDIR%\buildpatch.$$1.bat"

:CHECK8_SOL
if x%II_PATCH_DIR_SOL% == x goto CHECK9
REM 
REM Check if the directory for files being copied from picklist_SOL.dat exist on the patchimage.
REM 
echo @echo off > %TMPDIR%\buildpatch.$$1.bat
cat %PICKLIST_SOL%|sed s:./:\\:|sed s:/:\\:g|%AWK_CMD% '{print "dirname "$1}' >> %TMPDIR%\buildpatch.$$1.bat
call %TMPDIR%\buildpatch.$$1.bat > %TMPDIR%\buildpatch.$$2.bat
cat  %TMPDIR%\buildpatch.$$2.bat| sed s:/:\\:g |%AWK_CMD% '{print "if not exist %%II_PATCH_DIR_SOL%%\\\\patch\\\\ingres"$1" mkdir %%II_PATCH_DIR_SOL%%\\\\patch\\\\ingres"$1}' > %TMPDIR%\buildpatch.$$3.bat
call %TMPDIR%\buildpatch.$$3.bat
rm %TMPDIR%\buildpatch.$$1.bat
rm %TMPDIR%\buildpatch.$$2.bat
rm %TMPDIR%\buildpatch.$$3.bat

REM
REM Checksum files that will be patched from %PICKLIST_SOL% in II_SYSTEM then save checksum to
REM patchfiles.lis in II_PATCH_DIR_SOL with II_PATCH_DIR_SOL path to files.
REM
echo %II_SYSTEM%|sed s:\\:\\\\:g|%AWK_CMD% '{print "@set buildpatch_system="$0}'>"%TMPDIR%\buildpatch.$$3.bat" 
call "%TMPDIR%\buildpatch.$$3.bat" 
rm "%TMPDIR%\buildpatch.$$3.bat" 
echo @echo off>"%TMPDIR%\buildpatch.$$1.bat"
cat %PICKLIST_SOL%|%AWK_CMD% '{print "iicksum "$0}'|sed s:./:%%II_SYSTEM%%\\ingres\\: |sed 's:/:\\:g' >> "%TMPDIR%\buildpatch.$$1.bat"
call "%TMPDIR%\buildpatch.$$1.bat">"%TMPDIR%\buildpatch.$$2"
if not %ERRORLEVEL%==0 goto ERROR1
cat "%TMPDIR%\buildpatch.$$2"|sed -e s$'%buildpatch_system%'$patch$g|sed -e s/\//\\/g>%II_PATCH_DIR_SOL%\patchfiles.lis
rm "%TMPDIR%\buildpatch.$$2"   "%TMPDIR%\buildpatch.$$1.bat"




:CHECK9
if not exist %II_PATCH_DIR_IMAGE%\patch\ingres mkdir %II_PATCH_DIR_IMAGE%\patch\ingres
if not exist %II_PATCH_DIR_IMAGE%\patch\ingres\bin mkdir %II_PATCH_DIR_IMAGE%\patch\ingres\bin
if not exist %II_PATCH_DIR_IMAGE%\patch\ingres\lib mkdir %II_PATCH_DIR_IMAGE%\patch\ingres\lib
if not exist %II_PATCH_DIR_IMAGE%\patch\ingres\files mkdir %II_PATCH_DIR_IMAGE%\patch\ingres\files
if not exist %II_PATCH_DIR_IMAGE%\patch\ingres\utility mkdir %II_PATCH_DIR_IMAGE%\patch\ingres\utility

:CHECK9_SOL
if x%II_PATCH_DIR_SOL% == x goto CHECK10
if not exist %II_PATCH_DIR_SOL%\patch\ingres mkdir %II_PATCH_DIR_SOL%\patch\ingres
if not exist %II_PATCH_DIR_SOL%\patch\ingres\bin mkdir %II_PATCH_DIR_SOL%\patch\ingres\bin
if not exist %II_PATCH_DIR_SOL%\patch\ingres\lib mkdir %II_PATCH_DIR_SOL%\patch\ingres\lib
if not exist %II_PATCH_DIR_SOL%\patch\ingres\files mkdir %II_PATCH_DIR_SOL%\patch\ingres\files
if not exist %II_PATCH_DIR_SOL%\patch\ingres\utility mkdir %II_PATCH_DIR_SOL%\patch\ingres\utility


:CHECK10
if not x%II_PATCH_RELEASE_DIR%==x goto CHECK11
echo You must set II_PATCH_RELEASE_DIR!!
goto DONE

:CHECK11
if not x%AWK_CMD%==x goto CHECK12
echo You must set AWK_CMD to awk if using MKS or gawk if cygwin!!
goto DONE

:CHECK12

:CHECK13
if exist %II_PATCH_DIR%\\patch.html goto CHECK13_1
echo Your II_PATCH_DIR must contain patch.html with install instructions!!
goto DONE

:CHECK13_1
cp %II_PATCH_DIR%\\patch.html %II_PATCH_DIR_IMAGE%
if x%II_PATCH_DIR_SOL% NEQ x cp %II_PATCH_DIR%\\patch.html %II_PATCH_DIR_SOL%

:CONT1
echo.
"%MKSLOC%\echo" "Version: \c" 
cat %II_SYSTEM%/ingres/version.rel
echo Patch directory: %II_PATCH_DIR%
echo.

:CONT2
echo Copying binaries on the list to %II_PATCH_DIR_IMAGE% directory
cat %PICKLIST%|sed s:./:\\:|sed s:/:\\:g |%AWK_CMD% '{print "copy /y %%II_SYSTEM%%\\\\ingres"$1" %%II_PATCH_DIR_IMAGE%%\\\\patch\\\\ingres"$1}' >  "%TMPDIR%\buildpatch.$$1.bat"
call "%TMPDIR%\buildpatch.$$1.bat"
if not %ERRORLEVEL% == 0 goto ERROR2
rm  "%TMPDIR%\buildpatch.$$1.bat"

:CONT2_SOL
if x%II_PATCH_DIR_SOL% == x goto CONT3
echo Copying binaries on the list to %II_PATCH_DIR_SOL% directory
cat %PICKLIST_SOL%|sed s:./:\\:|sed s:/:\\:g |%AWK_CMD% '{print "copy /y %%II_SYSTEM%%\\\\ingres"$1" %%II_PATCH_DIR_SOL%%\\\\patch\\\\ingres"$1}' >  "%TMPDIR%\buildpatch.$$1.bat"
call "%TMPDIR%\buildpatch.$$1.bat"
if not %ERRORLEVEL% == 0 goto ERROR2_SOL
rm  "%TMPDIR%\buildpatch.$$1.bat"


:CONT3
echo Building patch package
cd %ING_SRC%\front\st\patch_win
call chmod 777 *.ism
ISCmdBld.exe -x -p PatchProject.ism -b %II_PATCH_RELEASE_DIR%\PatchProject
if errorlevel 1 goto ERROR3

:CONT4
call chmod 444 *.ism
echo Copying files
cp -p -v %II_SYSTEM%\ingres\bin\PatchUpdate.exe %II_PATCH_DIR_IMAGE%
if x%II_PATCH_DIR_SOL% NEQ x cp -p -v %II_SYSTEM%\ingres\bin\PatchUpdate.exe %II_PATCH_DIR_SOL%
copy /y "%II_PATCH_RELEASE_DIR%\PatchProject\Product Configuration 1\Release 1\DiskImages\Disk1"\*.* %II_PATCH_DIR_IMAGE%
if x%II_PATCH_DIR_SOL% NEQ x copy /y "%II_PATCH_RELEASE_DIR%\PatchProject\Product Configuration 1\Release 1\DiskImages\Disk1"\*.* %II_PATCH_DIR_SOL%
cp -p -v %ING_BUILD%\picklist.dat %II_PATCH_DIR_IMAGE%
rm -rf %II_PATCH_DIR_IMAGE%/setup.*
if "%conf_IVW%"=="true" rm -rf %II_PATCH_DIR_IMAGE%/instmsiw.exe
if x%II_PATCH_DIR_SOL% NEQ x rm -rf %II_PATCH_DIR_SOL%/setup.*
cp -p -v %II_PATCH_DIR%\manifest.dat %II_PATCH_DIR_IMAGE%
cp -p -v %II_PATCH_DIR%\version.rel  %II_PATCH_DIR_IMAGE%
goto DIGSIG2

:DIGSIG2
echo.
echo.
signtool verify /pa /q "%II_PATCH_DIR_IMAGE%\instmsia.exe"
if ERRORLEVEL 1 call iisign "%II_PATCH_DIR_IMAGE%\instmsia.exe"
if not ERRORLEVEL 0 goto DIGSIG_ERROR
signtool verify /pa /q "%II_PATCH_DIR_IMAGE%\instmsiw.exe"
if ERRORLEVEL 1 call iisign "%II_PATCH_DIR_IMAGE%\instmsiw.exe"
if not ERRORLEVEL 0 goto DIGSIG_ERROR
signtool verify /pa /q "%II_PATCH_DIR_IMAGE%\Ingres Patch.msi"
if ERRORLEVEL 1 call iisign "%II_PATCH_DIR_IMAGE%\Ingres Patch.msi"
if not ERRORLEVEL 0 goto DIGSIG_ERROR
signtool verify /pa /q "%II_PATCH_DIR_IMAGE%\PatchUpdate.exe"
if ERRORLEVEL 1 call iisign "%II_PATCH_DIR_IMAGE%\PatchUpdate.exe"
if not ERRORLEVEL 0 goto DIGSIG_ERROR
goto ZIP

:ZIP
cd %II_PATCH_DIR%
zip -r %DEEDXID2% %DEEDXID2%
if x%II_PATCH_DIR_SOL% NEQ x zip -r %DEEDXID2%_SOL %DEEDXID2%_SOL

:CONT5
echo DONE!!!
goto DONE

:ERROR1
echo buildpatch.bat hit a bad error while trying to get checksums of files being patched.  Aborting!!!
goto DONE

:ERROR2
rm  "%TMPDIR%\buildpatch.$$1.bat"
echo buildpatch.bat hit a bad error while copying files to %II_PATCH_DIR_IMAGE%.  Aborting!!!
goto DONE

:ERROR2_SOL
rm  "%TMPDIR%\buildpatch.$$1.bat"
echo buildpatch.bat hit a bad error while copying files to %II_PATCH_DIR_SOL%.  Aborting!!!
goto DONE

:ERROR3
echo buildpatch.bat hit a bad error while running ISCmdBld.exe  on PatchProject ism.
goto DONE

:DIGSIG_ERROR
echo error occurred while digitally signing binaries.
goto DONE

:DONE
endlocal


