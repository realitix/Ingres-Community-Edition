/* 
**	Copyright (c) 2004 Actian Corporation  
*/

# include       <compat.h>
# include       <cv.h>
# include	<si.h>
# include       <st.h>
# include       <er.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
# include       <fe.h>
## include      <abclass.qsh>
# include	<adf.h>
# include       <ft.h>
# include       <fmt.h>
# include       <frame.h>
# include       <runtime.h>
# include       <ug.h>

# include       <metafrm.h>
# include       "ervq.h"
#include	"vqloc.h"

/**
** Name:	vqfrbeha -	frame behavior display loop code
**
** Description:
**	Process the display loop to prompt the user for the frame
**	behavior.
**
**	This file defines:
**		IIVQgfbGetFrameBehavior - get frame behavior
**
** History:
**	10/10/89  (tom) - created
**	1/91 (Mike S)	Add qualification processing for masters in a tablefield
**	6-dec-92 (blaise)
**		Added support for optimistic locking.
**	8-feb-93 (blaise)
**		Added help for optimistic locking.
**	25-jan-95 (forky01)
**		Added function clear_lockcols to help fix bug#60373.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**/

/* # define's */
# define LOCK_TYPES	3	/* No. of options for "locks held" behaviour */
/*
** Elements of the master_cols and detail_cols arrays: first row holds the
** name of a column used for a sequence value; second row a date/time stamp
** column, third row a username column.
*/
# define SEQ_COL	0
# define DATE_COL	1
# define USER_COL	2

/* GLOBALDEF's */

/* extern's */

FUNC_EXTERN i4  IIFDlpListPick();
FUNC_EXTERN i4  IIFDlpeListPickEnd();
FUNC_EXTERN i4  IIVQptPrimaryTab();

/* static's */
static struct {
	ER_MSGID	type;
	ER_MSGID	expl;
} lock_types[LOCK_TYPES] =
{
	{F_VQ0159_No_Lock,	F_VQ015D_No_Lock_Exp},
	{F_VQ015A_Dbms_Lock,	F_VQ015E_Dbms_Lock_Exp},
	{F_VQ015B_Opt_Lock,	F_VQ015F_Opt_Lock_Exp}
};

static
##	char	locks_form[]	= ERx("vqlocks"),
##		locks_tblfld[]	= ERx("columns"),
##		_locktype[]	= ERx("locktype"),
##		_master_col[]	= ERx("master_col"),
##		_detail_col[]	= ERx("detail_col");

/* return value.. indicating if we have changed anything */
static i4  _retval;

static i4	vq_FB2();
static VOID	vqMFmode();
static VOID	vq_Tabflags();
static VOID	handle_locking();
static char * 	get_lock_name();
static i4	get_lock_mask();
static VOID	get_locking_cols();
static STATUS	check_lockcol();
static VOID	clear_lockcols();
static VOID	write_lockcols();
static i4	list_cols();



/*{
** Name:	IIVQgfbGetFrameBehavior	- get frame behavior 
**
** Description:
**	Put up a form and prompt for the frame behavior of 
**	an update or browse frame.
**	
**
** Inputs:
**	mf
**
** Outputs:
**	Returns:
**		returns DOGEN flag if we changed anything
**
**	Exceptions:
**
** Side Effects:
**
** History:
**	10/10/89  (tom) - created
**	5-nov-92 (blaise)
**		Changed the interface to "locks held" frame behaviour to
**		support optimistic locking.
*/

i4
IIVQgfbGetFrameBehavior(mf)
METAFRAME *mf;
{
	i4 nrows;
	i4 type = IIVQotObjectType(mf->apobj);
	char *prmpt;
	char options[200];
	char buf[16];

	_retval = 0;	/* initialize the return value.. which
			   indicates whether or not something changed */

	prmpt = ERget(F_VQ00B3_eop_frbeha);

	/* we must loop and continue to reconstruct the listpick cause
	   it the state of one of the items might change. */
	for (;;) 
	{
		/* both browse and update have these */
		STcopy(ERget(F_VQ0116_QualProc), options);
		STcat(options, ERget( (mf->mode & MF_NOQUAL) 
			? F_VQ0120_Disabled : F_VQ011F_Enabled));
		nrows = 1;

		/* masters in a table field do not support the Next menuitem */
		if ((mf->mode & MFMODE) != MF_MASTAB)
		{
			STcat(options, ERget(F_VQ0117_NextMast));
			STcat(options, ERget( (mf->mode & MF_NONEXT) 
				? F_VQ0120_Disabled : F_VQ011F_Enabled));
			nrows++;
		}

		/* now get the update frame items */
		if (type == MF_UPDATE)
		{
			/* get current locking behaviour */
			STprintf(buf, ";%s\n", get_lock_name(mf->mode));
			STcat(options, ERget(F_VQ0118_Concur));
			STcat(options, buf);
			nrows++;

			/* ref. integ. only if it's master/detail */
			if ( (mf->mode & MFMODE) == MF_MASDET)
			{
				MFTAB *tab = mf->tabs[IIVQptPrimaryTab(mf, 
					TAB_DETAIL)];

				STcat(options, ERget(F_VQ0119_Urule));
				STcat(options, ERget( 
				    (tab->flags & TAB_UPDNONE)
				    ? F_VQ0138_NoRule
				    :	(tab->flags & TAB_UPDRULE)
					? F_VQ011E_Restrict 
					: F_VQ011D_Cascade));
				STcat(options, ERget(F_VQ011A_Drule));
				STcat(options, ERget( 
				    (tab->flags & TAB_DELNONE)
				    ? F_VQ0138_NoRule
				    :   (tab->flags & TAB_DELRULE)
					? F_VQ011E_Restrict 
					: F_VQ011D_Cascade));
				nrows += 2;
			}
		}

		/* when the handler vq_FB2 returns true.. that means
		   that we are done so we break this loop */
		if (IIFDlpeListPickEnd(prmpt, options, nrows, -1, -1, prmpt,
			ERx("vqfblist.hlp"), vq_FB2, (PTR)mf))
		{
			break;
		}
	}
	return (_retval);
}


/*{
** Name:	vq_FB2	- frame behavior list pick handler function 
**
** Description:
**	Frame behavior list pick handler function.
**
**
** Inputs:
**      PTR dat;        - really points to the metaframe
**      i4  choice;     - the choice from the user 
**      bool *resume;   - ptr to listpick resume flag
**
** Outputs:
**	Returns:
**
**	Exceptions:
**
** Side Effects:
**
** History:
**	10/12/89  (tom) - created
**	5-nov-1992 (blaise)
**		Changed the interface to "locks held" frame behaviour to 
**		support optimistic locking.
*/
static i4
vq_FB2(dat, choice, resume)
PTR dat;
i4  choice;
bool *resume;
{
	METAFRAME *mf = (METAFRAME*)dat;

        *resume = FALSE;
	
		/* MF_MASTAB screws up the otherwise 
		   regular ordering of the frame behavior */
	if (choice >= 1 && (mf->mode & MFMODE) == MF_MASTAB)
	{
		choice++;
	}

	switch(choice)
	{
	case 0:

		vqMFmode(mf, MF_NOQUAL, 
			S_VQ0011_QualProc_prmpt,
			S_VQ0012_QualProc_0, 
			S_VQ0013_QualProc_1,
			F_VQ0116_QualProc,
			ERx("vqqualpr.hlp"));
		break;

	case 1:
		vqMFmode(mf, MF_NONEXT, 
			S_VQ0014_NextMast_prmpt,
			S_VQ0015_NextMast_0, 
			S_VQ0016_NextMast_1,
			F_VQ0117_NextMast,
			ERx("vqnxtmas.hlp"));
		break;

	case 2:
		handle_locking(mf);
		break;

	case 3:
		vq_Tabflags(mf, TAB_UPDRULE, TAB_UPDNONE,
			S_VQ001A_Urule_prmpt,
			S_VQ001B_Urule_0, 
			S_VQ001C_Urule_1,
			S_VQ00D5_Urule_None,
			F_VQ0119_Urule,
			ERx("vqupdrul.hlp"));
		break;

	case 4:
		vq_Tabflags(mf, TAB_DELRULE, TAB_DELNONE,
			S_VQ001D_Drule_prmpt,
			S_VQ001E_Drule_0, 
			S_VQ001F_Drule_1,
			S_VQ00D6_Drule_None,
			F_VQ011A_Drule,
			ERx("vqdelrul.hlp"));
		break;

	}

	return (choice < 0);
}


/*{
** Name:	vqMFmode	- Set/Unset a particular flag bit
**
** Description:
**	This function builds and runs a listpick to allow the 
**	user to change a bit in the metafrm structure.
**
** Inputs:
**	METAFRAME *mf;	- metaframe we are dealing with
**	i4	bit;	- bit to set/unset
**	ER_MSGID prmpt;	- prompt string for list pick
**	ER_MSGID msg0;	- selection for a 0 bit
**	ER_MSGID msg1;	- selection for a 1 bit
**	ER_MSGID title;	- help title
**	char *hfile;	- help file 
**
** Outputs:
**	Returns:
**
**	Exceptions:
**
** Side Effects:
**
** History:
**	10/12/89  (tom) - created
*/

static VOID 
vqMFmode(mf, bit, prmpt, msg0, msg1, title, hfile)
METAFRAME *mf;
i4	bit;
ER_MSGID prmpt;
ER_MSGID msg0;
ER_MSGID msg1;
ER_MSGID title;
char *hfile;
{
	char options[200];
	char pbuf[500];

	STcopy(ERget(prmpt), pbuf); /* copy slow message */

	/* we always put out the current selection as the first item
	   so it will be highlighted initially */
	if (mf->mode & bit)
	{
		STcopy(ERget(msg1), options);
		STcat(options, ERget(msg0));
	}
	else
	{
		STcopy(ERget(msg0), options);
		STcat(options, ERget(msg1));
	}

	/* if the user selects the first option (as opposed to the
	   zero'th option).. then we know they have changed it */
	if (IIFDlpListPick(pbuf, options, 2, -1, -1, ERget(title),
		hfile, (i4(*)())NULL, (char*)NULL) == 1)
	{
		mf->mode ^= bit;
		_retval = MFST_DOGEN;
	}
}


/*{
** Name:	vq_Tabflags	- Set/Unset a particular flag bit
**
** Description:
**	This function runs a display loop which prompts for 
**	the query processing behavior.
**
** Inputs:
**	METAFRAME *mf;	- metaframe we are dealing with
**	i4	bit;	- bit to set/unset
**	i4	nonebit; - bit to say no rule
**	ER_MSGID prmpt;	- prompt string for list pick
**	ER_MSGID msg0;	- selection for a 0 bit
**	ER_MSGID msg1;	- selection for a 1 bit
**	ER_MSGID msgn;	- selection for no rule
**	ER_MSGID title;	- help title
**	char *hfile;	- help file 
**
** Outputs:
**	Returns:
**
**	Exceptions:
**
** Side Effects:
**
** History:
**	10/12/89  (tom) - created
**	08/29/90  (tom) - changed to handle tri-state logic
*/

static VOID 
vq_Tabflags(mf, bit, nonebit, prmpt, msg0, msg1, msgn, title, hfile)
METAFRAME *mf;
i4	bit;
i4	nonebit;
ER_MSGID prmpt;
ER_MSGID msg0;
ER_MSGID msg1;
ER_MSGID msgn;
ER_MSGID title;
char *hfile;
{
	char options[200];
	char pbuf[500];
	i4	noneset;
	MFTAB *tab = mf->tabs[IIVQptPrimaryTab(mf, TAB_DETAIL)];

	STcopy(ERget(prmpt), pbuf); /* copy slow message */

	noneset = FALSE;

	/* we always put out the current selection as the first item
	   so it will be highlighted initially */
	if (tab->flags & nonebit)
	{
		noneset = TRUE;
		STcopy(ERget(msgn), options);
		STcat(options, ERget(msg0));
		STcat(options, ERget(msg1));
	}
	else if (tab->flags & bit)
	{
		STcopy(ERget(msg1), options);
		STcat(options, ERget(msg0));
		STcat(options, ERget(msgn));
	}
	else
	{
		STcopy(ERget(msg0), options);
		STcat(options, ERget(msg1));
		STcat(options, ERget(msgn));
	}

	/* if the user selects the first or second option (as opposed to the
	   zero'th option).. then we know they have changed it */
	switch (IIFDlpListPick(pbuf, options, 3, -1, -1, ERget(title),
		hfile, (i4(*)())NULL, (char*)NULL))
	{
	case 1:
		if (noneset == TRUE)
		{
			tab->flags &= ~nonebit;
			tab->flags &= ~bit;
		}
		else
		{
			tab->flags ^= bit;
		}
		_retval = MFST_DOGEN;

		break;

	case 2:
		if (noneset == TRUE)
		{
			tab->flags &= ~nonebit;
			tab->flags |= bit;
		}
		else
		{
			tab->flags |= nonebit;
			tab->flags &= ~bit;   /* when none is set, we
						also make sure that cascade 
						is active */
		}
		_retval = MFST_DOGEN;

		break;
	}
}

/*{
** Name:	handle_locking: handle "locks held" frame behaviour
**
** Description:
**	Handle "locks held on displayed data" frame behaviour. There are
**	three settings: none, dbms and optimistic. For optimistic locking,
**	the user must enter at least one column name to be used as a
**	sequence value, username or date/time stamp for optimistic locking.	
**
** Inputs:
**	mf	- the metaframe
**
** Outputs:
**	Returns:
**
**	Exceptions:
**
** Side Effects:
**
** History:
**	5-nov-92 (blaise)
**		Created.
**	26-apr-93 (blaise)
**		Reset current locking behaviour, so that the table field
**		changes each time the behaviour is changed to or from 
**		optimistic, even when the changes aren't saved. (bug #51496)
**	19-jul-93 (blaise)
**		Set new_mask to its correct value in the FE_OK activation
**		block. (bug #53336)
**	17-feb-94 (blaise)
**		Make sure the columns get saved properly in the case where the
**		master (or detail) table previously had >0 optimistic locking
**		columns but now has 0: this can happen with a master-detail
**		frame. (bug #59944)
**	25-jan-95 (forky01)
**		When user selects OK on "Locks held on displayed data" and
**		lock type is not "optimistic", then clear locking columns
**		from metaframe, so they don't linger around hidden from
**		user.  Changing type back to optimistic after behavior
**		was saved with (OK), should show a clean table of locking
**		columns with no entries. Fixes bug #60373.
*/
static VOID
handle_locking(mf)
METAFRAME	*mf;
##{
##	char	master_cols[3][FE_MAXNAME+1];
##	char	detail_cols[3][FE_MAXNAME+1];
##	char	old_locks[FE_MAXNAME + 1];	/* current frame behaviour */
##	char	new_locks[FE_MAXNAME + 1];	/* new frame behaviour */
	char	options[100];
	char	buf[64];
	MFTAB	*master;
	MFTAB	*detail;
	i4	i;
	i4	old_mask;
	i4	new_mask = -1;
##	i4	lock_change = 0;
	bool	detail_exists = FALSE;	/* does frame have a detail table? */
##	i2	master_null;
##	i2	detail_null;

	/* initialize master_cols and detail_cols */
	for (i = 0; i < 3; i++)
	{
		master_cols[i][0] = EOS;
		detail_cols[i][0] = EOS;
	}

	/* Find the master and detail tables */
	for (i = 0; i < mf->numtabs && mf->tabs[i]->usage != TAB_LOOKUP; i++)
	{
		if (mf->tabs[i]->tabsect == 0)
		{
			master = mf->tabs[i];
		}
		else if (mf->tabs[i]->tabsect == TAB_DETAIL)
		{
			detail = mf->tabs[i];
			detail_exists = TRUE;
		}
	}

	get_locking_cols (master, master_cols);
	if (detail_exists)
	{
		get_locking_cols (detail, detail_cols);
	}

	/* Get current locking behaviour */
	old_mask = mf->mode;
	STcopy(get_lock_name(mf->mode), old_locks);
	CVlower(old_locks);

	IIARiaForm(locks_form);
##	inittable locks_form locks_tblfld update
##	display locks_form
##	initialize(_locktype = old_locks)
##     	{
		if (!(old_mask & MF_OPTIM))
		{
			/*
			** not optimistic locking - make tablefield display
			** only and fill with "N/A"
			*/
##			set_frs field locks_form (mode(locks_tblfld) = read)
			if (detail_exists)
			{
				for (i = 0; i < 3; i++)
				{
##					loadtable locks_form locks_tblfld (
##					master_col = ERget(F_VQ010D_n_a),
##					detail_col = ERget(F_VQ010D_n_a)
##					)
				}
			}
			else
			{
##				set_frs column locks_form locks_tblfld (
##					invisible(detail_col) = 1
##				)
				for (i = 0; i < 3; i++)
				{
##					loadtable locks_form locks_tblfld (
##					master_col = ERget(F_VQ010D_n_a)
##					)
				}
			}
##			resume;
		}
		/* else - optimistic locking */
		if (detail_exists)
		{
			for (i = 0; i < 3; i++)
			{
				master_null = (master_cols[i] == NULL ||
					master_cols[i][0] == EOS ? -1 : 0);
				detail_null = (detail_cols[i] == NULL ||
					detail_cols[i][0] == EOS ? -1 : 0);
##				loadtable locks_form locks_tblfld (
##					master_col = master_cols[i]:master_null,
##					detail_col = detail_cols[i]:detail_null
##				)
			}
		}
		else
		{
##			set_frs column locks_form locks_tblfld (
##				invisible(detail_col) = 1
##			)
			for (i = 0; i < 3; i++)
			{
				master_null = (master_cols[i] == NULL ||
					master_cols[i][0] == EOS ? -1 : 0);
##				loadtable locks_form locks_tblfld (
##					master_col = master_cols[i]:master_null
##				)
			}
		}
##	}
##	activate field _locktype
##	{
##		i4	changed;

##		inquire_frs field locks_form (changed = change(_locktype))
		if (changed == 0)
		{
			new_mask = old_mask;
			STcopy(old_locks, new_locks);
##			resume next;
		}
		lock_change = changed;

##		set_frs field locks_form (change(_locktype) = 0)
##		getform locks_form (new_locks = _locktype);

		/*
		** if we haven't already got the new bit mask via a listchoices
		** selection, check a valid frame behaviour has been entered
		** and get the bit mask of the new behaviour.
		*/
		if (new_mask < 0 && (new_mask = get_lock_mask(new_locks)) < 0)
		{
##			resume;		/* error */
		}

		/*
		** Did the user really change the locktype field, or just
		** retype the same field?
		*/
		if (STbcompare(new_locks, 0, old_locks, 0, TRUE) == 0)
		{
			/* they didn't really change it */
			lock_change = 0;
		}
		else if (new_mask & MF_OPTIM)
		{
			/*
			** locking type has been changed to optimistic - make
			** the table field read/write and fill in any existing
			** optimistic locking columns
			*/
##			clear field locks_tblfld
##			inittable locks_form locks_tblfld update
			if (detail_exists)
			{
				for (i = 0; i < 3; i++)
				{
					master_null = (master_cols[i] == NULL ||
						master_cols[i][0] ==
						EOS ? -1 : 0);
					detail_null = (detail_cols[i] == NULL ||
						detail_cols[i][0] ==
						EOS ? -1 : 0);
##					loadtable locks_form locks_tblfld (
##					master_col = master_cols[i]:master_null,
##					detail_col = detail_cols[i]:detail_null
##					)
				}
			}
			else
			{
				for (i = 0; i < 3; i++)
				{
					master_null = (master_cols[i] == NULL ||
						master_cols[i][0] ==
						EOS ? -1 : 0);
##					loadtable locks_form locks_tblfld (
##					master_col = master_cols[i]:master_null
##					)
				}
			}
		}
		else if (old_mask & MF_OPTIM)
		{
			/*
			** locking type has been changed from optimistic to
			** something else - make the table field display only
			** and fill it with "N/A"
			*/
##			clear field locks_tblfld
##			inittable locks_form locks_tblfld read
			if (detail_exists)
			{
				for (i = 0; i < 3; i++)
				{
##					loadtable locks_form locks_tblfld (
##					master_col = ERget(F_VQ010D_n_a),
##					detail_col = ERget(F_VQ010D_n_a)
##					)
				}
			}
			else
			{
				for (i = 0; i < 3; i++)
				{
##					loadtable locks_form locks_tblfld (
##					master_col = ERget(F_VQ010D_n_a)
##					)
				}
			}
		}
		STcopy(new_locks, old_locks);
		old_mask = new_mask;
		/*
		** reset new_mask to -1 to indicate that new_mask hasn't been
		** set during the current activation
		*/
		new_mask = -1;
##		resume next;

##	}
##	activate menuitem ERget(FE_OK), FRSkey4
##	{
##		i4	state;
##		i4	row = 0;
		i4	m = 0;
		i4	d = 0;
		char	*mcols[3];
		char	*dcols[3];
		bool	col_change = FALSE;

		i = 0;

##		validate field _locktype;

		/*
		** We set new_mask to -1 in the field validation, but we need
		** to use it now, so reset it to what it was. We'll set it
		** back to -1 again before we do breakdisplay.
		*/
		new_mask = old_mask;

		if (new_mask & MF_OPTIM)
		{
			bool	empty_tf = TRUE; /* true if no entries in tf */

			/*
			** Optimistic locking - validate column names entered
			** by the user
			*/
##			unloadtable locks_form locks_tblfld (
##				master_cols[i]:master_null =  _master_col,
##				detail_cols[i]:detail_null = _detail_col,
##				state = _STATE,
##				row = _RECORD
##			)
##			{
				if (empty_tf && (master_null != -1 ||
					(detail_exists && detail_null != -1)))
				{
					empty_tf = FALSE;
				}
				if (state != stUNCHANGED && col_change == FALSE)
				{
					/*
					** The table field has been changed, so
					** we'll have to update the metaframe
					*/
					col_change = TRUE;
				}
				if (state == stNEW || state == stCHANGE)
				{
					/*
					** Check valid col names have been
					** entered
					*/
					if (master_null != -1 &&
						check_lockcol(master,
						master_cols[i], i) != OK)
					{
##						scroll locks_form locks_tblfld
##							to row
##						resume column locks_tblfld
##							_master_col
					}
					if (detail_exists && detail_null != -1
						&& check_lockcol(detail,
						detail_cols[i], i) != OK)
					{
##						scroll locks_form locks_tblfld
##							to row
##						resume column locks_tblfld
##							_detail_col
					}
				}
				if (master_null == -1)
					master_cols[i][0] = EOS;
				else
					mcols[m++] = master_cols[i];
				if (detail_exists)
				{
					if (detail_null == -1)
						detail_cols[i][0] = EOS;
					else
						dcols[d++] = detail_cols[i];
				}
				i++;
##			}

			/*
			** If there aren't any column names in the table field,
			** it's an error.
			*/
			if (empty_tf == TRUE)
			{
				IIUGerr(E_VQ00E8_No_Locking_Cols,
					UG_ERR_ERROR, 0);
##				resume
			}

			/* 
			** If the locking columns have changed, change the
			** column flags in the metaframe
			*/
			if (col_change)
			{
				write_lockcols(master, mcols, m);
				if (detail_exists)
					write_lockcols(detail, dcols, d);
				_retval = MFST_DOGEN;
			}
		}

		/*
		** If the lock type has changed, change the lock type in the
		** metaframe
		*/
		if (lock_change)
		{
			/* unset lock bits */
			mf->mode &= MF_UNSET_LOCKS;
			/* set the bits for the new behaviour */
			mf->mode |= new_mask;

			/*
			** If optimistic locking not chosen, then we should
			** clear out the locking columns from being used.
			** Bug #60373
			*/
			if (!(new_mask & MF_OPTIM))
			{
				clear_lockcols(master);
				if (detail_exists)
					clear_lockcols(detail);
			}
			_retval = MFST_DOGEN;
		}
		new_mask = -1;
##		breakdisplay
##	}

##	activate menuitem ERget(FE_Cancel)
##		(expl = ERget(F_FE0109_ExplForget), validate = 0, activate = 0),
##		FRSkey9 (validate = 0, activate = 0)
##      {
##		breakdisplay
##	}

##	activate menuitem ERget(FE_Lookup)
##		(expl = ERget(FE_LookupExpl), validate = 0, activate = 0),
##		frskey10 (validate = 0, activate = 0)
##	{
##		char	fdname[FE_MAXNAME + 1];
##		char	colname[FE_MAXNAME + 1];
##		i4	rownum;

##		inquire_frs form (fdname = field(locks_form))
		
		/* ListChoices for "Locks held..." field */
		if (STequal(fdname, _locktype))
		{
			/* build a listpick of valid locking types */
			STprintf(options, "%s;%s\n", ERget(lock_types[0].type),
				ERget(lock_types[0].expl));
			for (i = 1; i < LOCK_TYPES; i++)
			{
				STprintf(buf, "%s;%s\n",
					ERget(lock_types[i].type),
					ERget(lock_types[i].expl));
				STcat(options, buf);
			}
			/*
			** get bit mask of new locking behaviour and transfer
			** the user's selection to the form
			*/
			if ((new_mask = IIFDlpListPick (
				ERget(F_VQ015C_Locks_Held), options, 0, -1, -1,
				ERget(F_VQ0118_Concur), ERx("vqlocklp.hlp"), 
				(i4(*)())NULL, (PTR)NULL)) >= 0)
			{
##				putform locks_form(_locktype =
##					ERget(lock_types[new_mask].type))
##				set_frs field locks_form (change(_locktype) = 1)
				new_mask <<= MF_LOCK_OFFSET;
			}
		}

		/* ListChoices for table field (locking columns) */
		else if (STequal(fdname, locks_tblfld))
		{
##			inquire_frs table locks_form (
##				rownum = rowno(locks_tblfld),
##				colname = column(locks_tblfld)
##			)
			list_cols(STequal(colname, _master_col) ?
				master : detail, rownum - 1);
		}
##	}

##	activate menuitem ERget(FE_Help)
##			(expl = ERget(F_FE0100_ExplFrameHelp),
##			validate = 0, activate = 0),
##		FRSkey1 (validate = 0, activate = 0)
##	{
		FEhelp(ERx("vqconcur.hlp"), ERget(F_VQ0118_Concur));
##	}
##}

/*
** Get locks held frame behaviour setting from mask
*/
static char *
get_lock_name(mask)
i4	mask;
{
	i4	bit;	/* mask with the locking bits isolated & shifted */
	ER_MSGID msgid;

	bit = (mask & MF_LOCKS_MASK) >> MF_LOCK_OFFSET;

	/* if we got a bad mask, default to 0 */
	if (bit >= LOCK_TYPES)
		bit = 0;

	return ERget(lock_types[bit].type);
}

/*
** Get locks held mask from the name of the frame behaviour setting
*/
static	i4
get_lock_mask(name)
char	*name;
{
	i4	i;

	/* check a valid frame behaviour has been entered */
	for (i = 0; i < LOCK_TYPES; i++)
	{
		if (STbcompare(ERget(lock_types[i].type), 0, name, 0, TRUE)
			== 0)
			return i << MF_LOCK_OFFSET;
	}

	/* else it's an error */
	IIUGerr(E_VQ00E7_Lock_Behaviour, UG_ERR_ERROR, 0);
	return(-1);
}

/*{
** Name:	get_locking_cols - get the names of optimistic locking columns
**
** Description:
**	Given a metaframe table, get the names of any columns in the 
**	metaframe which are being used for optimistic locking.
**
** Inputs:
**	tab		The metaframe table
**	colnames	Array to contain column names
**
** Outputs:
**	colnames	Array of names of optimistic locking columns
**
** History:
**	5-nov-92 (blaise)
**		Initial version
*/
static VOID
get_locking_cols(tab, colnames)
MFTAB	*tab;
char	colnames[][FE_MAXNAME+1];
{
	MFCOL	*col;
	i4	i;

	/* Get names of any existing columns being used for optimistic locking
	** from the metaframe
	*/
	for (i = 0; i < tab->numcols; i++)
	{
		col = tab->cols[i];
		if (col->flags & COL_OPTLOCK)
		{
			/*
			** This column is being used for optimistic locking.
			** Its type will tell us how it's being used.
			*/
			switch (abs(col->type.db_datatype))
			{
				case DB_INT_TYPE:
				/* update counter */
					STcopy (col->alias, colnames[SEQ_COL]);
					break;
				case DB_DTE_TYPE:
				/* date/time stamp */
					STcopy (col->alias, colnames[DATE_COL]);
					break;
				case DB_CHA_TYPE:
				case DB_VCH_TYPE:
				/* username */
					STcopy (col->alias, colnames[USER_COL]);
					break;
			}
		}
	}
}

/*{
** Name:	check_lockcol - check the validity of a column to be used
**			for optimistic locking
**
** Description:
**	Given the name of a column which has been entered by the user as a
**	master or detail table column to be used for optimistic locking,
**	check that (i)the column exists in the table; (ii)its type is
**	consistent with how the column is to be used (for example a sequence
**	counter must be an integer); (iii)it is not part of the key.
**
** Inputs:
**	tab	- the table
**	colname	- the column name
**	coltype	- how the user wants to use this column
**
** Outputs:
**	Returns:
**		OK if the column is valid
**
** History:
**	5-nov-92 (blaise)
**		Created.
**	26-apr-93 (blaise)
**		Corrected parameter passed to E_VQ00E9, so that the name of
**		the column which doesn't exist is printed. (bug #51496)
**	17-fe-94 (blaise)
**		Added an additional check: that the column is not part of
**		the key.
*/
static STATUS
check_lockcol(tab, colname, coltype)
MFTAB	*tab;
char	*colname;
i4	coltype;
{
	MFCOL	*col;
	i4	i;
	STATUS	status = FAIL;

	/* If column name is blank, return ok */
	if (colname == NULL || *colname == EOS)
		return OK;

	/* Firstly, does the column exist in the table? */
	for (i = 0; i < tab->numcols; i++)
	{
		col = tab->cols[i];
		if (STbcompare(colname, 0, col->name, 0, TRUE) == 0)
		{
			status = OK;
			break;
		}
	}
	if (status == FAIL)
	{
		IIUGerr(E_VQ00E9_Nonexist_Col, UG_ERR_ERROR, 2, colname,
			tab->name);
		return(status);
	}

	/* Is the column the right datatype? */
	switch (coltype)
	{
		case SEQ_COL:
			/* sequence value: must be an integer */
			if (abs(col->type.db_datatype) != DB_INT_TYPE)
			{
				IIUGerr(E_VQ00EA_Wrong_Type, UG_ERR_ERROR, 1,
					colname);
				IIUGerr(E_VQ00EB_Sequence_Col, UG_ERR_ERROR, 0);
				status = FAIL;
			}
			break;
		case DATE_COL:
			/* date/time stamp: must be a date column */
			if (abs(col->type.db_datatype) != DB_DTE_TYPE)
			{
				IIUGerr(E_VQ00EA_Wrong_Type, UG_ERR_ERROR, 1,
					colname);
				IIUGerr(E_VQ00EC_Date_Col, UG_ERR_ERROR, 0);
				status = FAIL;
			}
			break;
		case USER_COL:
			/* username: must be a char or varchar column */
			if (abs(col->type.db_datatype) != DB_CHA_TYPE &&
				abs(col->type.db_datatype) != DB_VCH_TYPE)
			{
				IIUGerr(E_VQ00EA_Wrong_Type, UG_ERR_ERROR, 1,
					colname);
				IIUGerr(E_VQ00ED_Username_Col, UG_ERR_ERROR, 0);
				status = FAIL;
			}
			break;
	}

	/* Column cannot be part of the key */
	if (col->flags & COL_UNIQKEY)
	{
		IIUGerr(E_VQ00FB_Unique_Key, UG_ERR_ERROR, 1, colname);
		status = FAIL;
	}

	return (status);
}

/*{
** Name: clear_lockcols - Clear out optimistic locking columns in the metaframe
**
** Description:
**	Update the column flags of each column in a metaframe table to show
**	that the column is no longer being used for optimistic locking, unset
**	the bit.
**
** Inputs:
**	tab	- the table to clear columns for
**
** Outputs:
**	
** History:
**	25-jan-95 (forky01)
**		Created for bug#60373.
*/
static VOID
clear_lockcols(tab)
MFTAB	*tab;
{
	i4	i;
	MFCOL	*col;

	for (i = 0; i < tab->numcols; i++)
	{
		col = tab->cols[i];
		col->flags &= ~COL_OPTLOCK;
	}
}

/*{
** Name: write_lockcols - Write new optimistic locking columns to the metaframe
**
** Description:
**	Update the column flags of each column in a metaframe table: if the
**	column is being used for optimistic locking, set the optimistic
**	locking bit; if the bit is set but the column is no longer being used
**	for optimistic locking, unset the bit.
**
** Inputs:
**	tab	- the table
**	lockcols - an array of char* containing the names of the columns to
**		be used for optimistic locking
**	num_lockcols - the number of rows in the array
**
** Outputs:
**	
** History:
**	13-nov-92 (blaise)
**		Created.
*/
static VOID
write_lockcols(tab, lockcols, num_lockcols)
MFTAB	*tab;
char	*lockcols[];
i4	num_lockcols;
{
	i4	i;
	i4	j;
	MFCOL	*col;

	for (i = 0; i < tab->numcols; i++)
	{
		col = tab->cols[i];
		col->flags &= ~COL_OPTLOCK;
		for (j = 0; j < num_lockcols; j++)
		{
			if (STbcompare(col->name, 0, lockcols[j], 0, TRUE) == 0)
			{
				/* set the optimistic locking flag */
				col->flags |= COL_OPTLOCK;
				break;
			}
		}
	}
}

/*{
** Name:	list_cols - produce a listpick of columns in a table
**
** Description:
**	Given an MFTAB structure and a type of column, display all columns in
**	the table with the appropriate datatype for column type. The column
**	types are:
**		SEQ_COL		integer datatype
**		DATE_COL	date datatype
**		USER_COL	char or varchar datatype
**
** Inputs:
**	tab	- the table
**	coltype	- the column type
**
** Outputs:
**	Returns:
**		The numeric choice from the list
**
** History:
**	13-nov-92 (blaise)
**		Created.
**	22-apr-93 (blaise)
**		Added a missing "abs", so that we look for nullable and
**		non-nullable columns of the appropriate type (bug #51496)
**	05-oct-2006 (gupsh01)
**		Change "date" to "ingresdate".
*/
static i4
list_cols(tab, coltype)
MFTAB	*tab;
i4	coltype;
{
	MFCOL	*col;
	char	options[200];
	char	pbuf[64];
##	char	*colarray[DB_GW2_MAX_COLS];
	char	typestring[24];
	i4	datatype;
	i4	datatype2;
##	i4	choice;
	i4	i;
	i4	j = 0;
	bool	first = TRUE;
##	char	colname[FE_MAXNAME + 1];

	/* Find out the right datatype for the column type */
	switch(coltype)
	{
		case SEQ_COL:
			STcopy(ERget(F_VQ0160_Integer_Cols), pbuf);
			datatype = datatype2 = DB_INT_TYPE;
			STcopy(ERx("integer"), typestring);
			break;
		case DATE_COL:
			STcopy(ERget(F_VQ0161_Date_Cols), pbuf);
			datatype = datatype2 = DB_DTE_TYPE;
			STcopy(ERx("ingresdate"), typestring);
			break;
		case USER_COL:
			STcopy(ERget(F_VQ0162_Char_Cols), pbuf);
			datatype = DB_CHA_TYPE;
			datatype2 = DB_VCH_TYPE;
			STcopy(ERx("char or varchar"), typestring);
			break;
	}

	/* build a list of columns of the right type */
	for (i = 0; i < tab->numcols; i++)
	{
		col = tab->cols[i];
		if (abs(col->type.db_datatype) == datatype ||
			abs(col->type.db_datatype) == datatype2)
		{
			if (first)
			{
				STcopy(col->name, options);
				first = FALSE;
			}
			else
			{
				STcat(options, col->name);
			}
			STcat(options, ERx("\n"));
			colarray[j++] = col->name;
		}
	}

	/* error if there are no columns of the right datatype */
	if (j == 0)
	{
		IIUGerr(E_VQ00EE_No_Cols, UG_ERR_ERROR, 2, typestring,
			tab->name);
		return(-1);
	}

	/*
	** display the listchoices popup and transfer the user's selection to
	** the form
	*/
	choice = IIFDlpListPick (pbuf, options, 0, -1, -1,
		ERget(F_VQ0118_Concur), ERx("vqlpcols.hlp"), (i4 (*)())NULL,
		(PTR) NULL);
	if (choice >=0)
	{
##		inquire_frs table locks_form (colname = column(locks_tblfld))
##		putrow locks_form locks_tblfld(colname = colarray[choice])
	}
}
