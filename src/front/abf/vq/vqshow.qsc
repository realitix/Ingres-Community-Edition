/* 
**	Copyright (c) 2004 Actian Corporation  
**
**	History:
**	   31-aug-93 (kchin)
**		Changed type of nat_frame_ptr to PTR in IIVQvqsVqShow(),
**		since it holds pointer.  Also changed the cast of 
**		vq to PTR when assigns it to nat_frame_ptr.  Cast to i4  
**		will result in truncation of 64-bit address.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
*/
#include	<compat.h> 
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
#include	<fe.h> 
#include 	<er.h>
#include 	<st.h>
#include 	<adf.h>
#include 	<ft.h>
#include 	<fmt.h>
#include 	<frame.h>
#include 	<uf.h>
#include 	<ug.h>
#include 	<cm.h>
#include 	<ooclass.h>
#include 	<abclass.h>
##include	<metafrm.qsh>
/*
#include	<metafrm.h>
  ..so ming knows about the dependancy 
*/

#include	"tabinfo.h"
#include	"ervq.h"
#include	"vqloc.h"

/**
** Name:	vqshow -	visual query display loop
**
** Description:
**	Process the display loop for simple viewing of the visual query.
**
**	This file defines:
**		IIVQvqsVqShow - run the vq display loop
**
** History:
**	12/27/89  (tom) - created
**	24-Aug-2009 (kschendel) 121804
**	    Update some of the function declarations to fix gcc 4.3 problems.
**/

/* # define's */


/* GLOBALDEF's */

/* extern's */
## GLOBALREF char *IIVQform; /* name of the visual query form */
GLOBALREF char *IIVQtfname_fmt; /* STprintf string to format name */
GLOBALREF char IIVQinc_col[4];
GLOBALREF char *IIabExename;

FUNC_EXTERN FRAME *IIVQvmfVqMakeFrame(); /* vq dynamic frame creation */
FUNC_EXTERN VOID IIdelfrm();
FUNC_EXTERN i4  IIVQcfCurFld();
FUNC_EXTERN i4  IIVQdcvDisplayCompView();
FUNC_EXTERN VOID IIVQfmFormMode();
FUNC_EXTERN bool IIVQvlfVqLoadFrame(METAFRAME *);

/* static's */




/*{
** Name:	IIVQvqsVqShow	- show Vq
**
** Description:
**	This display loop allows the user to see the visual query
**	No editing, and only limited operations are allowed.
**
** Inputs:
**	METAFRAME *mf;	- metaframe to be edited
**
** Outputs:
**	Returns:

**	Exceptions:
**
** Side Effects:
**
** History:
**	12/27/89  (tom) - created
*/

VOID
IIVQvqsVqShow(mf)
METAFRAME *mf;
##{
	FRAME *vq;
##	PTR nat_frame_ptr;
	register i4  i;
##	char fname[20]; 

	/* dynamically create the vq frame */
	vq = IIVQvmfVqMakeFrame(mf, FALSE, 0);

	/* add the form which was created */
	nat_frame_ptr = (PTR) vq;
##	addform nat_frame_ptr

##	display IIVQform update
##	
##	/*********************************************/
##	/************ initialize *********************/
##	/*********************************************/
##	initialize ()
##	{
		/* load the current column and field values to the form */
		IIVQvlfVqLoadFrame(mf);

		/* put form into simple, readonly mode */
		IIVQfmFormMode(mf, TRUE);
##	}
##	/*********************************************/
##	/********** menuitem activations *************/
##	/*********************************************/
##
##	activate menuitem ERget(F_VQ002D_NextTable)
##		(expl = ERget(F_VQ0061_NextTableExpl))
##	{
		i = IIVQcfCurFld() + 1;
		if (i >= mf->numtabs)
		{
			i = 0;
		}
		STprintf(fname, IIVQtfname_fmt, i);
##		resume field fname
##	}
##	activate menuitem ERget(F_VQ002C_TableDef)
##		(expl = ERget(F_VQ0062_TableDefExpl))
##	{
		MFCOL *col;
		i4 tabidx;
##		i4 colidx;
##		i4 tbl;
		char  table_name[FE_MAXTABNAME+1];

		/* get table and column indices of user's current position */
		tabidx = IIVQcfCurFld();

##		inquire_frs field IIVQform (tbl = table)
		if (tbl == 1)	/* cursor in table field */
		{
			/* set which column name to scroll to 
			   in Examine-a-Table */
##			inquire_frs table IIVQform (colidx = rowno)
			colidx--;       /* zero based */

			col = mf->tabs[tabidx]->cols[colidx];
		}
		else
		{
			col = NULL;
		}

		/* Can't pass METAFRAME version of table name to Tables/Examine
		** cause Tables writes to it if user selects NewTable.
		*/
		STcopy (mf->tabs[tabidx]->name, table_name);

		/* call Tables Utility Examine-a-Table */
		IITUtbiTableinfo(table_name,
				NULL,		/* should be table owner */
				IIabExename,
				((col == NULL) ? (char *)NULL : col->name));
##	}
##	activate menuitem ERget(F_VQ0027_Compress) 
##		(expl = ERget(F_VQ0064_CompressExpl))
##	{
		/* give user the compressed view of the tables */
		/* form field name to resume to */
		STprintf(fname, IIVQtfname_fmt, 
			IIVQdcvDisplayCompView(mf, IIVQcfCurFld()));

		/* resume to the field that the user was last on in
		   the compressed view. */
##		resume field fname
##	}
##	activate menuitem ERget(FE_Help), FRSkey1
##		(expl = ERget(F_VQ0065_HelpExpl))
##	{
		FEhelp(ERx("vqshow.hlp"), ERget(F_VQ00BC_vq_prmpt));
##	}
##	activate menuitem ERget(FE_End), FRSkey3
##		(expl = ERget(F_VQ0087_EndExpl))
##	{
##		breakdisplay
##	}
##	finalize

	IIdelfrm(IIVQform);
##}



/*{
** Name:	IIVQfmFormMode	- set form mode
**
** Description:
**	Set the mode of the visual query form to readonly or 
**	read/write before.. or after join insertion.
**
** Inputs:
**	METAFRAME *mf;	- pointer to the metaframe structure
**	bool ro;	- flag:
**				TRUE - set form to read only
**				FALSE - set form to read/write 
**
** Outputs:
**	Returns:
**		VOID
**
**	Exceptions:
**
** Side Effects:
**
** History:
**	05/10/89	- tom created
*/
VOID
IIVQfmFormMode(mf, ro)
register METAFRAME *mf;
## bool ro;
##{
	register i4  i;
	register i4  j;
	register TABINFO *ti;
	register TCINFO *tc;
	register MFTAB *tab;
##	char *fr_mode;
##	char fname[6];
##	char *name;

	if (ro)
		fr_mode = ERx("read");
	else
		fr_mode = ERx("update");

##	set_frs form (mode(IIVQform) = fr_mode)

	for (i = 0; i < mf->numtabs; i++)
	{
		tab = mf->tabs[i];
		ti = &tab_info[tab->usage];

		/* form the base name of the table's field */
		STprintf(fname, IIVQtfname_fmt, i);
		fname[5] = EOS;

		/* loop on the formatting information and set 
		   the displayonly attribute of all but
		   the form inclusion field */
		for (j = 0; j < ti->numcols; j++)
		{
			tc = &ti->cols[j];
			if (	(tc->flags & fdtfCOLREAD) == 0
			   &&	STcompare(tc->name, IIVQinc_col) != 0
			   )
			{
				name = tc->name;
##				set_frs column IIVQform fname
##					(displayonly(name) = ro)
			}
		}

		/* now handle the exception fields associated with the 
		   table type. */
		switch (tab->usage)
		{
		case TAB_UPDATE:
			fname[4] = 'i';
##			set_frs field IIVQform 
##				(displayonly(fname) = ro)
			fname[4] = 'd';
##			set_frs field IIVQform 
##				(displayonly(fname) = ro)
			break;

		case TAB_LOOKUP:
			fname[4] = 'q';
##			set_frs field IIVQform 
##				(displayonly(fname) = ro)
		}
	}
##}


