/*
** Copyright (c) 1990, 2008 Actian Corporation
**	All rights reserved.
*/

# include	<compat.h>
# include	<er.h>
# include	<ex.h>
# include	<lo.h>
# include	<si.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
# include	<fe.h>
# include	<ug.h>
#include	<fdesc.h>
# include       <abfrts.h>
##include       <abclass.qsh>
#include	<abfcompl.h>
#include	"abfgolnk.h"
# include	"ablink.h"
# include	"erab.h"


/**
** Name:	abapplnk.qc -	Link an application.
**
** Description:
**	This file defines:
**
**	IIABlkaLinKApplication - Perform and display an application link
** 	IIABdcmDispCompMsg - 	Display a compilation message
** 	IIABdcfDispCompFile - 	Display a file during compilation
** 	IIABrsRestoreScreen - 	Restore the screen
**
** History:
**	3/30/90 (Mike S) Initial Version
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      17-dec-2008 (joea)
**          Replace READONLY/WSCREADONLY by const.
**	26-Aug-2009 (kschendel) 121804
**	    Need ug.h to satisfy gcc 4.3.
**/

GLOBALDEF bool	IIabfmFormsMode;	/* Is the forms system active */

static const
##	char 	_form[] = 	ERx("ablnkdsp"),
##		_tf[] = 	ERx("ablnkdsp"),
##		_tfcol[] = 	ERx("ablnkdsp"),
##		_title[] = 	ERx("title"),
##		_prompt[] = 	ERx("prompt"),
##		_blank[] = 	ERx("");

static i4   	in_link = FALSE;
static bool	first_time = TRUE;

static STATUS do_link();
static STATUS postlink();

/*{
** Name:	IIABlkaLinKApplication - Perform and display an application link
**
** Description:
**	This routine performs all application linking, both for testing and
**	image-building.  IIABtestLink or iiabImgLink, respectively,  is called 
**	to do the link.
**	The value of IIabfmFormsMode determines whether to display output in a 
**	tablefield, or just let it go to stdout.
**
** Inputs:
**	link_args	ABLNKARGS *	link arguments
**
** Returns:
**	{STATUS}		Link status
**
** History:
**	3/30/90 (Mike S)	Initial version
*/
STATUS
IIABlkaLinKApplication(link_args)
ABLNKARGS *link_args;
{
	STATUS	status;		/* link status */

	/* Initialize the display form */
	if (first_time && IIabfmFormsMode)
	{
		first_time = FALSE;
		IIARiaForm(_form);
##		inittable _form _tf READ;
	}

	/* If we're not in forms mode, call the link routines directly */
	if (!IIabfmFormsMode)
	{
		return do_link(link_args);
	}

	/* 
	** We are in forms mode.  We have to bring up the compilation
	** display form and then call the link routines.  They will
	** output into the tablefield, through the wonders of the forms
	** system versions of the callback routines.
	*/
##	display	_form READ
##	initialize
##	{
##		char title[80];

		/* Preload tablefield with a blank line */
##		loadtable _form _tf (_tfcol = _blank)

		IIUGfmt(title, sizeof(title), ERget(F_AB0100_BuildAppl), 1,
			link_args->app->name);
##		putform _form ( _title = title, _prompt = _blank );
##		message _blank
##		redisplay;

		status = do_link(link_args);
		if (EXDECLARE == status)
		{
			/* We were interrupted -- let's get out */
##			breakdisplay
		}

		/* 
		** What the user can do know depends on the circumstances,
		** so we use a submenu for flexibilty.
		*/
		status = postlink(link_args, status);
##		clear field _tf;
##		breakdisplay
##	}

##	activate menuitem ERget(FE_End), frskey3
##	{
		/* A dummy activation; we never get here */
##		breakdisplay
##	}

	return (status);
}

/*
**	After the link, allow the user to do whatever makes sense:
**	1.	If it was a test build, and everything worked, we run the 
**		interpreter.
**	2.	If there were compilation errors, allow their display.
**	3.	If the interpreter is runnable after compilation errors,
**		allow that.
*/
static STATUS
postlink(link_args, status)
ABLNKARGS *link_args;
STATUS	status;		/* Status from do_link */
{
##	char *erredit = _blank;
##	char *go = _blank;
##	char prompt_str[80];

	/* Format default prompt string */
	IIUGfmt(prompt_str, sizeof(prompt_str), 
		ERget(S_AB001C_EndtoExit), 1, ERget(FE_End));

	/* Determine which menuitems are appropriate */
	if (ABLNK_TEST == link_args->link_type)
	{
		/* A test build */
		if (OK == status)
		{
			if (!link_args->tstimg->failed_comps)
			{
				/* No failure of any kind. Run interpreter */
				return OK;
			}
			else
			{
				go = ERget(FE_Go);
				erredit = ERget(F_AB02FB_Errors);
				
				/* Tell user he might be able to proceeed */
				IIUGerr(S_AB0278_Failed, 0, 0);

				/* Override default prompt string */
				IIUGfmt(prompt_str, sizeof(prompt_str), 
					ERget(S_AB0030_GoToTest), 1, 
					ERget(FE_Go));

			}
		}
		else
		{
			/* Unrecoverable compilation errors */
			erredit = ERget(F_AB02FB_Errors);
				
			/* Tell user he can't proceeed */
			IIUGerr(S_AB0021_SevereFailed, 0, 0);
		}
	}
	else
	{ /* An image build */
		if (status != OK)
			erredit = ERget(F_AB02FB_Errors);
	}

	/* Put up prompt string */
##	putform _form (_prompt = prompt_str)
##	redisplay

##	display submenu
 
##      activate menuitem go (expl = ERget(F_AB000B_Go_expl)), FRSkey4
##      {
		/* Test the application, by returning a status of OK */
		status = OK;
##		breakdisplay
##	}

##	activate menuitem erredit (expl = ERget(F_AB02FC_ErrorsExpl))
##	{
		/* Edit the current errors */
		_VOID_ IIVQdceDisplayCompErrs(link_args->app, (OO_OBJECT *)NULL,
					      FALSE);
		status = FAIL;
##		breakdisplay
##	}

##      activate menuitem ERget(FE_WriteFile) (expl = ERget(F_FE010E_WriteExpl))
##      {
##          char *msg;
            bool dummy;
 
                if (IIUFtfuTblFldUnload(_form, _tf, _tfcol, &msg, &dummy) != OK)                {
##                      message msg
##                      sleep 2
                }
##      }
 
##      activate menuitem ERget(FE_Help)
##              (expl = ERget(F_FE0100_ExplFrameHelp)), frskey1
##      {
                FEhelp(ERx("ablnkapp.hlp"), ERget(S_AB0011_Link_Banner));
##      }
 
##      activate menuitem ERget(FE_End) 
##		(expl = ERget(F_FE0102_ExplEnd)), FRSkey3
##      {
		status = FAIL;		/* Don't run the interpreter */
##		breakdisplay;
##	}

##      /* Top of tablefield */
##      activate FRSkey5 (expl = ERget(F_FE0105_ExplTop))
##      {
##              scroll _form _tf to 1
##      }
 
##      /* Bottom of tablefield */
##      activate FRSkey6 (expl = ERget(F_FE0106_ExplBottom))
##      {
##              scroll _form _tf to end
##      }
 
##      /* Find a matching pattern */
##      activate FRSkey7 (expl = ERget(F_FE0104_ExplFind))
##      {
                FEtabfnd(_form, _tf);
##      }
 
	return(status);
}

/*{
** Name:	IIABrsRestoreScreen -- Restore the screen
**
** Description:
**	Restore the screen after a third-party program has scribbled
**	over it.  If we're in a non-forms-system link, this does nothing.
**
** Inputs:
**	none
**
** Outputs:
**	none
**
**	Returns:
**		none
**
**	Exceptions:
**
** Side Effects:
**
** History:
**	3/30/90 (Mike S) Initial Version
*/
VOID
IIABrsRestoreScreen()
{
	if (in_link && IIabfmFormsMode)
	{
		/* Clear and repaint the screen */
##		clear screen
##		redisplay
	}
}

/*{
** Name:	IIABdcfDispCompFile - Display a file during compilation
**
** Description:  
**	Display a file during compilation of linking.  If we're
**	doing a forms system link, this goes into the tablefield.  If we're
**	doing a non-forms system link, it goes to stdout.
**	
** Inputs:
**	file	{LOCATION *}  Location of file to be displayed.
**
** History:
**	3/30/90 (Mike S) Initial Version
*/
VOID
IIABdcfDispCompFile(file)
LOCATION *file;         /* File to display */
{
	if (!in_link)
		return;

	if (IIabfmFormsMode)
	{
		/* Put the file above the trailing blank line */
##		scroll _form _tf to end
		_VOID_ IIUFtfnTblFldNiLoad(file, _form, _tf, _tfcol);

		/* Show it */
##              scroll _form _tf to end
##		redisplay
	}
	else
	{
		/* Send it to stdout */
		_VOID_ SIcat(file, stdout);
	}
}

/*{
** Name:	IIABdcmDispCompMsg - Display a compilation message
**
** Description:
**	Display a message during compilation or linking.  If we're in a forms
**	system link, append it to the tablefield.  If we're in a non-forms 
**	system link, display it with IIUGmsg.  If we're not in a link at all 
**	(e.g. in a single-frame compilation), display it with IIUGmsg if
**	the "always" flag is set.
**
** Inputs:
**	msg		ER_MSGID	message id
**	always		bool		Display for a single-frame compilation?
**	parcount	i4		number of message paramters
**	a0, a1, ...	PTR		message parameters 
**
** History:
**	3/30/90 (Mike S) Initial Version
*/
VOID
IIABdcmDispCompMsg(msg, always, parcount, a1, a2, a3, a4, a5)
ER_MSGID msg;
bool always;
i4  parcount;
PTR	a1;
PTR	a2;
PTR	a3;
PTR	a4;
PTR	a5;
{
	char buff[256];

	if (IIabfmFormsMode && in_link)
	{
		/* Put the message above the trailing blank line */
##		scroll _form _tf to end
		_VOID_ IIUGfmt(buff, sizeof(buff), ERget(msg), parcount, 
			       a1, a2, a3, a4, a5);
		_VOID_ IIUFtfsTblFldString(buff, _form, _tf, _tfcol);

		/* Show it */
##		scroll _form _tf to end
##		redisplay
	}
	else if (in_link || always)
	{
		/* Use IIUGmsg */
		IIUGmsg(ERget(msg), FALSE, parcount, a1, a2, a3, a4, a5);
	}
}

/*
**	Do the link
*/
static STATUS
do_link(link_args)
ABLNKARGS *link_args;
{
	STATUS status;
	ER_MSGID msg = 0;
	EX_CONTEXT context;
	FUNC_EXTERN i4 abexcintr();

	if ((status = EXdeclare(abexcintr, &context)) != OK)
	{
		EXdelete();
		return status;
	}

	/* Call the proper link routine, based on link type */
	in_link = TRUE;
 	if (ABLNK_TEST == link_args->link_type)
	{
		status =  IIABtestLink(link_args->app, link_args->tstimg);
	}
	else
	{
		status =  iiabImgLink(link_args->app, link_args->executable,
				  link_args->options);
		msg = (OK == status)  ?
				S_AB0018_ImageWorked : S_AB0019_ImageFailed;
	}

	/* 
	** If we're in forms mode, write a success/error message into the 
	** tablefield.
	*/
	if (IIabfmFormsMode && (msg != 0))
	{
		/* Insert a blank line first */
##		loadtable _form _tf (_tfcol = _blank)
		IIABdcmDispCompMsg(msg, FALSE, 0);
	}
	in_link = FALSE;

	EXdelete();
	return status;
}
