/*
** Copyright (c) 1988, 2008 Actian Corporation
**	All rights reserved.
*/

#include	<compat.h>
# include	<me.h>		 
#include	<st.h>
#include	<er.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
#include	<fe.h>
#include	<ug.h>
#include	<uf.h>
#include	<stdprmpt.h>
##include	<abclass.qsh>
##include	<metafrm.qsh>
#include	<abfglobs.h>
#include	<oodefine.h>
#include	"erab.h"

/**
** Name:	defaults.qc -	ABF Application Defaults Frame.
**
** Description:
**	Contains the routine used to set the application defaults
**	information, such as the source directory, etc.  Defines:
**
**	IIABdefaults()	ABF application defaults frame.
**
** History:
**	Revision 6.2  88/12  wong
**	Renamed as 'IIABdefaults()' and moved here.
**
**	Revision 6.1  88/03  wong
**	Modified as 'IIABoptions()' adding new options and removed editor
**	option.  (But kept old version since these changes are not yet
**	"official.")
**
**	Revision 2.0  82/10/18  joe
**	Initial revision.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      17-dec-2008 (joea)
**          Replace READONLY/WSCREADONLY by const.
**	23-Aug-2009 (kschendel) 121804
**	    Need abfglobs.h to satisfy gcc 4.3.
**	24-Feb-2010 (frima01) Bug 122490
**	    Update return types and add header files as neccessary
**	    to eliminate gcc 4.3 warnings.
*/

/*{
** Name:	IIABdefaults() -	ABF Application Defaults Frame.
**
** Description:
**	Allows a user to set the default application information.  This
**	information is saved in the input application object.  If changes
**	were made, set the application object dirty bit.
**
** Input:
**	applid	{OOID}  Application object ID.
**	app	{APPL *}  Application object structure.
**
** Returns:
**	{STATUS}  OK
**
** Called by:
**	'IIOOdetail()' (from 'IIABcatalogs()',) 'IIABeditApp()'.
**
** Side Effects:
**	Changes the values of the application defaults.
**
** History:
**	Written 10/18/82 (jrc)
**	03/88 (jhw) -- Removed editor field; added source directory etc.
**	08/89 (jhw) -- Added activations on Start Frame and Start Procedure
**		to check for legal INGRES names.  JupBug #7330.
**	06/90 (mikes) -- Changed End menu-item to be OK since this is a pop-up.
**	06/90 (mikes) -- Check vailidity of source directory
**	11/90 (mikes) -- Ignore roles if they're not supported
**	2/91 (Mike S) -- Check for default menu style, if VISION.
**	23-jul-91 (blaise)
**		Only display ListChoices menuitem if Vision. Bug #37608.
**	6-aug-91 (blaise)
**		Menuitem lookupmenuitem, which is blank if we're not running
**		Vision, should be an empty string and not EOS.
**	04-mar-92 (leighb) DeskTop Porting Change:
**		Moved function declaration outside of calling function.
**		This is so function prototypes will work.
*/

GLOBALREF char	_iiOOempty[];
GLOBALREF bool	IIabKME;
GLOBALREF bool	IIabVision;


#define _HelpExpl	F_FE0100_ExplFrameHelp
#define _EndExpl	F_FE0102_ExplEnd

static const
##	char	_DefForm[]	= ERx("abfdefaults"),
##		_StartFrame[]	= ERx("startframe"),
##		_StartProc[]	= ERx("startproc"),
##		_AppRole[]	= ERx("role"),
##		_CompForm[]	= ERx("compform"),
##		_CompNewForm[]	= ERx("newcompform"),
##		_MenuStyle[]    = ERx("menustyle");

static 
##	char	*yes, *no;

static bool _DefInit = FALSE;
static VOID change_frames();
static VOID change_styles();

FUNC_EXTERN VOID IIUFfieldHelp();
FUNC_EXTERN bool IIUGyn();
FUNC_EXTERN i4	IIFGmsmMenuStyleMask();
FUNC_EXTERN char 	*IIFGmsnMenuStyleName();


STATUS
IIABdefaults ( applid, app )
OOID		applid;
##register APPL	*app;
{
##	i2	change;
##	char	source[180+1];
##	char	linkopt[48+1];
##	char	image[48+1];
##	char	startframe[FE_MAXNAME+1];
##	char	startproc[FE_MAXNAME+1];
##	char	roleid[FE_MAXNAME+1];
##	char	defmenustyle[20];
##	char	compform[10];
##	char	compnewform[10];
##	char	*lookupmenuitem;
	bool	allcomp;	/* Compile forms for all frames */
	i4	defcomp;	/* Compile forms for new frames.  Only 
				   relevant if allcomp is FALSE. "nat" because
				   it must take an "I don't know" value */

	if ( !_DefInit )
	{
		_DefInit = TRUE;
		IIARiaForm(_DefForm);
		yes = ERget(F_UG0002_Yes2);
		no = ERget(F_UG0007_No2);	
	}

	/* Fetches the application object catalog entry for an application
	** object from the DBMS.  This entry is marked as unchanged by
	** clearing the application object 'dirty' bit.
	*/
	if ( app->ooid == OC_UNDEFINED || app->ooid != applid )
	{
		STATUS	status;

		app->ooid = applid;
		MEfill( sizeof(*app) - ((char *)&app->name - (char *)app), '\0',
			(PTR)&app->name
		);
		if ( (status = IIAMapFetch(app, applid, TRUE)) != OK )
			return status;
		_VOID_ OOhash(applid, (OO_OBJECT *)app);
	}

	/* The ListChoices menu item is only appropriate for Vision */
	lookupmenuitem = IIabVision ? ERget(FE_Lookup) : ERx("");

##	display _DefForm	/* default:  FILL */

##	initialize (
##			srcdir = app->source,
##			#linkopt = app->link_file,
##			#image = app->executable,
##			_AppRole = app->roleid
##		)
##	{
##		i4	_off;

		if ( !app->start_proc )
		{
			_off = 0;
##			putform ( _StartFrame = app->start_name );
##			clear field _StartProc;
		}
		else
##		{
			_off = app->batch;
##			putform ( _StartProc = app->start_name );
##			clear field _StartFrame;
##		}
##		set_frs field _DefForm (invisible(_StartFrame) = _off);
##		set_frs form ( mode = UPDATE );
##		/*set_frs field _DefForm ( invisible(editmode) = 1 );*/
		if (!IIabKME)
##			set_frs field _DefForm (invisible(_AppRole) = 1)

		allcomp = (app->flags & APC_DBFORMS) == 0;
		defcomp = ((app->flags & APC_DEFDBFORMS) == 0) ? 1 : 0;
		if (allcomp)
		{
##			set_frs field _DefForm ( invisible(_CompNewForm) = 1 );
##			putform _DefForm (_CompForm = yes);
		}
		else
		{
##			char * defcompile;

			defcompile = (defcomp == 1) ? yes : no;
##			set_frs field _DefForm ( invisible(_CompNewForm) = 0 );
##			putform _DefForm 
##				(_CompForm = no, _CompNewForm = defcompile);
		}

		if (IIabVision)
		{
##			char *style;

			style = IIFGmsnMenuStyleName(app->flags & APC_MS_MASK);
##			set_frs field _DefForm (invisible(_MenuStyle) = 0)
##			putform _DefForm (_MenuStyle = style)
		}
		else
		{
##			set_frs field _DefForm (invisible(_MenuStyle) = 1)
		}
##	}

##	activate field _CompForm
##	{
		bool new_answer;

##		getform (compform = _CompForm)
		new_answer = IIUGyn(compform, (STATUS *)NULL);
		if (new_answer && !allcomp)
		{
			/* We've just decided to compile all forms */
##			set_frs field _DefForm ( invisible(_CompNewForm) = 1 );
			allcomp = TRUE;
		}
		else if (!new_answer && allcomp)
		{
			/* We've just decided not to compile all forms */
##			set_frs field _DefForm ( invisible(_CompNewForm) = 0 );
			allcomp = FALSE;

			/* Force him to answer the question about defaults */
			defcomp = -1;	/* I dont know */
##			clear field _CompNewForm
##			resume field _CompNewForm
		}
##		resume next
##	}
		
##	activate field _CompNewForm
##	{
		i4	new_default;
		i4	cc;

##		getform (compnewform = _CompNewForm)
		new_default = IIUGyn(compnewform, (STATUS *)NULL) ? 1 : 0;

		if (new_default != defcomp)
		{
			ER_MSGID yes_exp;
			ER_MSGID no_exp;
			ER_MSGID cc_title;

			if (new_default)
			{
				yes_exp = F_AB00D0_YesMakeComp;
				no_exp = F_AB00D1_LeaveAlone;
				cc_title = F_AB00D2_MakeComp;
			}
			else
			{
				yes_exp = F_AB00D3_YesMakeDB;
				no_exp = F_AB00D1_LeaveAlone;
				cc_title = F_AB00D4_MakeDB;
			}
			/* Ask whether to change all existing forms */
			cc = IIUFccConfirmChoice(
				CONF_GENERIC, ERx(""), ERx(""), 
				ERget(F_AB00D5_CompChangeBanner),
				ERx("abchcomp.hlp"), cc_title, yes_exp, no_exp,
				ERx(""), FALSE);

			if (cc == CONFCH_YES)
				change_frames(app, (bool)(new_default == 1));

			defcomp = new_default;
		}
##		resume next
##	}

##	activate field srcdir
##	{
##		getform (source = srcdir)
		if (!IIABchkSrcDir(source, TRUE))
##			resume field srcdir
		else
##			resume next
##	}

##	activate field _StartFrame:
##	{ /* validate Start Frame */
##		i4	change;

##		inquire_frs field _DefForm ( change = change(_StartFrame) );
		if ( change != 0 )
		{
##			getform ( startframe = _StartFrame,
##				  startproc = _StartProc
##			);
			
			if ( *startframe != EOS )
			{
				if ( *startproc != EOS || app->batch )
				{ /* only one can be set */
					/*NOT REACHED*/
##					/* The validations for the form should
##					** prevent this from ever occurring.
##
##					clear field _StartFrame;
##					resume field _StartProc;
##					*/
				}
				else if ( FEchkname(startframe) != OK )
				{
					i4	maxlen = FE_MAXNAME;

					IIUGerr( E_AB0131_BadFrame,
							UG_ERR_ERROR,
						2, startframe, (PTR)&maxlen
					);
##					resume field _StartFrame;
				}
			}
		}
##		resume next;
##	}

##	activate field _StartProc:
##	{ /* validate Start Procedure */
##		i4	change;

##		inquire_frs field _DefForm ( change = change(_StartProc) );
		if ( change != 0 )
		{
##			getform ( startframe = _StartFrame,
##				  startproc = _StartProc
##			);
			
			if ( *startproc != EOS )
			{
				if ( *startframe != EOS )
				{ /* only one can be set */
					/*NOT REACHED*/
##					/* The validations for the form should
##					** prevent this from ever occurring.
##
##					clear field _StartProc;
##					resume field _StartFrame;
##					*/
				}
				else if ( FEchkname(startproc) != OK )
				{
					i4	maxlen = FE_MAXNAME;

					IIUGerr( E_AB0133_BadProcedure,
							UG_ERR_ERROR,
						2, startproc, (PTR)&maxlen
					);
##					resume field _StartProc;
				}
			}
		}
##		resume next;
##	}

##	activate menuitem ERget(FE_OK),
##			FRSkey4
##	{
##		inquire_frs form ( change = change );
		if ( change )
##			enddisplay;
		else
##			breakdisplay;
##	}

##	activate menuitem lookupmenuitem (validate = 0, activate = 0,
##		expl = ERget(FE_LookupExpl)), 
##		FRSkey10 (VALIDATE = 0, ACTIVATE = 0) 
##	{
##		char		fld[FE_MAXNAME+1];
		FLD_VALUE	fv;

		fv._form = _DefForm;
		fv._field = fld;
		fv._column = NULL;

##		inquire_frs form ( fld = field );
		IIUFfldHelp(&fv);
##	}

##	activate menuitem ERget(FE_Cancel) (expl = ERget(F_FE0103_ExplCancel),
##						validate = 0, activaate = 0),
##			 FRSkey9 (validate = 0, activate = 0)
##	{
		change = FALSE;
##		breakdisplay
##	}

##	activate menuitem ERget(FE_Help) (expl = ERget(_HelpExpl),
##						validate = 0, activaate = 0),
##			 FRSkey1 (validate = 0, activate = 0)
##	{
##		char	title[40+1];

##		getform ( title = #title );
		FEhelp(ERx("abdeflts.hlp"), title);
##	}

##	finalize (
##		source = srcdir,
##		linkopt = #linkopt,
##		image = #image,
##		startframe = _StartFrame,
##		startproc = _StartProc,
##		roleid = _AppRole,
##		defmenustyle = _MenuStyle
##	)

	if ( change )
	{
		bool was_allcomp = (app->flags & APC_DBFORMS) == 0;
		i4 was_defcomp = ((app->flags & APC_DEFDBFORMS) == 0) ? 1 : 0;

		/* See if flags changed */
		if (was_allcomp && !allcomp)
		{
			app->flags |= APC_DBFORMS;
			app->data.dirty = TRUE;
		}
		else if (!was_allcomp && allcomp)
		{
			app->flags  &= ~APC_DBFORMS;
			app->data.dirty = TRUE;
		}
		
		if (was_defcomp == 1 && defcomp == 0)
		{
			app->flags |= APC_DEFDBFORMS;
			app->data.dirty = TRUE;
		}
		else if (was_defcomp == 0 && defcomp == 1)
		{
			app->flags &= ~APC_DEFDBFORMS;
			app->data.dirty = TRUE;
		}

		/* If we're in Vision, check menu style */
		if (IIabVision)
		{
			i4 oldmask;
			i4 newmask;

			oldmask = app->flags & APC_MS_MASK;
			newmask = IIFGmsmMenuStyleMask(defmenustyle);

			if (oldmask != newmask)
			{
				i4 cc;

				app->flags &= ~APC_MS_MASK;
				app->flags |= newmask;
				app->data.dirty = TRUE;

				/* 
				** See whether to change existing menu frames
				** to the new default style.
				*/
				cc = IIUFccConfirmChoice(
				    CONF_GENERIC, ERx(""), ERx(""), 
				    ERget(F_AB00D9_StyleChangeBanner),
				    ERx("abchstyl.hlp"), F_AB00D8_ChangeStyle, 
				    F_AB00D6_YesChangeMenus, 
				    F_AB00D7_LeaveAlone, ERx(""), FALSE);

				if (cc == CONFCH_YES)
					change_styles(app, newmask);
			}
		}

		if ( !STequal(source, app->source) )
		{
			if ( *source == EOS )
				app->source = _iiOOempty;
			else
			{
				app->source = FEtsalloc(app->data.tag, source);
				if ( app->source == NULL )
					return FAIL;
			}
			app->data.dirty = TRUE;
		}
		if ( IIabKME && (!STequal(roleid, app->roleid)) )
		{
			if ( *roleid == EOS )
				app->roleid = _iiOOempty;
			else
			{
				/* Invalidate saved password */
				app->password = NULL;

				app->roleid = FEtsalloc(app->data.tag, roleid);
				if ( app->roleid == NULL )
					return FAIL;
			}
			app->data.dirty = TRUE;
		}
		if ( !STequal(linkopt, app->link_file) )
		{
			if ( *linkopt == EOS )
				app->link_file = _iiOOempty;
			else
			{
				app->link_file =
					FEtsalloc(app->data.tag, linkopt);
				if ( app->link_file == NULL )
					return FAIL;
			}
			app->data.dirty = TRUE;
		}
		if ( !STequal(image, app->executable) )
		{
			if ( *image == EOS )
				app->executable = _iiOOempty;
			else
			{
				app->executable =
					FEtsalloc(app->data.tag, image);
				if ( app->executable == NULL )
					return FAIL;
			}
			app->data.dirty = TRUE;
		}
		if ( *startframe != EOS )
		{
			/* assert:  ! app->batch */
			if ( !STequal(startframe, app->start_name) )
			{
				app->start_name =
					FEtsalloc(app->data.tag, startframe);
				if ( app->start_name == NULL )
					return FAIL;
				app->data.dirty = TRUE;
			}
			else if ( app->start_proc )
			{
				app->data.dirty = TRUE;
			}
			app->start_proc = FALSE;
		}
		else if ( *startproc != EOS )
		{
			if ( !STequal(startproc, app->start_name) )
			{
				app->start_name =
					FEtsalloc(app->data.tag, startproc);
				if ( app->start_name == NULL )
					return FAIL;
				app->data.dirty = TRUE;
			}
			else if ( !app->start_proc )
			{
				app->data.dirty = TRUE;
			}

			app->start_proc = TRUE;
		}
		else if ( *app->start_name != EOS )
		{ /* cleared both ... */
			app->start_name = _iiOOempty;
			app->data.dirty = TRUE;
			app->start_proc = app->batch;
		}

		if ( app->data.dirty )
		{
			/* Set parent form as changed.  This is for when this
			** frame is run from the catalog MoreInfo frame.  When
			** run from the Frames/Procedures catalog frame, setting
			** the form as changed will be ignored since the change
			** state is never tested.
			*/
##			set_frs form ( change = 1 );
		}
	}
	return OK;
}

/*
** change_frames
**
** Change all existing frames, either to use compiled forms, or to get forms 
** from the database.
*/
static VOID
change_frames(appl, compiled_forms)
APPL *appl;
bool compiled_forms;
{
	APPL_COMP *comp;

	/* Announce ourselves */
	IIUGmsg(ERget(S_AB02B0_ChangeCompForm), FALSE, 0);

	/* Load the whole application */
	if ( IIAMapFetch(appl, OC_UNDEFINED, TRUE) != OK )
			return;

	/* Go through all the user frames, changing the form type if need be */
	for (comp = (APPL_COMP *)appl->comps; comp != NULL; comp = comp->_next)
	{
		switch (comp->class)
		{
		    case OC_OSLFRAME:
		    case OC_OLDOSLFRAME:
		    case OC_MUFRAME:
		    case OC_APPFRAME:
		    case OC_UPDFRAME:
		    case OC_BRWFRAME:
			if (compiled_forms)
			{
				if ((comp->flags & APC_DBFORM) == 0)
					break;	/* Already correct */
				comp->flags &= ~APC_DBFORM;
			}
			else
			{
				if ((comp->flags & APC_DBFORM) != 0)
					break;	/* Already correct */
				comp->flags |= APC_DBFORM;
			}
			comp->data.dirty = TRUE;

			/* 
			** Save it.  We use IIAMufqUserFrameQuick instead of
			** iiabSvComp to avoid seeing the name of every frame 
			** as it's saved.  This doesn't update the alter date
			** for the frame, which is perhaps a pity.
			*/
			_VOID_ IIAMufqUserFrameQuick((OO_OBJECT *)comp);
			break;


		    default:
			break;
		}
	}

	return;
}

/*
** change_styles
**
** Change all existing menu frames to use the new default style
*/
static VOID
change_styles(appl, style_mask)
APPL *appl;
i4 style_mask;
{
	APPL_COMP *comp;

	/* Announce ourselves */
	IIUGmsg(ERget(S_AB02B1_ChangeMenuStyle), FALSE, 0);

	/* Load the whole application */
	if ( IIAMapFetch(appl, OC_UNDEFINED, TRUE) != OK )
			return;

	/* Go through all the menu frames, changing the menu style if need be */
	for (comp = (APPL_COMP *)appl->comps; comp != NULL; comp = comp->_next)
	{
		if (comp->class == OC_MUFRAME)
		{
			i4 oldmask = comp->flags & APC_MS_MASK;

			if (style_mask != oldmask)
			{
				comp->flags &= ~APC_MS_MASK;
				comp->flags |= style_mask;
				((USER_FRAME *)comp)->mf->state |= 
							MFST_DOGEN|MFST_DOFORM;
				comp->data.dirty = TRUE;

				/* 
				** See the note above about use of
				** IIAMufqUserFrameQuick.
				*/
				_VOID_ IIAMufqUserFrameQuick((OO_OBJECT *)comp);
			}
		}
	}

	return;
}
