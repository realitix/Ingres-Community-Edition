/**
** Name: SAXImportHandlers.hpp - 
**	XML import handler class. class to handle Ingres data parsed 
**	from the XML file. 
**
** Description:
**	This file contains the class header file for SAXImport
**
** History:
**      2-Jan-2001 (gupsh01) written.
**	19-Sep-2001 (hanch04)
**	    Removed the passing of the filename to SAXImportHandler
**	    file i/o is handled through the xf calls
**      21-Dec-2001 (hanch04)
**         Print out NULL value for columns that are null.
**	11-Apr-2003 (gupsh01)
**	    Added new class DataHandles, to store the list of handles 
**	    for data files for each table.
** 	15-Mar-2004 (gupsh01)
** 	    Modified to support Xerces 2.3.
**	08-Apr-2004 (gupsh01)
**	    Added isMetaInfoSet, flag to identify if the xml file has the
**	    metadata info. This will ensure that impxml is used only with 
**	    conformant xml files, like generated by genxml.
**	21-Sep-2009 (hanje04)
**	   Use new include method for stream headers on OSX (DARWIN) to
**	   quiet compiler warnings.
**	   Also add version specific definitions of parser funtions to
**	   allow building against Xerces 2.x and 3.x
**	20-Oct-2009 (hanje04)
**	   BUG 119978
**	   Correct changes for OSX and re-add 'const' when defining 'count'
**	   in writeChars for SAX DocumentHandler 
**/

/*
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 1999-2000 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache\@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation, and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.ibm.com .  For more information
 * on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

#include    <xercesc/sax/HandlerBase.hpp>
#include    <xercesc/framework/XMLFormatter.hpp>
#include "SAXIngres.hpp"


/* Name: DataHandles - This class holds a list of
**	               file handles for data files 
**		       for each table.	
*/
class DataHandles 
{
public:
    i4		table_relid;
    char	datafilename[FE_MAXNAME * 3];
    TXT_HANDLE	*dataFile;
    DataHandles *nextHandle;
		
    DataHandles() 
    {
      table_relid = 0;
      dataFile = NULL;
      nextHandle = NULL;
    } 
};

XERCES_CPP_NAMESPACE_USE

/* Name: SAXImportHandlers - This class handles the Parsing operation for the XML file.
** History:
**      10-jun-2003 (gupsh01)
**          Added datalen, to hold the length of the column data.
**	03-july-2003 (gupsh01)
**	    Added dataval, to collect the data for character
**	    column character data. 
**	07-dec-2004 (gupsh01)
**	    Added datafilename to dataval so the correct 
**	    filename can be provided to writecopy.
**      27-Feb-2009 (coomi01) b121663
**         Add encode flag to rowformat prototype.
**         Add isCurrentColBase64 as private attribute.
*/

class SAXImportHandlers : public HandlerBase, private XMLFormatTarget
{
public:
    // -----------------------------------------------------------------------
    //  Constructors
    // -----------------------------------------------------------------------
    SAXImportHandlers
    (
        const   char* const                 encodingName
        , const XMLFormatter::UnRepFlags    unRepFlags 
        , char *currentTag
    );
    ~SAXImportHandlers();


    // -----------------------------------------------------------------------
    //  Implementations of the format target interface
    // -----------------------------------------------------------------------
    void writeChars
    (
        const   XMLByte* const  toWrite
    );


    // -----------------------------------------------------------------------
    //  Implementations of the SAX DocumentHandler interface
    // -----------------------------------------------------------------------
    void endDocument();

    void endElement(const XMLCh* const name);

# if XERCES_VERSION_MAJOR > 2
    void characters(const XMLCh* const chars, XMLSize_t length);
# else
    void characters(const XMLCh* const chars, const unsigned int length);
# endif

    void ignorableWhitespace
    (
        const   XMLCh* const    chars
# if XERCES_VERSION_MAJOR > 2
        , XMLSize_t    length
# else
        , const unsigned int    length
# endif
    );

    void processingInstruction
    (
        const   XMLCh* const    target
        , const XMLCh* const    data
    );

    void writeChars
    (
        const   XMLByte* const  toWrite
# if XERCES_VERSION_MAJOR > 2
        , XMLSize_t    count
# else
        , const unsigned int    count
# endif
        , XMLFormatter* const   formatter
    );


    void startDocument();

    void startElement(const XMLCh* const name, AttributeList& attributes);



    // -----------------------------------------------------------------------
    //  Implementations of the SAX ErrorHandler interface
    // -----------------------------------------------------------------------
    void warning(const SAXParseException& exception);
    void error(const SAXParseException& exception);
    void fatalError(const SAXParseException& exception);


    // -----------------------------------------------------------------------
    //  Implementation of the SAX DTDHandler interface
    // -----------------------------------------------------------------------
    void notationDecl
    (
        const   XMLCh* const    name
        , const XMLCh* const    publicId
        , const XMLCh* const    systemId
    );

    void unparsedEntityDecl
    (
        const   XMLCh* const    name
        , const XMLCh* const    publicId
        , const XMLCh* const    systemId
        , const XMLCh* const    notationName
    );

   // -----------------------------------------------------------------------
   //  Other functions to handle the various tags. 
   // -----------------------------------------------------------------------
STATUS process_tag (char *tag_name, char **att_name, char **value, i2 len);
void process_end_tag (char *tag_name);
void rowformat (char *tab_name, char *col_name, bool is_null, bool is_base64, char *data);
void deletelist(DataHandles *list); /* deletes list of data handles */

private :
    // -----------------------------------------------------------------------
    //  Private data members
    //
    //  fFormatter
    //      This is the formatter object that is used to output the data
    //      to the target. It is set up to format to the standard output
    //      stream.
    // -----------------------------------------------------------------------
    XMLFormatter    fFormatter;

    /* These data members included to manage ingres data */ 
    char	currentTag[FE_MAXNAME + 1];
    char	currentTab[FE_MAXNAME + 1];
    char	currentCol[FE_MAXNAME + 1];
    bool	isCurrentColNull;
    char 	owner_name[FE_MAXNAME + 1];
    i4		datalen;	
    char	*dataval;	
    XF_TABINFO	*tablist;
    XF_TABINFO  *indlist; 
    DataHandles	*xmlData; /* holds handles for data files */
    bool	isMetaInfoSet;
    bool        isCurrentColBase64;
};

