/* Generated with AuthorIT version 4.3.495  3/8/2007 3:24:58 PM */
Page=new Array();
Page[0]=new Array("Welcome to the Ingres Frequent Flyer demonstration application, which is provided as an introduction to web-application development with Ingres, Apache, PHP, and the Ingres PHP Driver.","The application consists of the following:","A database supporting NFC Unicode data called &quot;demodb&quot; created when Ingres or the demonstration is installed. ","Sample data related to air travel—for example, airlines, airports, and routes. ","Sample code illustrating typical functionality that an application developer may want to write. ","We hope that you find this application useful. If you have questions or comments, please raise an issue with Ingres Technical Support at www.actian.com/support/Support_Raise_an_Issue.html. ","Welcome",
"welcome.htm");
Page[1]=new Array("The application consists of three functional areas:","Routes","Lets you find a route between airports, demonstrating the following: ","SELECT queries that require parameters","Execution of a row producing procedure","INSERT, UPDATE, and DELETE queries","Profile","Lets you select or create details for a &quot;frequent flyer,&quot; demonstrating the following:","Use of Unicode character types","Handling of binary large objects (BLOBs)","Connect","Lets you set up connection details to an Ingres instance.","Ingres Features Demonstrated",
"features.htm");
Page[2]=new Array("To develop and run the Ingres Frequent Flyer application, you need the following:","Apache 2.2 or higher","PHP 5.1. or higher","Ingres PHP driver 1.4.1. Go to http://php.net/ingres.","Connection to an Ingres instance","The application requires a connection to an Ingres instance that includes a process called the Data Access Server (DAS).","Tip: Typically, the DAS is installed and running in the Ingres instance. If not, check with your Ingres systems administrator or refer to the Ingres System Administration Guide or Connectivity Guide.","The Frequent Flyer database (demodb) containing sample data","The Frequent Flyer application","A web browser with JavaScript enabled","A text editor of your choice, if you plan to develop your own application or modify this one","What You Need",
"require.htm");
Page[3]=new Array("The GUI elements in the PHP version of Ingres Frequent Flyer use Ajax features provided by the Open Source Library xajax.","What You Need to Know",
"require_know.htm");
Page[4]=new Array("The Routes form lets you find direct flights between airports.","The form provides four items of information that are used to retrieve the flights result set: ","Country","Region","Airport","Day","The following three parameters are used to filter data from the database:","Departing airport code","Arriving airport code","Operating days","The Return Journey parameter affects the query passed to Ingres for processing. ","The list of airports is reduced by restricting the available airports based on the country and region.","Airport code selection is composed of three HTML select boxes residing in routesCriteria.php:","Departing","Arriving","dep_country_select","arv_country_select","dep_region_select","arv_region_select","dep_apcode_select","arv_apcode_select","In addition to the departing and arriving airport select boxes, the function uses an HTML table to display the results. In this example, the selection made in each of the country and region form controls is used as a parameter to filter the query results until a list of airport codes is returned:","More information","How the Country Select Box Is Loaded","How the Region Select Box Is Loaded","How the Airport Select Box is Loaded and Airport Information Shown","How the Search Is Executed and the Result Set Loaded","Routes Form",
"routes_form.htm");
Page[5]=new Array("In the Routes form, the country selected in the Country select box is loaded in the function getCountrySelect in airport.ajax.php. ","The getCountrySelect function creates a new RoutesModel instance and calls the member function getCountrys. ","The getCountrys function returns a two dimensional array where each entry of the outer array is an array of the elements with index &quot;ct_name&quot; and &quot;ct_code&quot;.","The getCountrys method executes the following query and gets the results as array. Then, it converts all values in the array from UTF-16LE to UTF-8:","function getCountrys()","{","&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;DBConn-&gt;query(","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;select ct_name, ct_code from country ORDER BY ct_name&quot;);","&nbsp;&nbsp;&nbsp;&nbsp;$resultArray = $this-&gt;DBConn-&gt;getResultArray();","&nbsp;&nbsp;&nbsp;&nbsp;$countryArray=array();","&nbsp;&nbsp;&nbsp;&nbsp;foreach($resultArray as $key =&gt; $value)","&nbsp;&nbsp;&nbsp;&nbsp;{","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$countryArray[$key]['ct_name'] =","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconv(&quot;UTF-16LE&quot;,&quot;UTF-8&quot;,$value['ct_name']);","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$countryArray[$key]['ct_code'] =","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconv(&quot;UTF-16LE&quot;,&quot;UTF-8&quot;,$value['ct_code']);","&nbsp;&nbsp;&nbsp;&nbsp;}","&nbsp;&nbsp;&nbsp;&nbsp;return $countryArray;","}","In the HTML code of the select box returned by getCountrySelect, the function fillRegion is set as event handler for onChange events of the select box. The parameter to the functions are the IDs of div elements to which the HTML code is assigned to.","How the Country Select Box Is Loaded",
"country_load.htm");
Page[6]=new Array("All Country select boxes declare the xajax function fillRegion in airport.ajax.php as their onChange event handler. ","The fillRegion function calls getRegionSelect and passes the country code of the country for which the region select should be generated.","This country code is passed to the method getRegionByCountry of the RoutesModel class.","The following query is executed and the result is fetched as an array:","SELECT DISTINCT ap_place, ap_ccode FROM airport WHERE ap_ccode='&quot;.$ct_code.&quot;' ORDER BY ap_place","All values in this array are converted from UTF-16LE to UTF-8.","The HTML code of the region select generated in getRegionSelect makes the function showAirports the onChange eventHandler.","How the Region Select Box Is Loaded",
"region_load.htm");
Page[7]=new Array("The Airport Code selection box and the airport information list are generated by the function showAirports in airports.ajax.php.","The HTML code for the select box is generated by getApCodeSelect. This function creates a new instance of RoutesModel and calls its getAirports method.","The getAirports method then calls the Ingres stored procedure get_my_airports, passing in the country and area codes using the &quot;?&quot; placeholder:","$this-&gt;DBConn-&gt;query(","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;call get_my_airports(ccode = ?, area =?)&quot;,$params, $sqltypes);","The parameter $params is an array with two elements, one for each placeholder in the query: one for the parameter ccode and one for the parameter area. The function takes the two arguments it gets from its caller and converts them to UTF-16LE.","$params = array(	&quot;ccode&quot; =&gt; iconv(&quot;UTF-8&quot;,&quot;UTF-16LE&quot;,$ap_ccode),","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;area&quot; =&gt; iconv(&quot;UTF-8&quot;,&quot;UTF-16LE&quot;,$ap_place));","The procedure parameter ccode type is NCHAR and the procedure parameter area type is NVARCHAR. So the variable $sqltypes is:","$sqltypes = &quot;nN&quot;;","Because get_my_airports is a Row Producing Procedure (RPP), we can fetch the result like the one of a normal query:","$resultArray = $this-&gt;DBConn-&gt;getResultArray();","The method getResultArray of DBConnection simply calls ingres_fetch_array until all results are returned from the database.","The rest of the function processes the result and returns it to getRegionSelect, where the SELECT code is generated with the results.","The showAirports function is passed parameters specifying the airport country code and the airport region. After it creates the HTML string for the display table, it then calls the RoutesModel member function getAirports to populate the table with the available airports for that region.","The code for the region select is assigned to the innerHTML attribute of the corresponding DOM Node ($targetId) and the table code is assigned to the DOM Node contentView (declared in index.php).","How the Airport Select Box is Loaded and Airport Information Shown",
"airport_load.htm");
Page[8]=new Array("A SELECT query is executed that uses the selections specified in the Route Form as query parameter values.","The query returns the routes that fit the route selection criteria and optionally, depending on the roundtrip flag, includes an additional OR clause for return journeys.","The queries that are used to return the route result set are:","One-way routes","SELECT&nbsp;&nbsp;&nbsp;&nbsp;rt_airline, al_iatacode, rt_flight_num,","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rt_depart_from, rt_arrive_to, rt_depart_at,","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rt_arrive_at, rt_arrive_offset, rt_flight_day","FROM route r, airline a","WHERE&nbsp;rt_depart_from = ?","&nbsp;&nbsp;AND rt_arrive_to = ?","&nbsp;&nbsp;AND rt_flight_day LIKE ?","&nbsp;&nbsp;AND rt_airline = al_icaocode","ORDER BY rt_airline, rt_flight_num&quot;;","Return routes ","SELECT&nbsp;&nbsp;&nbsp;&nbsp;rt_airline, al_iatacode, rt_flight_num,","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rt_depart_from, rt_arrive_to, rt_depart_at,  ","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rt_arrive_at, rt_arrive_offset, rt_flight_day","FROM route r, airline a","WHERE ((rt_depart_from = ? and rt_arrive_to = ?)","&nbsp;&nbsp;&nbsp;&nbsp;OR (rt_depart_from = ? and rt_arrive_to = ?))","&nbsp;&nbsp;&nbsp;&nbsp;AND rt_flight_day LIKE ?","&nbsp;&nbsp;&nbsp;&nbsp;AND rt_airline = al_icaocode","ORDER BY rt_airline, rt_flight_num&quot;","Clicking the Go button triggers the execution of the xajax function xajax_doSearch (implemented in routes.ajax.php). This function prepares the input for the method doSearch of RoutesModel, and then calls it. After the method returns, the HTML code for the result table is generated and filled with the results. This code is assigned to the innerHTML attrbute of the DOM Node contentView, which is a div declared in index.php.","The method RoutesModel::doSearch creates an array containing the values of the placeholders in the query. It also declares a string for the mapping of the values to SQL types and executes the appropriate query. After fetching the results, it converts all string values to UTF-8.","How the Search Is Executed and the Result Set Loaded",
"queryexec.htm");
Page[9]=new Array("The Profile form allows the display or modification of personal profile information. ","This limited set of information shows how information stored in the database can be represented in user interface controls.","The table used for storing profile information contains a column of type LongVarBinary to hold binary large objects (BLOBs). In this example, a photograph is used as a binary object.","Profile information is displayed in the result panel, profilePanel.","The Profile form contains two groups of buttons that perform the following actions:","Group 1","New","Clears all entries in the form and enables the Add button.","Modify","Changes the Email Address control from a text field into a select box list field. The list in the select box reflects all entries stored in the database.","Group 2","Add","Submits the forms data and advises the ProfileModel class to execute an INSERT query using values from the form as parameters to the query.","Remove","Calls the xajax function deleteProfile in profile.ajax.php, which advises ProfileModel class to execute a DELETE query using the value from the Email select box to identify the row in the database to be deleted.","Change","Submits the forms data and advises the ProfileModel class to execute an UPDATE query using the values from the form as parameters to the query.","More information","How the Email Address Select Box Is Loaded","How Profile Information Is Loaded and the Picture Displayed","How a New Profile Is Added","How a Profile Is Removed","How a Profile Is Changed","Profile Form",
"profile_form.htm");
Page[10]=new Array("The Email Address select box can assume two styles depending on the mode of the page: ","When adding a new profile, the email address is entered as a text in the Email Address input field.","When modifying an existing profile, the email address becomes a select box where the list of email addresses is retrieved from the user_profile table.","The function xajax_loadEmail generates the HTML code for a select box. The data for this box is loaded from the database by ProfileModel::getMailaddresses.","This class method sets up the query string and passes it as a parameter to the query method of its instance of the DBConnection class.","After the query is sent, the method gets the result by a call to the method getResultArray of DBConnection. Its result is a two dimensional array. Each row of the array is an array where, in addition to storing the data in numeric indices, data is also stored in associative indices, using the column names as keys.","Thus, the values in the result set can be accessed through the index &quot;up_email&quot;. The method generates a new array with only one entry for each fetched mail address and converts the encoding of the mail address string from UTF-16LE to UTF-8.","function getMailAddresses()","{","&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;DBConn-&gt;query(&quot;SELECT up_email from user_profile&quot;);","&nbsp;&nbsp;&nbsp;&nbsp;$resultArray = $this-&gt;DBConn-&gt;getResultArray();","&nbsp;&nbsp;&nbsp;&nbsp;$mailaddresses = array();","&nbsp;&nbsp;&nbsp;&nbsp;foreach($resultArray as $key =&gt; $emailaddress)","&nbsp;&nbsp;&nbsp;&nbsp;{","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$mailaddresses[$key]['up_email'] =","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconv(&quot;UTF-16LE&quot;,&quot;UTF -8&quot;,$emailaddress['up_email']);","&nbsp;&nbsp;&nbsp;&nbsp;}","&nbsp;&nbsp;&nbsp;&nbsp;return $mailaddresses;","}","The Ajax function loadValuesforNewProfile processes the returned array into a string containing the HTML code for the select box. This String is assigned to the innerHTML attribute of the DOM Node &quot;mailaddress&quot;. This node is a &lt;div&gt; Element with the id &quot;mailaddress&quot;.","How the Email Address Select Box Is Loaded",
"email_load.htm");
Page[11]=new Array("The column up_image is defined as the long byte Ingres data type. To display the picture, it is necessary to read the binary value into a variable and store it into a file that can be downloaded by the browser. For this reason, a temporary file cannot be used.","The picture value is downloaded from the database identified by the profile's email address in the method getProfileByEmail of the ProfileModel class.","First, the user inputs are checked, then the SQL statement is created. We use the parameter $email in the WHERE clause to limit the result to the profile that exactly matches this mail address.  ","The query is submitted to the database and the result returned:","$sql =&quot;SELECT up_airport, up_email, up_first, up_last, up_image,","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ap_name, ap_place, ct_name, ct_code","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM user_profile, airport, country","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE up_airport = ap_iatacode AND","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ap_ccode = ct_code AND","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up_email ='&quot;.$email.&quot;'&quot;;","$this-&gt;DBConn-&gt;query($sql);","//let's get the profile as an object","$resObjArray = $this-&gt;DBConn-&gt;getResultObjects();","In this case, the results are needed as objects, so we call getResultObjects of DBConnection. This method in turn calls ingres_fetch_object and appends every returned object to an array.","function getResultObjects()","{","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$resultArray = array();","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while($obj = ingres_fetch_object())","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$resultArray[] = $obj;","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $resultArray;","}","Note: The array can contain only one or no Object because up_email is declared as the primary key of the table user_profile. It is implicitly unique because we know that we create a new empty object and assign one attribute for each attribute of the result object to it.","This new object is returned to the xajax function loadCredentials in profile.ajax.php.","With the information provided by the object, loadCredentials loads the home country and the home region of the user from the database, composes HTML code for the appropriate select boxes, and finally stores the image into a file named after the email address of the profile.","$path = &quot;pictures/&quot;.session_id();","$file = $path.&quot;/&quot;.$profile-&gt;email;","$handle = fopen($file,&quot;w&quot;);","fwrite($handle,$profile-&gt;image);","fclose($handle);","All the HTML code is assigned to the appropriate DOM Node in the HTML page with the Ajax Response Object.","How Profile Information Is Loaded and the Picture Displayed",
"profile_load.htm");
Page[12]=new Array("Clicking the Add button submits the forms data and sends it by POST to the server.","The values are processed at the beginning of profile.php. They are put in a new array, which is given to the method addNew of class ProfileModel.","In this method, we first do a select count(*) on the table to check whether an entry with the given email address already exists.","If the entry does not exist, we check whether the user has uploaded a file. If he has done so, $credits['up_image'] will have a value different from empty string (which is the case if he has not).","The first case is more interesting because we will put the image into the BLOB column here. So we first read the binary content of the file into a variable:","$handle = fopen($credits['up_image'],&quot;rB&quot;);","$image = stream_get_contents($handle);","fclose($handle);","Then we define a string to store which SQL type corresponds to the content of the variable. The column &quot;up_image&quot; is type long byte, so we take &quot;B&quot;.","$sqltypes = &quot;B&quot;;","Now we put the variable into an array. (The name of the index does not have to correspond to the column name.)","$params = array (&quot;up_image&quot; =&gt; $image);","The last thing to declare is our SQL statement:","$sql=&quot;INSERT INTO user_profile(up_id, up_airport, up_email, up_first,","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;up_last, up_image)","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUES ( next value for UP_ID,'&quot;.$credits['up_airport'].&quot;',","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&quot;.$credits['up_email'].&quot;',","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&quot;.addslashes($credits['up_first']).&quot;',","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&quot;.addslashes($credits['up_last']).&quot;',","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?)&quot;;","The placeholder &quot;?&quot; in the query indicates that Ingres should insert the value from the array $params. This is shown in the query:","$this-&gt;DBConn-&gt;query($sql,$params,$sqltypes);","The query method of the DBConnection class simply calls the ingres_query() function and adds the link parameter.","Note: You can use more than one placeholder, as you can see in the doSearch method of the class RoutesModel.","We put the call to query in a try catch block so we can issue a rollback if an exception is thrown after the query has failed. If no exception is caught, we issue a COMMIT to make the change available to others.","How a New Profile Is Added",
"profile_add.htm");
Page[13]=new Array("The remove button onClick event is handled by the JavaScript function delet Profile, which calls the xajax function xajax_deleteProfile() after the user has confirmed the deletion.","This function generates a new instance of ProfileModel and calls its delete-method.","In ProfileModel::delete, the following query is set up and sent to the server:","DELETE FROM user_profile WHERE up_email='&quot;.$email.&quot;'&quot;;","The selected value of the selectBox with name mailaddressText is used to identify the profile record for deletion. Its value is read in the function xajax_deleteProfile and passed to the delete method of ProfileModel.","How a Profile Is Removed",
"profile_remove.htm");
Page[14]=new Array("Clicking the Change button submits the forms data, which is evaluated in profile.php and put in a new array. The array is passed as an argument to the update method of the ProfileModel instance.","The update method generates the SQL to update the database, based on the elements in the array. Every element with an index different from &quot;up_image&quot; is attached to the string. For the value of the column &quot;up_image,&quot; the placeholder &quot;?&quot; is attached.","If all inputs have values, the following SQL command is executed:","UPDATE user_profile","SET","&nbsp;&nbsp;&nbsp;&nbsp;up_last = &quot;.$credits['up_last'].&quot;,","&nbsp;&nbsp;&nbsp;&nbsp;up_first = $credits['up_first'].&quot;,","&nbsp;&nbsp;&nbsp;&nbsp;up_email = &quot;.$credits['up_email'].&quot;,","&nbsp;&nbsp;&nbsp;&nbsp;up_airport = &quot;.$credits['up-airport'].&quot;,","&nbsp;&nbsp;&nbsp;&nbsp;up_image = ?","WHERE up_email = &quot;.$credits['up_email']","If no image was uploaded, the following query is assembled:","UPDATE user_profile","SET","&nbsp;&nbsp;&nbsp;&nbsp;up_last = &quot;.$credits['up_last'].&quot;,","&nbsp;&nbsp;&nbsp;&nbsp;up_first = &quot;.$credits['up_first'].&quot;,","&nbsp;&nbsp;&nbsp;&nbsp;up_email = &quot;.$credits['up_email'].&quot;,","&nbsp;&nbsp;&nbsp;&nbsp;up_airport = &quot;.$credits['up_atirport']","WHERE up_email = ?","But if an image was uploaded, a parameter array is composed and the mapping types specified. Then the query is executed:","//if a picture has been uploaded we will get the binary contents   ","//into a php variable","$handle = fopen($credits['up_image'],&quot;rB&quot;);","$image = stream_get_contents($handle);","fclose($handle);","//now we need to say that the variable $image has binary content","$sqltypes = &quot;B&quot;; // B stands for LONG BINARY","//here we created our parameter array to pass to the query method","$params = array(&quot;up_image&quot; =&gt; $image);","//execute the query","$this-&gt;DBConn-&gt;query($sql,$params,$sqltypes);","If no image is given, the query is sent to the database:","$this-&gt;DBConn-&gt;query($sql);","If an exception is caught during query execution, we rollback our work to the last committed point. If not, we commit.","How a Profile Is Changed",
"profile_change.htm");
Page[15]=new Array("The Connect function lets you connect to a data source. ","The Ingres Instance Data Source form is used to change the connection parameters in the session from which the connection string is assembled in DBConnection.","The parameters in the connection string are as follows: ","Server","Host Name","Specifies the name or address of the target host. Ingres uses the server name &quot;(local)&quot; for servers on the local host. If you want to connect to a different host in the network, you should enter the host's network name.","Instance name","Specifies the unique identifier for the Ingres instance. This name is specified during installation. ","The default instance name is Ingres II. The instance ID portion of the name consists of two characters: the first must be alphabetic, the second alphanumeric. The default is II.","To connect to a remote instance, ask your system administrator for the instance name.  ","Credentials","Login credentials are required only when connecting to a remote Ingres database or connecting with different credentials. ","User ID","The user ID of the user connecting to the Ingres instance. ","Password","The password associated with the specified user ID for connecting to the Ingres instance.","Database","Target database name. The name of the demonstration database is demodb. The database is installed when Ingres is installed. ","Default Source","The credentials for the default source are configured in LocalSettings.php. Simply change the values of the constants defined there. ","More information","How a Connection Is Made","Ingres Instance Data Source Form",
"instance_form.htm");
Page[16]=new Array("The Change button onClick event is handled by the xajax function changeConnectionProfile in connect.ajax.php.","The event handler performs the following tasks:","Tests each of the instance form controls for a value.","Extracts the values from the instance form controls.","Saves the values in the session variables.","Sets cookies for the appropriate values if the user wants to make the connection definition the default.","The next time a new instance of DBConnection is created, the constructor of DBConnection assembles the connection string from the session variables. The connection string uses a vnode definition. For details, see the Connectivity Guide.","if(isset($_SESSION['host']) &amp;&amp; $_SESSION['host'] != &quot;(local)&quot;)","{","&nbsp;&nbsp;&nbsp;&nbsp;$connectString = &quot;@&quot;;","&nbsp;&nbsp;&nbsp;&nbsp;$connectString .= $_SESSION['host'].&quot;,&quot;;","&nbsp;&nbsp;&nbsp;&nbsp;$connectString .= &quot;tcp_ip,&quot;;","&nbsp;&nbsp;&nbsp;&nbsp;$connectString .= $_SESSION['instance'];","&nbsp;&nbsp;&nbsp;&nbsp;$connectString .= [&quot;.$_SESSION['user'].&quot;,&quot;.$_SESSION['password'].&quot;]&quot;;","&nbsp;&nbsp;&nbsp;&nbsp;$connectString .= &quot;::&quot;.$_SESSION['database'];","How a Connection Is Made",
"connection.htm");
var PageCount=17;
function search(SearchWord){
var Result="";
var NrRes=0;
Result='<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n';
Result+="<html>\n";
Result+="<head>\n";
Result+="<title>Search Results</title>\n";
Result+="<meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'>\n";
Result+='<script language="javascript" type="text/javascript" charset="ISO-8859-1" src="dhtml_search.js"></script>\n';
Result+='<link rel="stylesheet" type="text/css" href="stylesheet.css">\n';
Result+="<style type='text/css'>\n";
Result+=".searchDetails {font-family:verdana; font-size:8pt; font-weight:bold}\n";
Result+=".searchResults {font-family:verdana; font-size:8pt}\n";
Result+="</style>\n";
Result+="</head>\n";
Result+="<body onload='javascript:document.SearchForm.SearchText.focus()'>\n";
Result+='<table class="searchDetails" border="0" cellspacing="0" cellpadding="2" width="100%">\n';
Result+='<tr><td>Enter a keyword or phrase</td></tr>';
Result+='<tr><td>';
Result+='<form name="SearchForm" action="javascript:search(document.SearchForm.SearchText.value)">';
if(SearchWord.length>=1){
   while(SearchWord.indexOf("<")>-1 || SearchWord.indexOf(">")>-1 || SearchWord.indexOf('"')>-1){
       SearchWord=SearchWord.replace("<","&lt;").replace(">","&gt;").replace('"',"&quot;");
   }
}
Result+='<input type="text" name="SearchText" size="25" value="' + SearchWord + '" />';
Result+='&nbsp;<input type="submit" value="&nbsp;Go&nbsp;"/></form>';
Result+='</td></tr></table>\n';

if(SearchWord.length>=1){
   SearchWord=SearchWord.toLowerCase();
   this.status="Searching, please wait...";
   Result+="<table border='0' cellpadding='5' class='searchResults' width='100%'>";
   for(j=0;j<PageCount;j++){
       k=Page[j].length-1;
       for(i=0;i<k;i++){
           WordPos=Page[j][i].toLowerCase().indexOf(SearchWord);
           if(WordPos>-1){
               FoundWord=Page[j][i].substr(WordPos,SearchWord.length);
               NrRes++;
               Result+="<tr><td>";
               Result+="<a target='BODY' href='"+Page[j][k]+"'>"+Page[j][k-1].replace(FoundWord,FoundWord.bold())+"</a><br/>\n";

               if(i<k-1){
                   if(Page[j][i].length>350){
                       Result+="..."+Page[j][i].substr(WordPos-100,200+FoundWord.length).replace(FoundWord,FoundWord.bold())+"...\n";
                   }
                   else{
                       Result+=Page[j][i].replace(FoundWord,FoundWord.bold())+"\n";
                   }
               }
               Result+="</td></tr>";
               break;
           }
       }
   }
   Result+="</table>";
   Result+="<p class='searchDetails'>&nbsp;" + NrRes + " result(s) found.</p>";
}

Result+="</body></html>";
this.status="";
this.document.open();
this.document.write(Result);
this.document.close();
}
