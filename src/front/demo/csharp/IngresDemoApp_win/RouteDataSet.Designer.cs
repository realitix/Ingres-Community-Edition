//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace IngresDemoApp {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RouteDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RouteDataSet : global::System.Data.DataSet {
        
        private routeDataTable tableroute;
        
        private updateRouteDataTable tableupdateRoute;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RouteDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RouteDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["route"] != null)) {
                    base.Tables.Add(new routeDataTable(ds.Tables["route"]));
                }
                if ((ds.Tables["updateRoute"] != null)) {
                    base.Tables.Add(new updateRouteDataTable(ds.Tables["updateRoute"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public routeDataTable route {
            get {
                return this.tableroute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public updateRouteDataTable updateRoute {
            get {
                return this.tableupdateRoute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RouteDataSet cln = ((RouteDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["route"] != null)) {
                    base.Tables.Add(new routeDataTable(ds.Tables["route"]));
                }
                if ((ds.Tables["updateRoute"] != null)) {
                    base.Tables.Add(new updateRouteDataTable(ds.Tables["updateRoute"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableroute = ((routeDataTable)(base.Tables["route"]));
            if ((initTable == true)) {
                if ((this.tableroute != null)) {
                    this.tableroute.InitVars();
                }
            }
            this.tableupdateRoute = ((updateRouteDataTable)(base.Tables["updateRoute"]));
            if ((initTable == true)) {
                if ((this.tableupdateRoute != null)) {
                    this.tableupdateRoute.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RouteDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/RouteDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableroute = new routeDataTable();
            base.Tables.Add(this.tableroute);
            this.tableupdateRoute = new updateRouteDataTable();
            base.Tables.Add(this.tableupdateRoute);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeroute() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeupdateRoute() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RouteDataSet ds = new RouteDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void routeRowChangeEventHandler(object sender, routeRowChangeEvent e);
        
        public delegate void updateRouteRowChangeEventHandler(object sender, updateRouteRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class routeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnrt_airline;
            
            private global::System.Data.DataColumn columnal_iatacode;
            
            private global::System.Data.DataColumn columnrt_flight_num;
            
            private global::System.Data.DataColumn columnrt_depart_from;
            
            private global::System.Data.DataColumn columnrt_arrive_to;
            
            private global::System.Data.DataColumn columnrt_depart_at;
            
            private global::System.Data.DataColumn columnrt_arrive_at;
            
            private global::System.Data.DataColumn columnrt_arrive_offset;
            
            private global::System.Data.DataColumn columnrt_flight_day;
            
            private global::System.Data.DataColumn columnal_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeDataTable() {
                this.TableName = "route";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal routeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected routeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_airlineColumn {
                get {
                    return this.columnrt_airline;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn al_iatacodeColumn {
                get {
                    return this.columnal_iatacode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_flight_numColumn {
                get {
                    return this.columnrt_flight_num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_depart_fromColumn {
                get {
                    return this.columnrt_depart_from;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_arrive_toColumn {
                get {
                    return this.columnrt_arrive_to;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_depart_atColumn {
                get {
                    return this.columnrt_depart_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_arrive_atColumn {
                get {
                    return this.columnrt_arrive_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_arrive_offsetColumn {
                get {
                    return this.columnrt_arrive_offset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_flight_dayColumn {
                get {
                    return this.columnrt_flight_day;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn al_nameColumn {
                get {
                    return this.columnal_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow this[int index] {
                get {
                    return ((routeRow)(this.Rows[index]));
                }
            }
            
            public event routeRowChangeEventHandler routeRowChanging;
            
            public event routeRowChangeEventHandler routeRowChanged;
            
            public event routeRowChangeEventHandler routeRowDeleting;
            
            public event routeRowChangeEventHandler routeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrouteRow(routeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow AddrouteRow(string rt_airline, string al_iatacode, int rt_flight_num, string rt_depart_from, string rt_arrive_to, System.DateTime rt_depart_at, System.DateTime rt_arrive_at, sbyte rt_arrive_offset, string rt_flight_day, string al_name) {
                routeRow rowrouteRow = ((routeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        rt_airline,
                        al_iatacode,
                        rt_flight_num,
                        rt_depart_from,
                        rt_arrive_to,
                        rt_depart_at,
                        rt_arrive_at,
                        rt_arrive_offset,
                        rt_flight_day,
                        al_name};
                rowrouteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrouteRow);
                return rowrouteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow FindByrt_airlinert_flight_numrt_flight_day(string rt_airline, int rt_flight_num, string rt_flight_day) {
                return ((routeRow)(this.Rows.Find(new object[] {
                            rt_airline,
                            rt_flight_num,
                            rt_flight_day})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                routeDataTable cln = ((routeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new routeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrt_airline = base.Columns["rt_airline"];
                this.columnal_iatacode = base.Columns["al_iatacode"];
                this.columnrt_flight_num = base.Columns["rt_flight_num"];
                this.columnrt_depart_from = base.Columns["rt_depart_from"];
                this.columnrt_arrive_to = base.Columns["rt_arrive_to"];
                this.columnrt_depart_at = base.Columns["rt_depart_at"];
                this.columnrt_arrive_at = base.Columns["rt_arrive_at"];
                this.columnrt_arrive_offset = base.Columns["rt_arrive_offset"];
                this.columnrt_flight_day = base.Columns["rt_flight_day"];
                this.columnal_name = base.Columns["al_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrt_airline = new global::System.Data.DataColumn("rt_airline", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_airline);
                this.columnal_iatacode = new global::System.Data.DataColumn("al_iatacode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnal_iatacode);
                this.columnrt_flight_num = new global::System.Data.DataColumn("rt_flight_num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_flight_num);
                this.columnrt_depart_from = new global::System.Data.DataColumn("rt_depart_from", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_depart_from);
                this.columnrt_arrive_to = new global::System.Data.DataColumn("rt_arrive_to", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_arrive_to);
                this.columnrt_depart_at = new global::System.Data.DataColumn("rt_depart_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_depart_at);
                this.columnrt_arrive_at = new global::System.Data.DataColumn("rt_arrive_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_arrive_at);
                this.columnrt_arrive_offset = new global::System.Data.DataColumn("rt_arrive_offset", typeof(sbyte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_arrive_offset);
                this.columnrt_flight_day = new global::System.Data.DataColumn("rt_flight_day", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_flight_day);
                this.columnal_name = new global::System.Data.DataColumn("al_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnal_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrt_airline,
                                this.columnrt_flight_num,
                                this.columnrt_flight_day}, true));
                this.columnrt_airline.AllowDBNull = false;
                this.columnrt_flight_num.AllowDBNull = false;
                this.columnrt_depart_from.AllowDBNull = false;
                this.columnrt_arrive_to.AllowDBNull = false;
                this.columnrt_depart_at.AllowDBNull = false;
                this.columnrt_arrive_at.AllowDBNull = false;
                this.columnrt_arrive_offset.AllowDBNull = false;
                this.columnrt_flight_day.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow NewrouteRow() {
                return ((routeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new routeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(routeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.routeRowChanged != null)) {
                    this.routeRowChanged(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.routeRowChanging != null)) {
                    this.routeRowChanging(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.routeRowDeleted != null)) {
                    this.routeRowDeleted(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.routeRowDeleting != null)) {
                    this.routeRowDeleting(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverouteRow(routeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RouteDataSet ds = new RouteDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "routeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class updateRouteDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnrt_airline;
            
            private global::System.Data.DataColumn columnrt_flight_num;
            
            private global::System.Data.DataColumn columnrt_depart_from;
            
            private global::System.Data.DataColumn columnrt_arrive_to;
            
            private global::System.Data.DataColumn columnrt_depart_at;
            
            private global::System.Data.DataColumn columnrt_arrive_at;
            
            private global::System.Data.DataColumn columnrt_arrive_offset;
            
            private global::System.Data.DataColumn columnrt_flight_day;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateRouteDataTable() {
                this.TableName = "updateRoute";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal updateRouteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected updateRouteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_airlineColumn {
                get {
                    return this.columnrt_airline;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_flight_numColumn {
                get {
                    return this.columnrt_flight_num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_depart_fromColumn {
                get {
                    return this.columnrt_depart_from;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_arrive_toColumn {
                get {
                    return this.columnrt_arrive_to;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_depart_atColumn {
                get {
                    return this.columnrt_depart_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_arrive_atColumn {
                get {
                    return this.columnrt_arrive_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_arrive_offsetColumn {
                get {
                    return this.columnrt_arrive_offset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rt_flight_dayColumn {
                get {
                    return this.columnrt_flight_day;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateRouteRow this[int index] {
                get {
                    return ((updateRouteRow)(this.Rows[index]));
                }
            }
            
            public event updateRouteRowChangeEventHandler updateRouteRowChanging;
            
            public event updateRouteRowChangeEventHandler updateRouteRowChanged;
            
            public event updateRouteRowChangeEventHandler updateRouteRowDeleting;
            
            public event updateRouteRowChangeEventHandler updateRouteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddupdateRouteRow(updateRouteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateRouteRow AddupdateRouteRow(string rt_airline, int rt_flight_num, string rt_depart_from, string rt_arrive_to, System.DateTime rt_depart_at, System.DateTime rt_arrive_at, sbyte rt_arrive_offset, string rt_flight_day) {
                updateRouteRow rowupdateRouteRow = ((updateRouteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        rt_airline,
                        rt_flight_num,
                        rt_depart_from,
                        rt_arrive_to,
                        rt_depart_at,
                        rt_arrive_at,
                        rt_arrive_offset,
                        rt_flight_day};
                rowupdateRouteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowupdateRouteRow);
                return rowupdateRouteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateRouteRow FindByrt_airlinert_flight_numrt_flight_day(string rt_airline, int rt_flight_num, string rt_flight_day) {
                return ((updateRouteRow)(this.Rows.Find(new object[] {
                            rt_airline,
                            rt_flight_num,
                            rt_flight_day})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                updateRouteDataTable cln = ((updateRouteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new updateRouteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrt_airline = base.Columns["rt_airline"];
                this.columnrt_flight_num = base.Columns["rt_flight_num"];
                this.columnrt_depart_from = base.Columns["rt_depart_from"];
                this.columnrt_arrive_to = base.Columns["rt_arrive_to"];
                this.columnrt_depart_at = base.Columns["rt_depart_at"];
                this.columnrt_arrive_at = base.Columns["rt_arrive_at"];
                this.columnrt_arrive_offset = base.Columns["rt_arrive_offset"];
                this.columnrt_flight_day = base.Columns["rt_flight_day"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrt_airline = new global::System.Data.DataColumn("rt_airline", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_airline);
                this.columnrt_flight_num = new global::System.Data.DataColumn("rt_flight_num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_flight_num);
                this.columnrt_depart_from = new global::System.Data.DataColumn("rt_depart_from", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_depart_from);
                this.columnrt_arrive_to = new global::System.Data.DataColumn("rt_arrive_to", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_arrive_to);
                this.columnrt_depart_at = new global::System.Data.DataColumn("rt_depart_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_depart_at);
                this.columnrt_arrive_at = new global::System.Data.DataColumn("rt_arrive_at", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_arrive_at);
                this.columnrt_arrive_offset = new global::System.Data.DataColumn("rt_arrive_offset", typeof(sbyte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_arrive_offset);
                this.columnrt_flight_day = new global::System.Data.DataColumn("rt_flight_day", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrt_flight_day);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("updateRouteKey1", new global::System.Data.DataColumn[] {
                                this.columnrt_airline,
                                this.columnrt_flight_num,
                                this.columnrt_flight_day}, true));
                this.columnrt_airline.AllowDBNull = false;
                this.columnrt_flight_num.AllowDBNull = false;
                this.columnrt_flight_day.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateRouteRow NewupdateRouteRow() {
                return ((updateRouteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new updateRouteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(updateRouteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.updateRouteRowChanged != null)) {
                    this.updateRouteRowChanged(this, new updateRouteRowChangeEvent(((updateRouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.updateRouteRowChanging != null)) {
                    this.updateRouteRowChanging(this, new updateRouteRowChangeEvent(((updateRouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.updateRouteRowDeleted != null)) {
                    this.updateRouteRowDeleted(this, new updateRouteRowChangeEvent(((updateRouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.updateRouteRowDeleting != null)) {
                    this.updateRouteRowDeleting(this, new updateRouteRowChangeEvent(((updateRouteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveupdateRouteRow(updateRouteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RouteDataSet ds = new RouteDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "updateRouteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class routeRow : global::System.Data.DataRow {
            
            private routeDataTable tableroute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal routeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableroute = ((routeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_airline {
                get {
                    return ((string)(this[this.tableroute.rt_airlineColumn]));
                }
                set {
                    this[this.tableroute.rt_airlineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string al_iatacode {
                get {
                    try {
                        return ((string)(this[this.tableroute.al_iatacodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'al_iatacode\' in table \'route\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableroute.al_iatacodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int rt_flight_num {
                get {
                    return ((int)(this[this.tableroute.rt_flight_numColumn]));
                }
                set {
                    this[this.tableroute.rt_flight_numColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_depart_from {
                get {
                    return ((string)(this[this.tableroute.rt_depart_fromColumn]));
                }
                set {
                    this[this.tableroute.rt_depart_fromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_arrive_to {
                get {
                    return ((string)(this[this.tableroute.rt_arrive_toColumn]));
                }
                set {
                    this[this.tableroute.rt_arrive_toColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime rt_depart_at {
                get {
                    return ((global::System.DateTime)(this[this.tableroute.rt_depart_atColumn]));
                }
                set {
                    this[this.tableroute.rt_depart_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime rt_arrive_at {
                get {
                    return ((global::System.DateTime)(this[this.tableroute.rt_arrive_atColumn]));
                }
                set {
                    this[this.tableroute.rt_arrive_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sbyte rt_arrive_offset {
                get {
                    return ((sbyte)(this[this.tableroute.rt_arrive_offsetColumn]));
                }
                set {
                    this[this.tableroute.rt_arrive_offsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_flight_day {
                get {
                    return ((string)(this[this.tableroute.rt_flight_dayColumn]));
                }
                set {
                    this[this.tableroute.rt_flight_dayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string al_name {
                get {
                    if (this.Isal_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableroute.al_nameColumn]));
                    }
                }
                set {
                    this[this.tableroute.al_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isal_iatacodeNull() {
                return this.IsNull(this.tableroute.al_iatacodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setal_iatacodeNull() {
                this[this.tableroute.al_iatacodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isal_nameNull() {
                return this.IsNull(this.tableroute.al_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setal_nameNull() {
                this[this.tableroute.al_nameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class updateRouteRow : global::System.Data.DataRow {
            
            private updateRouteDataTable tableupdateRoute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal updateRouteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableupdateRoute = ((updateRouteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_airline {
                get {
                    return ((string)(this[this.tableupdateRoute.rt_airlineColumn]));
                }
                set {
                    this[this.tableupdateRoute.rt_airlineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int rt_flight_num {
                get {
                    return ((int)(this[this.tableupdateRoute.rt_flight_numColumn]));
                }
                set {
                    this[this.tableupdateRoute.rt_flight_numColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_depart_from {
                get {
                    try {
                        return ((string)(this[this.tableupdateRoute.rt_depart_fromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rt_depart_from\' in table \'updateRoute\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateRoute.rt_depart_fromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_arrive_to {
                get {
                    try {
                        return ((string)(this[this.tableupdateRoute.rt_arrive_toColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rt_arrive_to\' in table \'updateRoute\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateRoute.rt_arrive_toColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime rt_depart_at {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableupdateRoute.rt_depart_atColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rt_depart_at\' in table \'updateRoute\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateRoute.rt_depart_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime rt_arrive_at {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableupdateRoute.rt_arrive_atColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rt_arrive_at\' in table \'updateRoute\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateRoute.rt_arrive_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sbyte rt_arrive_offset {
                get {
                    try {
                        return ((sbyte)(this[this.tableupdateRoute.rt_arrive_offsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rt_arrive_offset\' in table \'updateRoute\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateRoute.rt_arrive_offsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rt_flight_day {
                get {
                    return ((string)(this[this.tableupdateRoute.rt_flight_dayColumn]));
                }
                set {
                    this[this.tableupdateRoute.rt_flight_dayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrt_depart_fromNull() {
                return this.IsNull(this.tableupdateRoute.rt_depart_fromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrt_depart_fromNull() {
                this[this.tableupdateRoute.rt_depart_fromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrt_arrive_toNull() {
                return this.IsNull(this.tableupdateRoute.rt_arrive_toColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrt_arrive_toNull() {
                this[this.tableupdateRoute.rt_arrive_toColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrt_depart_atNull() {
                return this.IsNull(this.tableupdateRoute.rt_depart_atColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrt_depart_atNull() {
                this[this.tableupdateRoute.rt_depart_atColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrt_arrive_atNull() {
                return this.IsNull(this.tableupdateRoute.rt_arrive_atColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrt_arrive_atNull() {
                this[this.tableupdateRoute.rt_arrive_atColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrt_arrive_offsetNull() {
                return this.IsNull(this.tableupdateRoute.rt_arrive_offsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrt_arrive_offsetNull() {
                this[this.tableupdateRoute.rt_arrive_offsetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class routeRowChangeEvent : global::System.EventArgs {
            
            private routeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRowChangeEvent(routeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class updateRouteRowChangeEvent : global::System.EventArgs {
            
            private updateRouteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateRouteRowChangeEvent(updateRouteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateRouteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591