/*
**	Copyright (c) 2004 Actian Corporation
**	All rights reserved.
*/

# include	<compat.h>
# include	<cv.h>
# include	<lo.h>
# include	<ut.h>
# include	<st.h>
# include	<me.h>
# include	<er.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
# include	<fe.h>
# include	"decls.h"
# include	"vffiles.h"
## include	<ooclass.qsh>
## include	<oosymbol.qsh>
## include	<uigdata.qsh>
# include	<uf.h>
# include	<ug.h>
# include	<ui.h>
# include	"ervf.h"
# include	"oodefine.h"


/**
** Name: writefrm.qsc - writes out a frame to the database
**
** Description:
**
** Defines:
**	writefrm()
**	vffld_sort(frame)
**	vfdelfiles()
**	vfqbfexists(formname)
**	wrqbfname(frame)
**	vfwrFrm()
**	checkFlds()
**	vflfind()
**	vfwfind()
**
** History:
**	05/06/87 (dkh) - Changed for generic catalogs.
**	05/18/87 (dkh) - Updated for OOid*() changes.
**	05/21/87 (dkh) - Integrated VMS changes.
**	05/30/87 (dkh) - Changed transaction processing.
**	06/09/87 (dkh) - Deleted references to VfDict and VfDstab.
**	07/22/87 (dkh) - Fixed jup bug 531.
**	08/14/87 (dkh) - ER changes.
**	10/17/87 (dkh) - Changed to not use single letter range vars.
**	10/25/87 (dkh) - Error message cleanup.
**	03-dec-87 (bruceb)
**		Changed to a qsc file; include qsh files.
**	12/19/87 (dkh) - Including .qsh instead of .qh headers.
**	22-dec-87 (sylviap)
**		Took out 'ifdef HACKFOR50'.
**		Changed QUEL to SQL statements.
**	07-jan-88 (sylviap)
**		Added code for gateway.  Copies form into database using
**		INSERT instead of COPY.  Took out all references to VFCF
**		(intermediate file for compiled forms).
**	07-jan-88 (sylviap)
**		Took out all transaction (savepoint) code in writefrm.
**		Necessary because OOSAVE also sets savepoints so cannot abort
**		the whole tranaction.  VIFRED will assume that OOSAVE will
**		handle all savepoints/aborting/rollback.
**	11-feb-88 (sylviap)
**		Added call to IIVFint_InitSub to init subseq to zero.
**	03/03/88 (dkh) - Changes to save routines called by OO.
**	12-may-88 (sylviap)
**		Changed string literal "now" to call UGcat_now() for
**		  date of qbfname creation.
**		Took checkFlds call out of vfwrFrm.  OOsave will now call.
** 		  CheckFlds needs to be out the transaction block since it is
**		  interactive with the user and can lock up the system catalogs
**		  indefinately.
**		##  Did NOT add any SQL COMMIT after the OO, FE and UI calls
**		  to release system catalog locks because all routines are
**		  called by OO and already in the middle of a transaction
**		  block. ##
**	06/21/88 (dkh) - Fixed to handle form size in a saner manner.
**	09/14/88 (tom) - Fixed vflfind so it returns a meaningfull value
**			even if we don't find any features on the form.
**			(this has been a problem since before 61.1)
**	09-nov-88 (marian)
**		Modified column names for extended catalogs to allow them
**		to work with gateways.
**	01/30/89 (dkh) - Added code to put correct version number into
**			 forms structure.
**	04/19/89 (dkh) - Put in generic error changes.
**	24-apr-89 (bruceb)
**		No longer any nonseq fields to save.
**	31-may-89 (bruceb)
**		Free up the STalloc'd memory.
**	09/15/89 (dkh) - Fixed bug 7370.
**	10/09/89 (dkh) - Removed MEfree'ing of  memory allocated for
**			 an OO object.  Otherwise, object won't be saved
**			 into DB.
**	03-nov-89 (bruceb)
**		Removed 'isProcess' code; multi-process FEs never used.
**	12/23/89 (dkh) - Added support for owner.table.
**	28-aug-1990 (Joe)
**	    Changed references to IIUIgdata to the UIDBDATA structure
**	    returned from IIUIdbdata().
**	08/31/90 (dkh) - Integrated porting change ingres6202p/131116.
**	10/19/90 (dkh) - Fixed bug 33920.
**	12/05/90 (dkh) - Fixed code to handle screen updates correctly
**			 if an error occurs during save sequence.
**	06/28/92 (dkh) - Added support for rulers in vifred/rbf.
**	5-aug-92(fraser)
**		Changed _flushAll to ii_flushAll.
**	08/31/93 (dkh) - Fixed up compiler complaints due to prototyping.
**      11-jan-1996 (toumi01; from 1.1 axp_osf port)
**              Added kchins's changes (from 6.4) for axp_osf
**              10/15/93 (kchin)
**              Cast argument to PTR when calling IIOOidObject(), this
**              is due to the change of datatype of variable parameters
**              in IIOOidObject() routine itself.  The change is made in
**              vfqbfexists().
**              18-oct-1993 (kchin)
**              Since the return type of OOsnd() has been changed to PTR,
**              when being called in wrqbfname(), its return
**              type needs to be cast to the proper datatype.
**      12-Jul-1999 (hweho01)
**              Included oodefine.h header file, it contains the function     
**              prototype of OOsnd(). Without the explicit declaration,
**              the default int return value for a function will  
**              truncate a 64-bit address on ris_u64 platform. 
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
*/

/* # define's */
# define	START_TRANSACTION	FALSE
# define	COMMIT_TRANSACTION	TRUE
# define	ROLLBACK_ENTIRE_XACT	TRUE
# define	ALL_BACKENDS		FALSE

# define	TO_DB		FALSE
# define	TO_FILE		TRUE

/* extern's */
# ifndef FORRBF
GLOBALREF	bool		vfuseiicomp;
GLOBALREF	LOCATION	VFFLD, VFTRD;

FUNC_EXTERN	VOID	vfallfiles();
FUNC_EXTERN	STATUS	vfopfiles();
FUNC_EXTERN	VOID	vfclfiles();
FUNC_EXTERN	STATUS	vfwrFrm();
FUNC_EXTERN	STATUS	dumpFrm();
FUNC_EXTERN	STATUS	IIVFdtb_DumpTab();
FUNC_EXTERN	STATUS	IIVFcfd_CopyFds();
FUNC_EXTERN	STATUS	IIVFctr_CopyTrim();
FUNC_EXTERN	STATUS	IIVFccf_CompFrm();
FUNC_EXTERN	STATUS	vfcptrms();
FUNC_EXTERN	STATUS	IIVFint_InitSub();
FUNC_EXTERN	i4	IIUIdml();
FUNC_EXTERN	char	*UGcat_now();

# endif /* FORRBF */

/*
**  Flag indicating if form is being saved with a new name.
*/
GLOBALDEF	bool	IIVFnnNewName = FALSE;

# ifdef VMS	/* Forms are output exclusively in C on Unix and CMS. */
# define MACRO	ERx("-m")
# else
# define MACRO	ERx("")
# endif

/* static's */
static	i4	qn_exists = 0;
static	bool	qbfnm_needed = FALSE;

EXEC SQL BEGIN DECLARE SECTION;
	static	OOID	id_qbfname = -1;
	static	i4	qf_type = 0;
	static	char	qf_relnm[FE_MAXNAME + 2 + 1] = {0};
	static	char	qf_towner[FE_MAXNAME + 2 + 1] = {0};
	static	i2	qf_null_towner = 0;
EXEC SQL END DECLARE SECTION;

/*{
** Name: writefrm - writes a frame to the database
**
** Description:
**	Writes a frame to the database.  writefrm is called from OOsave where
**	a transaction is established.
**
** Inputs:
**	None.
**
** Outputs:
**	None.
**
** Returns:
**	STATUS	OK	- form is saved in database
**		FAIL	- error while saving form, form is not saved
**
** Side Effects:
**
** History:
*/

STATUS
writefrm()
{
# ifndef FORRBF
	STATUS	stat;
	i4	save_y;
	i4	save_x;

	save_y = frame->frmaxy;
	save_x = frame->frmaxx;

	frame->frmaxy = endFrame;

	/*
	**  Adding one since endxFrm is ZERO based and is the last
	**  column that IS part of the form.
	*/
	frame->frmaxx = endxFrm + 1;

	frame->frversion = FRMVERSION;

	if ((stat = vfwrFrm()) == OK) /* write the form out */
		noChanges = TRUE;

	/* restore old values for vifred operations */
	frame->frmaxy = save_y;
	frame->frmaxx = save_x;

	return(stat);
# endif
}

# ifndef FORRBF
/*
**  Sort the fields of a frame by sequence number.
**  This algorithm assumes that the sequence numbers are unique and go
**  from 0 to n-1 where n is the total number of fields.
*/

vffld_sort(frm)
FRAME	*frm;
{
	i4	n;
	i4	i;
	i4	j;
	FIELD	*x;
	FIELD	**a;

	a = frm->frfld;
	n = frm->frfldno;

	for (i = 0; i < n - 1; i++)
	{
		while((j = a[i]->flseq) != i)
		{
			x = a[j];
			a[j] = a[i];
			a[i] = x;
		}
	}
}



vfdelfiles()
{
	LOdelete(&VFFLD);
	LOdelete(&VFTRD);
}
# endif




# ifndef FORRBF


/*
** History:
**	28-aug-1990 (Joe)
**	    Changed references to IIUIgdata to the UIDBDATA structure
**	    returned from IIUIdbdata().
*/
STATUS
vfqbfexists(formname)
 char *formname;
{

EXEC SQL BEGIN DECLARE SECTION;
	char	*torgname;
	char	tname[FE_MAXNAME + 2 + 1];
	i4	type;
	char	towner[FE_MAXNAME + 2 + 1];
	i2	t_null_owner;
EXEC SQL END DECLARE SECTION;

	bool		found;
	char		pbuf[150];
	char		reply[100];
	i4		env = 0;
	i4		is_cur = 1;
	char		*cr_date;
	char		*alt_date;
	char		tbuf[100];
	char		*short_rem;
	char		*long_rem;
	char		*idname;
	char		*iduser;
	OOID		vfid_qbfn = OC_QBFNAME;
	STATUS		retval;
	UIDBDATA	*uidbdata;

	uidbdata = IIUIdbdata();
	qbfnm_needed = FALSE;
	id_qbfname = -1;
	if (vforigintype == OT_TABLE || vforigintype == OT_JOINDEF)
	{
		STcopy(vforgname, qf_relnm);
		if (*IIVFtoTblOwner == EOS)
		{
			qf_null_towner = -1;
			*qf_towner = EOS;
		}
		else
		{
			STcopy(IIVFtoTblOwner, qf_towner);
			qf_null_towner = 0;
		}
		qf_type = (vforigintype == OT_TABLE) ? 0 : 1;
	}
	else if ( vforigintype == OT_EDIT && !STequal(formname, vforgname) )
	{
		/*
		**  Check if a duplicate qbfname entry exists.
		*/
		found = FALSE;
		torgname = vforgname;
		if ( IIOOidCheck(&vfid_qbfn, &id_qbfname, torgname,
			uidbdata->user) == OK )
		{
			/*
			**  Entry found with same name.	 Now need to check
			**  if formname on entry is same as well.
			*/
			EXEC SQL SELECT relname, qbftype, relowner
				INTO :tname, :type, :towner:t_null_owner
				FROM ii_qbfnames
				WHERE object_id = :id_qbfname
				AND frname = :torgname;
			EXEC SQL BEGIN;
				found = TRUE;
				EXEC SQL ENDSELECT;
			EXEC SQL END;

			if (found)
			{
				STcopy(tname, qf_relnm);
				qf_type = type;
				if ((qf_null_towner = t_null_owner) == -1)
				{
					*qf_towner = EOS;
				}
				else
				{
					STcopy(towner, qf_towner);
				}
			}
			else
			{
				return(OK);
			}

		}
		else
		{
			return(OK);
		}
	}
	else
	{
		return(OK);
	}

	qbfnm_needed = TRUE;
	qn_exists = FALSE;
	id_qbfname = -1;
	if ( IIOOidCheck(&vfid_qbfn, &id_qbfname, formname,
		uidbdata->user) == OK )
	{
		qn_exists = TRUE;
		if (vforigintype != OT_EDIT || !STequal(formname, vforgname) )
		{
			IIUGerr(E_VF0106_QBFNAME_exists, UG_ERR_ERROR,
				1, formname);
			if (!IIUFver(ERget(S_VF0107_Do_you_still_want_to), 0))
			{
				return(FAIL);
			}
		}
	}
	else
	{
		/*
		**  Need to create new qbfname object.
		*/
		STprintf(tbuf, ERget(S_VF0108_Default_QBFName_entry), formname);
		short_rem = STalloc(tbuf);
		long_rem = STalloc(tbuf);
		idname = STalloc(formname);
		iduser = STalloc(uidbdata->user);
		cr_date = STalloc(UGcat_now());
		alt_date = cr_date;
		retval = IIOOidObject(OC_QBFNAME, &id_qbfname, idname, (PTR)env,
			iduser, (PTR)is_cur, short_rem, cr_date, alt_date, long_rem);
		if ( retval != OK )
		{
			IIUGerr(E_VF0109_Error_occurred_while,
				UG_ERR_ERROR, 0);
			return(FAIL);
		}
	}

	return(OK);
}


STATUS
wrqbfname(frame)
FRAME	*frame;
{

EXEC SQL BEGIN DECLARE SECTION;
	char		*formname;
	OOID		newid;
EXEC SQL END DECLARE SECTION;

	OO_OBJECT	*obj;
	i2		owner_null;

	formname = frame->frname;

	if (!qbfnm_needed)
	{
		return(OK);
	}
	if (qn_exists)
	{
		EXEC SQL UPDATE ii_qbfnames
			SET relname = :qf_relnm, qbftype = :qf_type,
			   	frname = :formname,
				relowner = :qf_towner:qf_null_towner
			WHERE object_id = :id_qbfname;
		if (FEinqerr())
		{
			return(FAIL);
		}
	}
	else
	{
		newid = (OOID)OOsnd(id_qbfname, ii_flushAll, 0);

		/*
		**  Turn write permission back on since OOsnd()
		**  will turn it off.
		*/
		iiuicw1_CatWriteOn();
		EXEC SQL INSERT INTO ii_qbfnames
			(object_id, relname, frname, qbftype, relowner)
			VALUES (:newid, :qf_relnm, :formname, :qf_type,
				:qf_towner:qf_null_towner);
		if (FEinqerr())
		{
			return(FAIL);
		}
	}
	return(OK);
}

/*{
** Name: vfwrFrm - saves the fields, non-sequenced fields and encoded form
**		   of a frame to the database
**
** Description:
**	Saves a frame to the database.  If running against an INGRES back-end,
**	the frame is dumped into intermediate files and then copied into the
**	database.  If running against a gateway, the frame is save directly to
**	the database.
**
** Inputs:
**	None.
**
** Outputs:
**	None.
**
**Returns:
**	STATUS	OK	- frame is saves successfully to database
**		FAIL	- error occurred, form is not saved to database.
**
** Side Effects:
**
** History:
**	<manual entries>
*/

STATUS
vfwrFrm()
{
	if (vfqbfexists(frame->frname) != OK)
	{
		return(FAIL);
	}

	vffld_sort(frame);

	iiuicw1_CatWriteOn();
	if (IIVFint_InitSub() != OK)
	{
		return(FAIL);
	}
	/*
	**  If not running against a gateway, then write out form
	**  to an intermediate files.  Do all file maintenance.
	*/

	if (IIUIdml() != UI_DML_GTWSQL)
	{
		if (!vfopfiles())
			return(FAIL);

		_VOID_ IIVFdfd_DumpFds(frame, frame->frfld, frame->frfldno,
			vfFldFile, TO_FILE);
		_VOID_ IIVFctr_CopyTrim(frame, vfTrFile, TO_FILE);

		vfclfiles();
	}

	if (frame->frfldno > 0)
	{
		if (IIUIdml() != UI_DML_GTWSQL)
		{
	      		if (vfcpflds(&VFFLD) != OK)
			{
				vfclfiles();
				vfdelfiles();
				return(FAIL);
			}
		}
	   	else
		{
	      		if (IIVFdfd_DumpFds(frame, frame->frfld,
	         		frame->frfldno, vfFldFile, TO_DB) != OK)
			{
				return(FAIL);
			}
		}
	}
	if (frame->frtrimno > 0)
	{
		if (IIUIdml() != UI_DML_GTWSQL)
		{
			if (vfcptrms(&VFTRD) != OK)
			{
				vfclfiles();
				vfdelfiles();
				return(FAIL);
			}
		}
		else
		{
		    	if (IIVFctr_CopyTrim(frame, vfTrFile, TO_DB) != OK)
			{
				return(FAIL);
			}
		}
	}
	/*
	** Copy out compiled  form.
	*/
	if (vfuseiicomp)
	{
		if (IIVFccf_CompFrm (frame) != OK)
		{
			goto error_exit;
		}
	}
	if (dumpFrm(frame) != OK)
	{
		goto error_exit;
	}
	if (wrqbfname(frame) != OK)
	{
	    error_exit:
		if (IIUIdml() != UI_DML_GTWSQL)
		{
			vfdelfiles();
		}
		return(FAIL);
	}
	iiuicw0_CatWriteOff();

	vfdelfiles();

	vforigintype = OT_EDIT;
	STcopy(frame->frname, vforgname);

	if (Vfformname != NULL && Vfcompile != NULL)
	{
		i4	rval;
		i4	mac;

		mac = (*MACRO != EOS ? 1 : 0);
		rval = IIcompfrm(Vfformname, frame, Vfcfsym, Vfcompile, mac);

		if (rval != OK)
			return(FAIL);
	}

	return(OK);
}
# endif


/*
** check the fields validation strings
*/

# ifndef FORRBF
STATUS
checkFlds(id, aptr)
OOID	id;
PTR	aptr;
{
	reg	FIELD	*fd;
	FLDHDR		*hdr;
	FLDTYPE		*type;
	TBLFLD		*tf;
	FLDCOL		*col;
	OO_OBJECT	*object;

	IIVFnnNewName = FALSE;

	object = (OO_OBJECT *) OOp(id);

	if (STbcompare(object->name, 0, frame->frname, 0, TRUE) != 0)
	{
		/*
		**  Name is different - Set flag so vfsvfrm() can remove any
		**  visibuild restriction bits.
		*/
		IIVFnnNewName = TRUE;
	}

	STcopy(object->name, frame->frname);
	CVlower(frame->frname);

	FTfrminvis();
	IIVTlf(frame, FALSE, FALSE);

	while (FDparse(frame))
	{
		fd = frame->frfld[frame->frcurfld];
		if (fd->fltag == FTABLE)
		{
			tf = fd->fld_var.fltblfld;
			col = tf->tfflds[tf->tfcurcol];
			hdr = &col->flhdr;
			type = &col->fltype;
		}
		else
		{
			hdr = FDgethdr(fd);
			type = FDgettype(fd);
		}
		valerrCom(hdr, type, FDpar_str());
		continue;
	}

	FTfrmvis();
	IIVTlf(frame, TRUE, FALSE);

	return(OK);
}
# endif



i4
vflfind()
{
	i4	y;

	for (y = endFrame - 1; y >= 0; y--)
	{
		if (line[y] != NULL)
		{
			return(y + 1);
		}
	}
	return (1);
}


i4
vfwfind()
{
	i4	i;
	i4	lx;
	i4	lastx = 0;
	VFNODE	*lt;
	VFNODE	**lp;
	POS	*ps;

	lp = line;
	for (i = 0; i < endFrame; i++, lp++)
	{
		for (lt = *lp; lt != NNIL; lt = vflnNext(lt, i))
		{
			if (lt->nd_pos->ps_begy == i)
			{
				ps = lt->nd_pos;
				lx = 0;
				switch(ps->ps_name)
				{
					case PSPECIAL:
						break;

					default:
						if (ps->ps_name == PBOX &&
							ps->ps_attr ==
							  IS_STRAIGHT_EDGE)
						{
							break;
						}
						lx = ps->ps_endx;
						break;
				}

				if (lx > lastx)
				{
					lastx = lx;
				}
			}
		}
	}

	return(lastx);
}
