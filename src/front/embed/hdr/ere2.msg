/*
**  Copyright (c) 2004 Actian Corporation
*/

/**
** Name:	ere2.msg -	Message file for class E2
**
** Description:
**	This file defines the messages for class E2.
**
** History:
**	27-aug-1987 (mark)
**		Created.
**	24-nov-1987 (neil)
**		Commented all errors.
**/

# define	_E2_CLASS	143



E_E20001_hpBADATTRIB	"PASCAL attribute conflict in declaration of size for '%0c'."

/*%
** Explanation:
**	The program has specified conflicting size attributes for this object.
**	For example the following declaration is erroneous because of the
**	attempt to extend the attribute size of the type 'smaller':
**
**		type
**			smaller = [byte] 1..100;
**		var
**			bigger  : [word] smaller;
**
** System Status:
**
** User Action:
*/

E_E20002_hpBADSUBRANG	"PASCAL subrange conflict.\n
Upper and lower bounds are not the same type or they are not an ordinal type."

/*%
** Explanation:
**	Both bounds of a subrange declaration must be of the same ordinal
**	type (single character or integer).  If the subrange bounds types
**	are different or if they are not ordinal types, the preprocessor will
**	use the type of the second bound and accept the usage of variables
**	declared with this subrange type.  This will cause an error in later
**	PASCAL compilation.
**
** System Status:
**
** User Action:
*/

E_E20003_hpBLOCK	"Mismatching statement at end of PASCAL subprogram.\n
Check balanced subprogram headers and END pairs."

/*%
** Explanation:
**
**	(ESQL)
**	You may have an EXEC SQL END statement that is not balanced by a
**	EXEC SQL LABEL statement.  These subprogram delimiters provide scoping
**	for PASCAL labels generated by the preprocessor.  If you had syntax
**	errors on the EXEC SQL LABEL statement then correct those errors and
**	repreprocess the file.
**
**	(EQUEL)
**	You may have an END statement that is not balanced by a subprogram
**	header (ie, PROGRAM, PROCEDURE, FUNCTION, or MODULE).  These subprogram
**	delimiters provide scoping for PASCAL variables and labels generated
**	by the preprocessor.  If you had any syntax errors on the subprogram
**	header statement, then correct those errors and repreprocess the file.
**
** System Status:
**
** User Action:
*/

E_E20004_hpDECLARE	"No ## DECLARE before first EQUEL statement '%0c'."

/*%
** Explanation:
**	(EQUEL)
**	You must issue the ## DECLARE statement before the first embedded
**	statement.  The preprocessor generates code that references procedures
**	and functions declared within a file included by the ## DECLARE
**	statement.  Without issuing the ## DECLARE statement, the PASCAL
**	compiler will not accept those references.
**
** System Status:
**
** User Action:
*/

E_E20005_hpDIMSBAD	"PASCAL character array '%0c' must be PACKED or VARYING."

/*%
** Explanation:
**	A string referenced in an embedded statement must be either a PACKED
**	ARRAY OF CHAR, a VARYING OF CHAR or a single CHAR.  You have used
**	a non-packed ARRAY OF CHAR as an embedded string variable.  Convert
**	the variable declaration to either PACKED or VARYING, or subscript
**	the array to reference only one element.
**
** System Status:
**
** User Action:
*/

E_E20006_hpEXTRASEMI	"Extraneous semicolon in PASCAL declaration ignored."

/*%
** Explanation:
**	Only one semicolon is allowed between components of a record
**	declaration.  The preprocessor ignores the extra semicolons.  You
**	should delete the extra semicolon in your source code.
**
** System Status:
**
** User Action:
*/

E_E20007_hpINDEX	"PASCAL dimension of '%0c' is %1c, but subscripted %2c times."

/*%
** Explanation:
**	You have not referenced the specified variable with the same number
**	of subscripts as the number of dimensions with which the variable
**	was declared.  This error indicates that you have failed to
**	subscript an array, or you have subscripted a non-array.  The
**	preprocessor does not parse declaration dimensions or subscript
**	expressions.
**
** System Status:
**
** User Action:
*/

E_E20008_hpINDIR	"Incorrect indirection of PASCAL variable '%0c'.\n
Variable is declared with indirection of %1c, but dereferenced (^) %2c time(s)."

/*%
** Explanation:
**	This error occurs when the address or value of a variable is
**	incorrectly expressed because of faulty indirection.  For example,
**	the name of an integer pointer has been given instead of the variable
**	that the pointer was pointing at.  Either redeclare the variable
**	with the intended indirection (and check any implicit indirection
**	in the type), or change its use in the current statement. 
**
** System Status:
**
** User Action:
*/

E_E20009_hpLBINC	"PASCAL Pass 2 failure on INCLUDE file.\n
The maximum INCLUDE nesting exceeded %0c."

/*%
** Explanation:
**	The PASCAL preprocessor must take a second pass in order to declare
**	implicitly generated labels.  If the source file referenced embedded
**	INCLUDE files, then the second pass needs to generate labels into
**	those files.  Consequently there is a maximum nexting limit of INCLUDE
**	files.  Try reorganizing your files to create a flatter source file
**	structure.
**
** System Status:
**
** User Action:
*/

E_E2000A_hpLBNONE	"No ## PROCEDURE for current scope but labels have been generated."

/*%
** Explanation:
**	(EQUEL - See hpLBSQNONE for ESQL)
**	The PASCAL preprocessor must take a second pass in order to declare
**	implicitly generated labels.  If labels were implicitly generated
**	then the preprocessor needs to know where to declare them on the second
**	pass.  That is why one must precede subprogram headers (PROGRAM,
**	PROCEDURE, FUNCTION and MODULE) with ##, or use the LABEL statement.
**	If you did not declare your subprogram header to the preprocessor, the
**	generated labels will be marked as undeclared by the PASCAL compiler.
**
** System Status:
**
** User Action:
*/

E_E2000B_hpLBPASS2	"PASCAL Pass 2 open file failure.\n
Cannot pass information from file '%0c' to '%1c'."

/*%
** Explanation:
**	The PASCAL preprocessor must take a second pass in order to declare
**	implicitly generated labels.  Because there is a temporary file
**	involved, and this file has a fixed name, you should avoid
**	running the preprocessor more than once in the same directory.
**	This error may also occur if the intermediate file disappeared, the
**	system protections of the current directory are too restrictive
**	or have changed, or if the original input file was moved between the
**	first and second pass of the preprocessor.
**
** System Status:
**
** User Action:
*/

E_E2000C_hpLBSYNC	"PASCAL Pass 2 file inconsistency.\n
Mismatching number of label markers in '%0c'."

/*%
** Explanation:
**	The PASCAL preprocessor must take a second pass in order to declare
**	implicitly generated labels.  There was a difference between the
**	number of label declaration sections the preprocessor expected to 
**	generate and the number of markers found in the intermediate file.
**	This may be caused by an embedded INCLUDE statement that requires
**	its own scope for label generation.  If there were nested INCLUDE
**	statements whose files required labels, try to flatten them out into
**	larger source files.
**
** System Status:
**
** User Action:
*/

E_E2000D_hpMISSING	"Missing PASCAL keyword '%0c' in declaration."

/*%
** Explanation:
**	You did not use the specified keyword, or you did not make the word
**	known to the preprocessor. If there are no other errors the
**	preprocessor will generate correct PASCAL code.
**
** System Status:
**
** User Action:
*/

E_E2000E_hpNESTUNIT	"Illegal nesting of PASCAL compilation units."

/*%
** Explanation:
**	(EQUEL)
**	You may not nest modules and programs within themselves or each
**	other.  Make sure you have placed the ## mark before the END
**	statement for programs and modules.
**
** System Status:
**
** User Action:
*/

E_E2000F_hpNOINDIR	"Can not use indirection (^) on an undeclared PASCAL variable '%0c'."

/*%
** Explanation:
**	You have used pointer indirection on a name that was not declared as
**	a PASCAL variable to the preprocessor.  If this really is a variable you
**	should make its declaration known to the preprocessor.
**
** System Status:
**
** User Action:
*/

E_E20010_hpNOSUBSCR	"Can not subscript ([]) an undeclared PASCAL variable '%0c'."

/*%
** Explanation:
**	You have used array subscription on a name that was not declared as
**	a PASCAL variable to the preprocessor.  If this really is a variable you
**	should make its declaration known to the preprocessor.
**
** System Status:
**
** User Action:
*/

E_E20011_hpNOTPACKED	"Can not subscript VARYING PASCAL variable '%0c'."

/*%
** Explanation:
**	Elements of a varying-length character string array cannot be passed
**	to the run-time system.  If you need to pass a single element then
**	declare the array as a plain array (not PACKED nor VARYING).
**
** System Status:
**
** User Action:
*/

E_E20012_hpNOTSCALTYP	"Scalar PASCAL type required for conformant schema bounds type."

/*%
** Explanation:
**	PASCAL requires that bounds expressions of conformant arrays be of
**	a scalar type.  You must choose a scalar type, such as a single
**	character or an integer.
**
** System Status:
**
** User Action:
*/

E_E20013_hpNOTVAR	"PASCAL object '%0c' is not a variable."

/*%
** Explanation:
**	You have used the specified name as an embedded variable, but you
**	have not declared it to the preprocessor.  This may also be a scope
**	problem.  Make sure you have typed the name correctly, declared the
**	variable to the preprocessor and have used it within its scope.
**
** System Status:
**
** User Action:
*/

E_E20014_hpOVERFLOW	"Too many comma separated names in declaration.\n
Maximum number of names is %0c."

/*%
** Explanation:
**	The declaration of a comma-separated list of names in a declaration
**	is too long.   For example:
**		
**		var
**			a, b, ..... N : Integer;
**
**	Try breaking up the declaration into groups.
**
** System Status:
**
** User Action:
*/

E_E20015_hpPARAM	"EQUEL/PASCAL does not support PARAM target lists."

/*%
** Explanation:
**	(EQUEL)
**	If you need to use PARAM target lists, then you should write this
**	subprogram in another host language (C, FORTRAN, PL/I) and link
**	that module with you PASCAL program.
**
** System Status:
**
** User Action:
*/

E_E20016_hpREDECLARE	"Reissue of ## DECLARE statement. Second time is ignored."

/*%
** Explanation:
**	The ## DECLARE statement should occur only once per module.  Placing
**	the statement after an EQUEL statement will also cause this error.
**
** System Status:
**
** User Action:
*/

E_E20017_hpSEMIMISS	"Missing semicolon (;) at end of PASCAL LABEL declaration list."

/*%
** Explanation:
**	(EQUEL)
**	Earlier version of EQUEL/PASCAL did not require the use of the
**	semicolon after the LABEL statement.  The preprocessor now requires
**	the terminating semicolon if you include a list of your own labels
**	with the LABEL statement.  If you do not include the semicolon, the
**	preprocessor will generate correct code, but you should still correct
**	the error.
**
** System Status:
**
** User Action:
*/

E_E20018_hpSTRUCTREF	"Last PASCAL record member referenced in '%0c' is unknown."

/*%
** Explanation:
**	The last record member referenced is not a member of the current
**	record.  Make sure you have spelled the member name correctly, and
**	that it is a member of the specified record.
**
** System Status:
**
** User Action:
*/

E_E20019_hpUNCLOSED	"Unclosed PASCAL block.\n
There are %0c unbalanced subprogram headers."

/*%
** Explanation:
**	The end of the file was reached with some program blocks left
**	open.  Make sure you have an END statement for each subprogram
**	header or embedded LABEL statement.
**	
**
** System Status:
**
** User Action:
*/

E_E2001A_hpUNDEF	"PASCAL %0c '%1c' is not yet defined.\n
An INTEGER is assumed."

/*%
** Explanation:
**	The specified TYPE or CONST name has not yet been declared.  Make
**	sure that all types and constants are defined before use.  Forward
**	type declarations (such as pointers to undefined types) are an
**	exception.
**
** System Status:
**
** User Action:
*/

E_E2001B_hpUNDERFLOW	"Underflow of comma separated name list in declaration."

/*%
** Explanation:
**	The stack used to store comma separated names in declarations has
**	been corrupted.  Try rearranging the list of names in the declaration.
**
** System Status:
**
** User Action:
*/

E_E2001C_hpUNSUPP	"PASCAL variable '%0c' is of unsupported type SET or QUADRUPLE."

/*%
** Explanation:
**	You may declare variables of type SET And QUADRUPLE, but you may not
**	use them in embedded statements.  The declarations are only allowed
**	so that you can declare records with components of those types.  If
**	those variables need to interact with INGRES, then declare the SET
**	variable as an ARRAY OF BOOLEAN, and the QUADRUPLE variable as a DOUBLE.
**
** System Status:
**
** User Action:
*/

E_E2001D_hpWTHNULL	"Adding an unknown name '%0c' in PASCAL WITH statement."

/*%
** Explanation:
**	(EQUEL)
**	The specified name is not known to the preprocessor when used with
**	an embedded WITH statement.  Check its spelling and make sure it
**	was declared to the preprocessor in the correct scope.
**
** System Status:
**
** User Action:
*/

E_E2001E_hpWTHOFLOW	"Overflow of PASCAL WITH stack on variable '%0c'.\n
Maximum depth is %1c."

/*%
** Explanation:
**	(EQUEL)
**	You have nested embedded WITH blocks too deeply.  Flatten your
**	record declarations, or use partially qualified names in place of
**	the deepest WITH statement.
**
** System Status:
**
** User Action:
*/

E_E2001F_hpWTHOPEN	"A PASCAL WITH block is still open."

/*%
** Explanation:
**	(EQUEL)
**	Every WITH block must be closed by an END statement.  This error
**	indicates that the end of a routine has been encountered before a
**	WITH block inside the routine has been ended.
**
** System Status:
**
** User Action:
*/

E_E20020_hpWTHSTRUCT	"PASCAL WITH variable '%0c' must be of type RECORD."

/*%
** Explanation:
**	(EQUEL)
**	A WITH statement specified a variable that was not a record.  Check
**	the name and verify that the scoping rules ensure that this use
**	of the specified name refers to a record variable.
**
** System Status:
**
** User Action:
*/

E_E20021_hpWTHUFLOW	"Underflow of PASCAL WITH stack."

/*%
** Explanation:
**	(EQUEL)
**	The stack used to manage WITH  record has been corrupted.  Try
**	rearranging the nesting of WITH statements, or partially qualify
**	some of the more deeply nested record components.
**
** System Status:
**
** User Action:
*/

E_E20022_hpVARRECORD	"PASCAL variable '%0c' is a record, not a scalar value."

/*%
** Explanation:
**	The named variable refers to a record.  It was used where a variable
**	must be used to retrieve data from INGRES.  This error may also
**	cause a syntax error on any subsequent record components that
**	are referenced.
**
** System Status:
**
** User Action:
*/

E_E20023_hpLBSQNONE	"No embedded LABEL statement for current scope but labels have been generated."

/*%
** Explanation:
**	(ESQL - See hpLBNONE for EQUEL)
**	The PASCAL preprocessor must take a second pass in order to declare
**	implicitly generated labels.  If labels were implicitly generated
**	then the preprocessor needs to know where to declare them on the second
**	pass.  That is why one must issue the embedded LABEL statement
**	(and corresponding END statement) in each subprogram that issues an
**	embedded block-structured statement.  If you did not issue the EXEC
**	SQL LABEL statement, the generated labels will be marked as 
**	undeclared by the PASCAL compiler.
**
** System Status:
**
** User Action:
*/
