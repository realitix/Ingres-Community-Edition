--
-- File:	eqdef.a
--
-- Purpose:	Ada INGRES interface package specifications for EQUEL.
--
-- Packages:	EQUEL       - Interface to non-forms routines.
--		EQUEL_FORMS - Interface to forms system.
-- Usage:
--		## with EQUEL;	  Brings in only EQUEL
--		## with EQUEL_FORMS;    Brings in both EQUEL and EQUEL_FORMS.
--
--
--
-- History:	19-Feb-1986 (neil)
--			Written for VAX/VMS.
--		04-Mar-1988 (russ)
--			Altered to support VERDIX Ada on UNIX.
--		01-May-1989 (seng), (terryr)
--			Modified to support new syntax from Verdix.  The
--			change was to the "pragma interface" statement.  See
--			example below.  Also modified to use II_CC_PREFIX.
--		19-Sep-1989 (terryr) 
--			Modified for initial Release 6 and also removed
--			II_CC_PREFIX as some Ada compilers could not handle
--			its useage.  The symptom of this was a failed link
--			attempt which generated an empty "Undefined:" externals
--			list.
--		02-Oct-1989 (neil)
--			Rewrote for upgrade to Release 6.3.  New interfaces, 
--			modified non-C string interface, and modifications for
--			port to VMS Verdix Ada.
--		24-Oct-1989 (teresal)
--			Modified for Release 6.4.  Added new function calls
--			to the forms system.
--		20-Dec-1989 (barbara)
--			Updated for Release 6.4.  Added new function calls
--			to INGRES run-time system for event handling.
--		08-aug-1990 (barbara)
--			Updated with function call for setting per value
--			display attributes.
--		01-mar-1991 (kathryn) 
--			Added IILQssSetSqlio - IILQisInqSqlio - 
--			      IILQshSetHandler.
--		21-apr-1991 (teresal)
--			Add activate event call - remove IILQegEvGetio.
--	    30-may-1991 (kathryn)
--		    Correct entries for IILQshSetHandler and IILQssSetSqlio.
--	    17-sep-1991 (seng)
--		    Modify interface_name() argument to use the C_SUBP_PREFIX
--		    definition as specified in Section 4.2.2 of the Verdix
--		    RS/6000 ADA Programmers' Guide.  I'm not sure where this
--		    reference is in other manuals.  This takes care of the
--		    different systems that Verdix ADA supports.
--		14-oct-1992 (lan)
--			Added IILQled_LoEndData.
--	    20-nov-1992 (kathryn)
--		Added entries for IILQldh_LoDataHandler, IILQlgd_LoGetDataA
--		and IILQlpd_LoPutData[A,I,F,S] for large objects.
--	    26-jul-1993 (lan)
--		Added entries (IIG4...) for EXEC 4GL.
--	08/19/93 (dkh) - Added entry IIFRgotofld to support resume
--			 nextfield/previousfield.
--	06/02/03 (toumi01) - Fix dbproc function definition for Ingres 2.6
--		row producing procedures feature.
--	    09-apr-2007 (drivi01)
--		BUG 117501
--		Adding references to function IIcsRetScroll in order to fix
--		build on windows.
--
-- Example Interface Format:
--
--		procedure IIname(arg1: Integer; arg2: Address);
--		pragma interface (C, IIname);
--		pragma interface_name (IIname, C_SUBP_PREFIX & "IIname");
--
--	Note that the C_SUBP_PREFIX constant is prepended to the procedure
--	name.  This is the portable solution to the diverse systems that 
--	Verdix ADA supports.  For example, on the IBM RS/6000, C_SUBP_PREFIX 
--	is defined to be ".", as opposed to the DEC Vaxstation where it is 
--	defined to be "".  On other platforms, this is defined to be "_".
--
-- String Interface Note:
--	
--	Most strings do not need a special wrapper routine as the preprocessor
--	generates address of null-terminated strings.  However, "input" calls
--	of the generated I/O class do need Ada wrappers.  These wrappers are
--	included in the package bodies of the different packages.  The
--	procedures are the input-only calls with a trailing "ioS" suffix.  They
--	are modified to call the appropriate Address-type procedure ("ioA"
--	suffix.  Follow IIwritioS or IIputfldioS for an example.
--
--	All "output" I/O calls go through the "ioA" interface.  There is no
--	generated "ioS" interface for Vads - see IIgetdomioA or IIprmptioA.
--
-- Copyright (c) 2004 Actian Corporation
--

--
-- Begin EQUEL RTS.
--

with system;
with language;

package EQUEL is

	use system;
	use language;

	-- Type specifier for string arguments passed to I/O procedure calls
	-- (generated by gen_io).  These should form the complete list of
	-- procedures which deal with embedded I/O operations (see dbms.h)

	DB_CHA_TYPE: constant Integer := 20;	-- Fixed length blank pad
	DB_CHR_TYPE: constant Integer := 32;	-- Fixed length all significant

	-- This constant represents the C string null terminator (normally
	-- valued zero) and is generated by the preprocessors.  If ascii.nul
	-- is undefined on the system you are compiling on then scan all system
	-- ".a" files (like char_type.a) for the likely looking candidate.

	II0: character renames ascii.nul;

	-- This constant represents the Ada and C null pointer (zero valued)
	-- and is generated by the preprocessors.  If no_addr is undefined on
	-- the system you are compiling on then scan all system ".a" files
	-- (like system.a) delivered for the likely looking candidate

	IInull: Address renames no_addr;

	-- This function returns the address of a C string from an Ada
	-- string without extra copying.

	function IIsa(ada_string: string) return Address;

	-- Interface definitions for INGRES functions which do not require a
	-- special Ada subprogram to modify the original arguments before
	-- passing them to the INGRES C function.  Extra subprograms are
	-- required only for input (of I/O) calls with string arguments
	-- (the IIxxxioS calls).

	--  Query Utility Calls/Miscellaneous
	procedure IIseterr(errfunc: Address);
	pragma interface (C, IIseterr);
	pragma interface_name (IIseterr, C_SUBP_PREFIX & "IIseterr");

	function IIerrtest return Integer;
	pragma interface (C, IIerrtest);
	pragma interface_name (IIerrtest, C_SUBP_PREFIX & "IIerrtest");

	-- Inquire/Set_Ingres

	procedure IIeqiqioA(ind: Address; isvar, typ, len: Integer;
		addr: Address; str: Address);
	pragma interface (C, IIeqiqioA);
	pragma interface_name (IIeqiqioA, C_SUBP_PREFIX & "IIeqiqio");

	procedure IIeqstioI(obj: Address; ind: Address;
			    isvar, typ, len: Integer; ival: Integer);
	pragma interface (C, IIeqstioI);
	pragma interface_name (IIeqstioI, C_SUBP_PREFIX & "IIeqstio");

	procedure IIeqstioA(obj: Address; ind: Address;
			    isvar, typ, len: Integer;addr: Address);
	pragma interface (C, IIeqstioA);
	pragma interface_name (IIeqstioA, C_SUBP_PREFIX & "IIeqstio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIeqstioS(obj, ind: Address;
			    isvar, typ, len: Integer; str: String);

	procedure IILQisInqSqlioA(ind: Address; isvar, typ, len: Integer;
		addr: Address; str: Integer);
	pragma interface (C, IILQisInqSqlioA);
	pragma interface_name (IILQisInqSqlioA, C_SUBP_PREFIX & "IILQisInqSqlio");

	procedure IILQssSetSqlioI(obj: Integer; ind: Address;
			    isvar, typ, len: Integer; ival: Integer);
	pragma interface (C, IILQssSetSqlioI);
	pragma interface_name (IILQssSetSqlioI, C_SUBP_PREFIX & "IILQssSetSqlio");

	procedure IILQssSetSqlioA(obj: Integer; ind: Address;
			    isvar, typ, len: Integer;addr: Address);
	pragma interface (C, IILQssSetSqlioA);
	pragma interface_name (IILQssSetSqlioA, C_SUBP_PREFIX & "IILQssSetSqlio");

		  -- This procedure requires a wrapper in the package body.
	procedure IILQssSetSqlioS(obj: Integer; ind: Address;
		isvar, typ, len: Integer; str: String);

    procedure IILQshSetHandler(hdlr: Integer; funcptr: Address);
	pragma interface (C, IILQshSetHandler);
	pragma interface_name (IILQshSetHandler, C_SUBP_PREFIX & "IILQshSetHandler");


	--  Connection Control 
	procedure IIingopen(lang: Integer;
			    a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,
			    a13,a14,a15: Address := IInull);
	pragma interface (C, IIingopen);
	pragma interface_name (IIingopen, C_SUBP_PREFIX & "IIingopen");

	procedure IIexit;
	pragma interface (C, IIexit);
	pragma interface_name (IIexit, C_SUBP_PREFIX & "IIexit");

	procedure IIbreak;
	pragma interface (C, IIbreak);
	pragma interface_name (IIbreak, C_SUBP_PREFIX & "IIbreak");

	procedure IIutsys(flag: Integer; name, strval: Address);
	pragma interface (C, IIutsys);
	pragma interface_name (IIutsys, C_SUBP_PREFIX & "IIutsys");

	procedure IILQled_LoEndData;
	pragma interface (C, IILQled_LoEndData);
	pragma interface_name (IILQled_LoEndData,
			       C_SUBP_PREFIX & "IILQled_LoEndData");

	--  Query Processing
	procedure IIwritioA(trim: Integer; ind: Address;
			    isvar, typ, len: Integer; str: Address);
	pragma interface (C, IIwritioA);
	pragma interface_name (IIwritioA, C_SUBP_PREFIX & "IIwritio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIwritioS(trim: Integer; ind: Address;
			    isvar, typ, len: Integer; str: String);

	procedure IIputdomioI(ind: Address; isvar, typ, len: Integer;
			      ival: Integer);
	pragma interface (C, IIputdomioI);
	pragma interface_name (IIputdomioI, C_SUBP_PREFIX & "IIputdomio");

	procedure IIputdomioF(ind: Address; isvar, typ, len: Integer;
			      fval: float);
	pragma interface (C, IIputdomioF);
	pragma interface_name (IIputdomioF, C_SUBP_PREFIX & "IIputdomio");

	procedure IIputdomioA(ind: Address; isvar, typ, len: Integer;
			      addr: Address);
	pragma interface (C, IIputdomioA);
	pragma interface_name (IIputdomioA, C_SUBP_PREFIX & "IIputdomio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIputdomioS(ind: Address; isvar, typ, len: Integer;
			      str: String);

		  -- This procedure requires a wrapper in the package body.
	procedure IInotrimioS(ind: Address; isvar, typ, len: Integer;
			      str: String);

	procedure IIxact(oper: Integer);
	pragma interface (C, IIxact);
	pragma interface_name (IIxact, C_SUBP_PREFIX & "IIxact");

	procedure IIvarstrioI(ind: Address; isvar, typ, len: Integer;
			      ival: Integer);
	pragma interface (C, IIvarstrioI);
	pragma interface_name (IIvarstrioI, C_SUBP_PREFIX & "IIvarstrio");

	procedure IIvarstrioF(ind: Address; isvar, typ, len: Integer;
			      fval: float);
	pragma interface (C, IIvarstrioF);
	pragma interface_name (IIvarstrioF, C_SUBP_PREFIX & "IIvarstrio");

	procedure IIvarstrioA(ind: Address; isvar, typ, len: Integer;
			      addr: Address);
	pragma interface (C, IIvarstrioA);
	pragma interface_name (IIvarstrioA, C_SUBP_PREFIX & "IIvarstrio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIvarstrioS(ind: Address; isvar, typ, len: Integer;
			      str: String);

	procedure IIsyncup(fname: Address := IInull; line_no: Integer := 0);
	pragma interface (C, IIsyncup);
	pragma interface_name (IIsyncup, C_SUBP_PREFIX & "IIsyncup");

	--  Retrieve/Select Loops
	function IInextget return Integer;
	pragma interface (C, IInextget);
	pragma interface_name (IInextget, C_SUBP_PREFIX & "IInextget");

	procedure IIgetdomioA(ind: Address; isvar, typ, len: Integer;
			      addr: Address);
	pragma interface (C, IIgetdomioA);
	pragma interface_name (IIgetdomioA, C_SUBP_PREFIX & "IIgetdomio");

	procedure IIflush(fname: Address := IInull; line_no: Integer := 0);
	pragma interface (C, IIflush);
	pragma interface_name (IIflush, C_SUBP_PREFIX & "IIflush");

	procedure IIretinit(fname: Address := IInull; line_no: Integer := 0);
	pragma interface (C, IIretinit);
	pragma interface_name (IIretinit, C_SUBP_PREFIX & "IIretinit");

	-- Repeated Queries
	function IInexec return Integer;
	pragma interface (C, IInexec);
	pragma interface_name (IInexec, C_SUBP_PREFIX & "IInexec");

	procedure IIsexec;
	pragma interface (C, IIsexec);
	pragma interface_name (IIsexec, C_SUBP_PREFIX & "IIsexec");

	procedure IIexExec(oper: Integer; qname: Address; id1, id2: Integer);
	pragma interface (C, IIexExec);
	pragma interface_name (IIexExec, C_SUBP_PREFIX & "IIexExec");

	procedure IIexDefine(oper: Integer; qname: Address; id1, id2: Integer);
	pragma interface (C, IIexDefine);
	pragma interface_name (IIexDefine, C_SUBP_PREFIX & "IIexDefine");

	-- DB Procedures
	function IILQprsProcStatus(count: Integer) return Integer;
	pragma interface (C, IILQprsProcStatus);
	pragma interface_name (IILQprsProcStatus, C_SUBP_PREFIX & "IILQprsProcStatus");

	procedure IIputctrl(code: Integer);
	pragma interface (C, IIputctrl);
	pragma interface_name (IIputctrl, C_SUBP_PREFIX & "IIputctrl");

	procedure IILQpriProcInit(ptype: Integer; pname: Address);
	pragma interface (C, IILQpriProcInit);
	pragma interface_name (IILQpriProcInit, C_SUBP_PREFIX & "IILQpriProcInit");

	procedure IILQprvProcValioI(name: Address; pbyref: Integer;
		ind: Address; isvar, typ, len: Integer; ival: Integer);
	pragma interface (C, IILQprvProcValioI);
	pragma interface_name (IILQprvProcValioI, C_SUBP_PREFIX & "IILQprvProcValio");

	procedure IILQprvProcValioF(name: Address; pbyref: Integer;
		ind: Address; isvar, typ, len: Integer; fval: float);
	pragma interface (C, IILQprvProcValioF);
	pragma interface_name (IILQprvProcValioF, C_SUBP_PREFIX & "IILQprvProcValio");

	procedure IILQprvProcValioA(name: Address; pbyref: Integer;
		ind: Address; isvar, typ, len: Integer; addr: Address);
	pragma interface (C, IILQprvProcValioA);
	pragma interface_name (IILQprvProcValioA, C_SUBP_PREFIX & "IILQprvProcValio");

		  -- This procedure requires a wrapper in the package body.
	procedure IILQprvProcValioS(name: Address; pbyref: Integer;
			ind: Address; isvar, typ, len: Integer; str: String);

	-- Cursors
	procedure IIcsOpen(csname: Address; id1, id2: Integer);
	pragma interface (C, IIcsOpen);
	pragma interface_name (IIcsOpen, C_SUBP_PREFIX & "IIcsOpen");

	procedure IIcsQuery(csname: Address; id1, id2: Integer);
	pragma interface (C, IIcsQuery);
	pragma interface_name (IIcsQuery, C_SUBP_PREFIX & "IIcsQuery");

	procedure IIcsRdO(oper: Integer; rdo: Address);
	pragma interface (C, IIcsRdO);
	pragma interface_name (IIcsRdO, C_SUBP_PREFIX & "IIcsRdO");

	function IIcsRetrieve(csname: Address; id1, id2: Integer)
		 return Integer;
	pragma interface (C, IIcsRetrieve);
	pragma interface_name (IIcsRetrieve, C_SUBP_PREFIX & "IIcsRetrieve");

	procedure IIcsERetrieve;
	pragma interface (C, IIcsERetrieve);
	pragma interface_name (IIcsERetrieve, C_SUBP_PREFIX & "IIcsERetrieve");

	procedure IIcsRetScroll(csname: Address; id1, id2, fetcho, fetchn: Integer);
	pragma interface (C, IIcsRetScroll);
	pragma interface_name (IIcsRetScroll, C_SUBP_PREFIX & "IIcsRetScroll");

	procedure IIcsClose(csname: Address; id1, id2: Integer);
	pragma interface (C, IIcsClose);
	pragma interface_name (IIcsClose, C_SUBP_PREFIX & "IIcsClose");

	procedure IIcsDelete(tblname, csname: Address; id1, id2: Integer);
	pragma interface (C, IIcsDelete);
	pragma interface_name (IIcsDelete, C_SUBP_PREFIX & "IIcsDelete");

	procedure IIcsReplace(csname: Address; id1, id2: Integer);
	pragma interface (C, IIcsReplace);
	pragma interface_name (IIcsReplace, C_SUBP_PREFIX & "IIcsReplace");

	procedure IIcsERplace(csname: Address; id1, id2: Integer);
	pragma interface (C, IIcsERplace);
	pragma interface_name (IIcsERplace, C_SUBP_PREFIX & "IIcsERplace");

	procedure IIcsGetioA(ind: Address; isvar, typ, len: Integer;
			     addr: Address);
	pragma interface (C, IIcsGetioA);
	pragma interface_name (IIcsGetioA, C_SUBP_PREFIX & "IIcsGetio");

	-- Events
	procedure IILQesEvStat(flag: Integer; waitsecs: Integer);
	pragma interface (C, IILQesEvStat);
	pragma interface_name (IILQesEvStat, C_SUBP_PREFIX & "IILQesEvStat");

	-- Large Objects

	procedure IILQldh_LoDataHandler(typ: Integer; indvar, hdlr, 
					hdlarg: Address);
	pragma interface (C, IILQldh_LoDataHandler);
	pragma interface_name (IILQldh_LoDataHandler, 
				C_SUBP_PREFIX & "IILQldh_LoDataHandler");

        procedure IILQlgd_LoGetDataA(isvar, typ, len: Integer; addr: Address;
                                     maxlen: Integer; seglen, dataend: Address);
        pragma interface (C, IILQlgd_LoGetDataA);
        pragma interface_name (IILQlgd_LoGetDataA,
                                C_SUBP_PREFIX & "IILQlgd_LoGetData");

        procedure IILQlpd_LoPutDataI(isvar, typ, len, segment, seglen, 
				     dataend: Integer);
        pragma interface (C, IILQlpd_LoPutDataI);
        pragma interface_name (IILQlpd_LoPutDataI, 
				C_SUBP_PREFIX & "IILQlpd_LoPutData");

        procedure IILQlpd_LoPutDataF(isvar, typ, len: Integer; segment: float;
					seglen, dataend: Integer);
        pragma interface (C, IILQlpd_LoPutDataF);
        pragma interface_name (IILQlpd_LoPutDataF, 
				C_SUBP_PREFIX & "IILQlpd_LoPutData");

        procedure IILQlpd_LoPutDataA(isvar, typ, len: Integer; addr: Address;
				     seglen, dataend: Integer);
        pragma interface (C, IILQlpd_LoPutDataA);
        pragma interface_name (IILQlpd_LoPutDataA, 
				C_SUBP_PREFIX & "IILQlpd_LoPutData");

                  -- This procedure requires a wrapper in the package body.
        procedure IILQlpd_LoPutDataS(isvar, typ, len: Integer; str: String;					     seglen, dataend: Integer);

	-- exec 4gl
	procedure IIG4acArrayClear(ary: Integer);
	pragma interface (C, IIG4acArrayClear);
	pragma interface_name (IIG4acArrayClear, 
				C_SUBP_PREFIX & "IIG4acArrayClear");

	procedure IIG4rrRemRow(ary, indx: Integer);
	pragma interface (C, IIG4rrRemRow);
	pragma interface_name (IIG4rrRemRow, 
				C_SUBP_PREFIX & "IIG4rrRemRow");

	procedure IIG4irInsRow(ary, indx, row, state, which: Integer);
	pragma interface (C, IIG4irInsRow);
	pragma interface_name (IIG4irInsRow, 
				C_SUBP_PREFIX & "IIG4irInsRow");

	procedure IIG4drDelRow(ary, indx: Integer);
	pragma interface (C, IIG4drDelRow);
	pragma interface_name (IIG4drDelRow, 
				C_SUBP_PREFIX & "IIG4drDelRow");

	procedure IIG4srSetRow(ary, indx, row: Integer);
	pragma interface (C, IIG4srSetRow);
	pragma interface_name (IIG4srSetRow, 
				C_SUBP_PREFIX & "IIG4srSetRow");

	procedure IIG4grGetRowA(rowind: Address;
				isvar, rowtype, rowlen: Integer;
				rowptr: Address; ary, indx: Integer);
	pragma interface (C, IIG4grGetRowA);
	pragma interface_name (IIG4grGetRowA, 
				C_SUBP_PREFIX & "IIG4grGetRow");

	procedure IIG4ggGetGlobalA(ind: Address; isvar, typ, len: Integer;
				data, name: Address; gtype: Integer);
	pragma interface (C, IIG4ggGetGlobalA);
	pragma interface_name (IIG4ggGetGlobalA, 
				C_SUBP_PREFIX & "IIG4ggGetGlobal");

	procedure IIG4sgSetGlobalA(name, ind: Address; isvar, typ, len: Integer;
				data: Address);
	pragma interface (C, IIG4sgSetGlobalA);
	pragma interface_name (IIG4sgSetGlobalA, 
				C_SUBP_PREFIX & "IIG4sgSetGlobal");

	procedure IIG4sgSetGlobalI(name, ind: Address; isvar, typ, len: Integer;
				data: Integer);
	pragma interface (C, IIG4sgSetGlobalI);
	pragma interface_name (IIG4sgSetGlobalI, 
				C_SUBP_PREFIX & "IIG4sgSetGlobal");

	procedure IIG4sgSetGlobalS(name, ind: Address; isvar, typ, len: Integer;
				data: String);

	procedure IIG4gaGetAttrA(ind: Address; isvar, typ, len: Integer;
				data, name: Address);
	pragma interface (C, IIG4gaGetAttrA);
	pragma interface_name (IIG4gaGetAttrA, 
				C_SUBP_PREFIX & "IIG4gaGetAttr");

	procedure IIG4saSetAttrA(name, ind: Address; isvar, typ, len: Integer;
				data: Address);
	pragma interface (C, IIG4saSetAttrA);
	pragma interface_name (IIG4saSetAttrA, 
				C_SUBP_PREFIX & "IIG4saSetAttr");

	procedure IIG4saSetAttrI(name, ind: Address; isvar, typ, len: Integer;
				data: Integer);
	pragma interface (C, IIG4saSetAttrI);
	pragma interface_name (IIG4saSetAttrI, 
				C_SUBP_PREFIX & "IIG4saSetAttr");

	procedure IIG4saSetAttrS(name, ind: Address; isvar, typ, len: Integer;
				data: String);

	procedure IIG4chkobj(obj, acs, indx, caller: Integer);
	pragma interface (C, IIG4chkobj);
	pragma interface_name (IIG4chkobj, 
				C_SUBP_PREFIX & "IIG4chkobj");

	procedure IIG4udUseDscrA(lang, direction: Integer; sqlda: Address);
	pragma interface (C, IIG4udUseDscrA);
	pragma interface_name (IIG4udUseDscrA, 
				C_SUBP_PREFIX & "IIG4udUseDscr");

	procedure IIG4udUseDscrI(lang, direction: Integer; sqlda: Integer);
	pragma interface (C, IIG4udUseDscrI);
	pragma interface_name (IIG4udUseDscrI, 
				C_SUBP_PREFIX & "IIG4udUseDscr");

	procedure IIG4udUseDscrS(lang, direction: Integer; sqlda: String);

	procedure IIG4fdFillDscrA(obj, lang: Integer; sqlda: Address);
	pragma interface (C, IIG4fdFillDscrA);
	pragma interface_name (IIG4fdFillDscrA, 
				C_SUBP_PREFIX & "IIG4fdFillDscr");

	procedure IIG4icInitCall(name: Address; typ: Integer);
	pragma interface (C, IIG4icInitCall);
	pragma interface_name (IIG4icInitCall, 
				C_SUBP_PREFIX & "IIG4icInitCall");

	procedure IIG4vpValParamA(name, ind: Address; isval, typ, len: Integer;
				data: Address);
	pragma interface (C, IIG4vpValParamA);
	pragma interface_name (IIG4vpValParamA, 
				C_SUBP_PREFIX & "IIG4vpValParam");

	procedure IIG4bpByrefParamA(ind: Address; isval, typ, len: Integer;
				data, name: Address);
	pragma interface (C, IIG4bpByrefParamA);
	pragma interface_name (IIG4bpByrefParamA, 
				C_SUBP_PREFIX & "IIG4bpByrefParam");

	procedure IIG4rvRetValA(ind: Address; isval, typ, len: Integer;
				data: Address);
	pragma interface (C, IIG4rvRetValA);
	pragma interface_name (IIG4rvRetValA, 
				C_SUBP_PREFIX & "IIG4rvRetVal");

	procedure IIG4ccCallComp;
	pragma interface (C, IIG4ccCallComp);
	pragma interface_name (IIG4ccCallComp, 
				C_SUBP_PREFIX & "IIG4ccCallComp");

	procedure IIG4i4Inq4GLA(ind: Address; isvar, typ, len: Integer;
				data: Address; obj, code: Integer);
	pragma interface (C, IIG4i4Inq4GLA);
	pragma interface_name (IIG4i4Inq4GLA, 
				C_SUBP_PREFIX & "IIG4i4Inq4GL");

	procedure IIG4s4Set4GLA(obj, code: Integer; ind: Address;
				isvar, typ, len: Integer; data: Address);
	pragma interface (C, IIG4s4Set4GLA);
	pragma interface_name (IIG4s4Set4GLA, 
				C_SUBP_PREFIX & "IIG4s4Set4GL");

	procedure IIG4s4Set4GLI(obj, code: Integer; ind: Address;
				isvar, typ, len: Integer; data: Integer);
	pragma interface (C, IIG4s4Set4GLI);
	pragma interface_name (IIG4s4Set4GLI, 
				C_SUBP_PREFIX & "IIG4s4Set4GL");

	procedure IIG4s4Set4GLS(obj, code: Integer; ind: Address;
				isvar, typ, len: Integer; data: String);

	procedure IIG4seSendEvent(frame: Integer);
	pragma interface (C, IIG4seSendEvent);
	pragma interface_name (IIG4seSendEvent, 
				C_SUBP_PREFIX & "IIG4seSendEvent");

end EQUEL;

package body EQUEL is

	-- Utility function to return a string address.  This is required
	-- for null concatentation.
	function IIsa(ada_string: string) return Address  is
	begin
	    return ada_string'Address;
	end IIsa;

	-- The following ioS wrappers modify the I/O input string arguments
	-- and their types.  All these wrappers call the coresponding ioA
	-- procedure.

	procedure IIwritioS(trim: Integer; ind: Address;
			    isvar, typ, len: Integer; str: String) is
	begin
	    IIwritioA(trim, ind, isvar, DB_CHA_TYPE, str'Length, str'Address);
	end IIwritioS;

	procedure IIvarstrioS(ind: Address; isvar, typ, len: Integer;
			      str: String) is
	begin
	    IIvarstrioA(ind, isvar, DB_CHA_TYPE, str'Length, str'Address);
	end IIvarstrioS;

	procedure IILQprvProcValioS(name: Address; pbyref: Integer;
			ind: Address; isvar, typ, len: Integer; str: String) is
	begin
	    IILQprvProcValioA(name, pbyref, ind, isvar, DB_CHA_TYPE,
			      str'Length, str'Address);
	end IILQprvProcValioS;

	procedure IIputdomioS(ind: Address; isvar, typ, len: Integer;
			      str: String) is
	begin
	    IIputdomioA(ind, isvar, DB_CHA_TYPE, str'Length, str'Address);
	end IIputdomioS;

	-- IInotrimio calls IIputdomio with DB_CHR_TYPE to avoid blank trimming
	procedure IInotrimioS(ind: Address; isvar, typ, len: Integer;
			      str: String) is
	begin
	    IIputdomioA(ind, isvar, DB_CHR_TYPE, str'Length, str'Address);
	end IInotrimioS;

	procedure IIeqstioS(obj, ind: Address;
			    isvar, typ, len: Integer; str: String) is
	begin
	    IIeqstioA(obj, ind, isvar, DB_CHA_TYPE, str'Length, str'Address);
	end IIeqstioS;


	procedure IILQssSetSqlioS(obj: Integer;  ind: Address;
			    isvar, typ, len: Integer; str: String) is
	begin
	    IILQssSetSqlioA(obj, ind, isvar, DB_CHA_TYPE, str'Length, str'Address);
	end IILQssSetSqlioS;


        procedure IILQlpd_LoPutDataS(isvar, typ, len: Integer; str: String;
				     seglen, dataend: Integer) is
        begin
            IILQlpd_LoPutDataA(isvar, DB_CHA_TYPE, str'Length, str'Address,
			       seglen, dataend);
        end IILQlpd_LoPutDataS;


	procedure IIG4udUseDscrS(lang, direction: Integer; sqlda: String) is
	begin
	    IIG4udUseDscrA(lang, direction, sqlda'Address);
	end IIG4udUseDscrS;


	procedure IIG4sgSetGlobalS(name, ind: Address; isvar, typ, len: Integer;
				data: String) is
	begin
	    IIG4sgSetGlobalA(name, ind, isvar, DB_CHA_TYPE,
						data'Length, data'Address);
	end IIG4sgSetGlobalS;


	procedure IIG4saSetAttrS(name, ind: Address; isvar, typ, len: Integer;
				data: String) is
	begin
	    IIG4saSetAttrA(name, ind, isvar, DB_CHA_TYPE,
						data'Length, data'Address);
	end IIG4saSetAttrS;


	procedure IIG4s4Set4GLS(obj, code: Integer; ind: Address;
				isvar, typ, len: Integer; data: String) is
	begin
	    IIG4s4Set4GLA(obj, code, ind, isvar, DB_CHA_TYPE,
						data'Length, data'Address);
	end IIG4s4Set4GLS;


end EQUEL;


--
-- EQUEL Forms System package
--

with system;
with language;
with EQUEL;

package EQUEL_FORMS is

	use system;
	use language;
	use EQUEL;

	-- FRS Setup
	procedure IIaddform(formid: Integer);
	pragma interface (C, IIaddform);
	pragma interface_name (IIaddform, C_SUBP_PREFIX & "IIaddform");

	procedure IIforminit(formnm: Address);
	pragma interface (C, IIforminit);
	pragma interface_name (IIforminit, C_SUBP_PREFIX & "IIforminit");

	procedure IIendforms;
	pragma interface (C, IIendforms);
	pragma interface_name (IIendforms, C_SUBP_PREFIX & "IIendforms");

	procedure IIforms(lang: Integer);
	pragma interface (C, IIforms);
	pragma interface_name (IIforms, C_SUBP_PREFIX & "IIforms");

	-- Display Loop
	function IIchkfrm return Integer;
	pragma interface (C, IIchkfrm);
	pragma interface_name (IIchkfrm, C_SUBP_PREFIX & "IIchkfrm");

	procedure IIendfrm;
	pragma interface (C, IIendfrm);
	pragma interface_name (IIendfrm, C_SUBP_PREFIX & "IIendfrm");

	function IIfnames return Integer;
	pragma interface (C, IIfnames);
	pragma interface_name (IIfnames, C_SUBP_PREFIX & "IIfnames");

	procedure IIresmu;
	pragma interface (C, IIresmu);
	pragma interface_name (IIresmu, C_SUBP_PREFIX & "IIresmu");

	procedure IIresnext;
	pragma interface (C, IIresnext);
	pragma interface_name (IIresnext, C_SUBP_PREFIX & "IIresnext");

	procedure IIrescol(tab, col: Address);
	pragma interface (C, IIrescol);
	pragma interface_name (IIrescol, C_SUBP_PREFIX & "IIrescol");

	procedure IIresfld(fld: Address);
	pragma interface (C, IIresfld);
	pragma interface_name (IIresfld, C_SUBP_PREFIX & "IIresfld");

	procedure IIFRgotofld(dir: Integer);
	pragma interface (C, IIFRgotofld);
	pragma interface_name (IIFRgotofld, C_SUBP_PREFIX & "IIFRgotofld");

	procedure IIFRreResEntry;
	pragma interface (C, IIFRreResEntry);
	pragma interface_name (IIFRreResEntry, C_SUBP_PREFIX & "IIFRreResEntry");

	function IIrunform return Integer;
	pragma interface (C, IIrunform);
	pragma interface_name (IIrunform, C_SUBP_PREFIX & "IIrunform");

	function IInextmu return Integer;
	pragma interface(C, IInextmu);
	pragma interface_name(IInextmu, C_SUBP_PREFIX & "IInextmu");

	function IIrunnest return Integer;
	pragma interface(C, IIrunnest);
	pragma interface_name(IIrunnest, C_SUBP_PREFIX & "IIrunnest");

	procedure IIendnest;
	pragma interface(C, IIendnest);
	pragma interface_name(IIendnest, C_SUBP_PREFIX & "IIendnest");

      	function IIFRitIsTimeout return Integer;
	pragma interface(C, IIFRitIsTimeout);
	pragma interface_name(IIFRitIsTimeout, C_SUBP_PREFIX & "IIFRitIsTimeout");

	function IIvalfld(fld: Address) return Integer;
	pragma interface (C, IIvalfld);
	pragma interface_name (IIvalfld, C_SUBP_PREFIX & "IIvalfld");

	function IIdispfrm(form, mode: Address) return Integer;
	pragma interface (C, IIdispfrm);
	pragma interface_name (IIdispfrm, C_SUBP_PREFIX & "IIdispfrm");

	-- Activations
	function IIinitmu return Integer;
	pragma interface (C, IIinitmu);
	pragma interface_name (IIinitmu, C_SUBP_PREFIX & "IIinitmu");

	function IIendmu return Integer;
	pragma interface (C, IIendmu);
	pragma interface_name (IIendmu, C_SUBP_PREFIX & "IIendmu");

	procedure IImuonly;
	pragma interface (C, IImuonly);
	pragma interface_name (IImuonly, C_SUBP_PREFIX & "IImuonly");

	procedure IIrunmu(onoff: Integer);
	pragma interface (C, IIrunmu);
	pragma interface_name (IIrunmu, C_SUBP_PREFIX & "IIrunmu");

	function IIretval return Integer;
	pragma interface (C, IIretval);
	pragma interface_name (IIretval, C_SUBP_PREFIX & "IIretval");

	function IIactcomm(command, intrp: Integer) return Integer;
	pragma interface (C, IIactcomm);
	pragma interface_name (IIactcomm, C_SUBP_PREFIX & "IIactcomm");

	function IITBcaClmAct(tab, col: Address; entact, intrp: Integer)
			return Integer;	
	pragma interface (C, IITBcaClmAct);
	pragma interface_name (IITBcaClmAct, C_SUBP_PREFIX & "IITBcaClmAct");

	function IIFRafActFld(fld: Address; entact, intrp: Integer)
			return Integer;
	pragma interface (C, IIFRafActFld);
	pragma interface_name (IIFRafActFld, C_SUBP_PREFIX & "IIFRafActFld");

	function IIactscrl(tab: Address; updown, intrp: Integer) return Integer;
	pragma interface (C, IIactscrl);
	pragma interface_name (IIactscrl, C_SUBP_PREFIX & "IIactscrl");

	function IIFRtoact(actval: Integer; intrp: Integer) return Integer;
	pragma interface(C, IIFRtoact);
	pragma interface_name(IIFRtoact, C_SUBP_PREFIX & "IIFRtoact");

	function IInmuact(menu, expl: Address;
			  valid, activ, intrp: Integer) return Integer;
	pragma interface (C, IInmuact);
	pragma interface_name (IInmuact, C_SUBP_PREFIX & "IInmuact");

	function IInfrskact(keynum: Integer; expl: Address;
			    valid, activ, intrp: Integer) return Integer;
	pragma interface (C, IInfrskact);
	pragma interface_name (IInfrskact, C_SUBP_PREFIX & "IInfrskact");

	function IIFRaeAlerterEvent(intrp: Integer) return Integer;
	pragma interface(C, IIFRaeAlerterEvent);
	pragma interface_name(IIFRaeAlerterEvent, C_SUBP_PREFIX & "IIFRaeAlerterEvent");

	-- Old style Activation calls (pre 6.4) 
	function IIactclm(tab, col: Address; intrp: Integer) return Integer;
	pragma interface (C, IIactclm);
	pragma interface_name (IIactclm, C_SUBP_PREFIX & "IIactclm");

	function IIactfld(fld: Address; intrp: Integer) return Integer;
	pragma interface (C, IIactfld);
	pragma interface_name (IIactfld, C_SUBP_PREFIX & "IIactfld");

	-- FRS Utilities
	procedure IIsleep(secs: Integer);
	pragma interface (C, IIsleep);
	pragma interface_name (IIsleep, C_SUBP_PREFIX & "IIsleep");

	procedure IIfrshelp(flag: Integer; subj, filenm: Address);
	pragma interface (C, IIfrshelp);
	pragma interface_name (IIfrshelp, C_SUBP_PREFIX & "IIfrshelp");

	procedure IIhelpfile(subj, filenm: Address);
	pragma interface (C, IIhelpfile);
	pragma interface_name (IIhelpfile, C_SUBP_PREFIX & "IIhelpfile");

	procedure IImessage(msg: Address);
	pragma interface (C, IImessage);
	pragma interface_name (IImessage, C_SUBP_PREFIX & "IImessage");

	procedure IIprnscr(filenm: Address);
	pragma interface (C, IIprnscr);
	pragma interface_name (IIprnscr, C_SUBP_PREFIX & "IIprnscr");

		  -- There is no IIprmptioS for Vads
	procedure IIprmptioA(echo: Integer; prompt: Address; ind: Address;
			     isvar, typ, len: Integer; retbuf: Address);
	pragma interface (C, IIprmptioA);
	pragma interface_name (IIprmptioA, C_SUBP_PREFIX & "IIprmptio");

	-- FRS Screen Updates
	procedure IIgetoper(putget: Integer);
	pragma interface (C, IIgetoper);
	pragma interface_name (IIgetoper, C_SUBP_PREFIX & "IIgetoper");

	procedure IIputoper(putget: Integer);
	pragma interface (C, IIputoper);
	pragma interface_name (IIputoper, C_SUBP_PREFIX & "IIputoper");

	procedure IIfldclear(fld: Address);
	pragma interface (C, IIfldclear);
	pragma interface_name (IIfldclear, C_SUBP_PREFIX & "IIfldclear");

	procedure IIclrflds;
	pragma interface (C, IIclrflds);
	pragma interface_name (IIclrflds, C_SUBP_PREFIX & "IIclrflds");

	procedure IIclrscr;
	pragma interface (C, IIclrscr);
	pragma interface_name (IIclrscr, C_SUBP_PREFIX & "IIclrscr");

	procedure IIredisp;
	pragma interface (C, IIredisp);
	pragma interface_name (IIredisp, C_SUBP_PREFIX & "IIredisp");

	function IIfsetio(form: Address) return Integer;
	pragma interface (C, IIfsetio);
	pragma interface_name (IIfsetio, C_SUBP_PREFIX & "IIfsetio");

	procedure IIputfldioI(fld: Address; ind: Address;
			      isvar, typ, len: Integer; ival: Integer);
	pragma interface (C, IIputfldioI);
	pragma interface_name (IIputfldioI, C_SUBP_PREFIX & "IIputfldio");

	procedure IIputfldioF(fld: Address; ind: Address;
			      isvar, typ, len: Integer; fval: float);
	pragma interface (C, IIputfldioF);
	pragma interface_name (IIputfldioF, C_SUBP_PREFIX & "IIputfldio");

	procedure IIputfldioA(fld: Address; ind: Address;
			      isvar, typ, len: Integer; addr: Address);
	pragma interface (C, IIputfldioA);
	pragma interface_name (IIputfldioA, C_SUBP_PREFIX & "IIputfldio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIputfldioS(fld: Address; ind: Address;
			      isvar, typ, len: Integer; str: String);

	procedure IIgetfldioA(ind: Address; isvar, typ, len: Integer;
			      addr: Address; fld: Address);
	pragma interface (C, IIgetfldioA);
	pragma interface_name (IIgetfldioA, C_SUBP_PREFIX & "IIgetfldio");

	-- TB Field Manipulation
	procedure IItfill;
	pragma interface (C, IItfill);
	pragma interface_name (IItfill, C_SUBP_PREFIX & "IItfill");

	procedure IItunend;
	pragma interface (C, IItunend);
	pragma interface_name (IItunend, C_SUBP_PREFIX & "IItunend");

	function IItunload return Integer;
	pragma interface (C, IItunload);
	pragma interface_name (IItunload, C_SUBP_PREFIX & "IItunload");

	function IItdelrow(tofill: Integer) return Integer;
	pragma interface (C, IItdelrow);
	pragma interface_name (IItdelrow, C_SUBP_PREFIX & "IItdelrow");

	function IItinsert return Integer;
	pragma interface (C, IItinsert);
	pragma interface_name (IItinsert, C_SUBP_PREFIX & "IItinsert");

	function IItscroll(tofill, recnum: Integer) return Integer;
	pragma interface (C, IItscroll);
	pragma interface_name (IItscroll, C_SUBP_PREFIX & "IItscroll");

	procedure IItclrrow;
	pragma interface (C, IItclrrow);
	pragma interface_name (IItclrrow, C_SUBP_PREFIX & "IItclrrow");

	function IItdata return Integer;
	pragma interface (C, IItdata);
	pragma interface_name (IItdata, C_SUBP_PREFIX & "IItdata");

	procedure IItdatend;
	pragma interface (C, IItdatend);
	pragma interface_name (IItdatend, C_SUBP_PREFIX & "IItdatend");

	procedure IItvalrow;
	pragma interface (C, IItvalrow);
	pragma interface_name (IItvalrow, C_SUBP_PREFIX & "IItvalrow");

	function  IItvalval(check: Integer) return Integer;
	pragma interface (C, IItvalval);
	pragma interface_name (IItvalval, C_SUBP_PREFIX & "IItvalval");

	function IItbinit(form, tab, mode: Address) return Integer;
	pragma interface (C, IItbinit);
	pragma interface_name (IItbinit, C_SUBP_PREFIX & "IItbinit");

	procedure IIthidecol(col, typ: Address);
	pragma interface (C, IIthidecol);
	pragma interface_name (IIthidecol, C_SUBP_PREFIX & "IIthidecol");

	function IItbact(form, tab: Address; toload: Integer) return Integer;
	pragma interface (C, IItbact);
	pragma interface_name (IItbact, C_SUBP_PREFIX & "IItbact");

	function IItbsetio(comm: Integer; form, tab: Address;
			   row: Integer) return Integer;
	pragma interface (C, IItbsetio);
	pragma interface_name (IItbsetio, C_SUBP_PREFIX & "IItbsetio");

	procedure IItbsmode(scrlmd: Address);
	pragma interface (C, IItbsmode);
	pragma interface_name (IItbsmode, C_SUBP_PREFIX & "IItbsmode");

	procedure IItclrcol(col: Address);
	pragma interface (C, IItclrcol);
	pragma interface_name (IItclrcol, C_SUBP_PREFIX & "IItclrcol");

	procedure IItcolval(col: Address);
	pragma interface (C, IItcolval);
	pragma interface_name (IItcolval, C_SUBP_PREFIX & "IItcolval");

	procedure IITBceColEnd;
	pragma interface (C, IITBceColEnd);
	pragma interface_name (IITBceColEnd, C_SUBP_PREFIX & "IITBceColEnd");

	procedure IItcoputioI(col: Address; ind: Address;
			      isvar, typ, len: Integer; ival: Integer);
	pragma interface (C, IItcoputioI);
	pragma interface_name (IItcoputioI, C_SUBP_PREFIX & "IItcoputio");

	procedure IItcoputioF(col: Address; ind: Address;
		isvar, typ, len: Integer; fval: float);
	pragma interface (C, IItcoputioF);
	pragma interface_name (IItcoputioF, C_SUBP_PREFIX & "IItcoputio");

	procedure IItcoputioA(col: Address; ind: Address;
		isvar, typ, len: Integer; addr: Address);
	pragma interface (C, IItcoputioA);
	pragma interface_name (IItcoputioA, C_SUBP_PREFIX & "IItcoputio");

		  -- This procedure requires a wrapper in the package body.
	procedure IItcoputioS(col: Address; ind: Address;
			      isvar, typ, len: Integer; str: String);

	procedure IItcogetioA(ind: Address; isvar, typ, len: Integer;
		addr: Address; col: Address);
	pragma interface (C, IItcogetioA);
	pragma interface_name (IItcogetioA, C_SUBP_PREFIX & "IItcogetio");

	-- FRS With Clause
	procedure IIFRgpsetioI(pid: Integer; nullind: Address;
		isvar, xtype, len: Integer; val: Integer);
	pragma interface(C, IIFRgpsetioI);
	pragma interface_name(IIFRgpsetioI, C_SUBP_PREFIX & "IIFRgpsetio");

	procedure IIFRgpsetioF(pid: Integer; nullind: Address;
		isvar, xtype, len: Integer; fval: float);
	pragma interface(C, IIFRgpsetioF);
	pragma interface_name(IIFRgpsetioF, C_SUBP_PREFIX & "IIFRgpsetio");

	procedure IIFRgpsetioA(pid: Integer; nullind: Address;
		isvar, xtype, len: Integer; addr: Address);
	pragma interface(C, IIFRgpsetioA);
	pragma interface_name(IIFRgpsetioA, C_SUBP_PREFIX & "IIFRgpsetio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIFRgpsetioS(pid: Integer; nullind: Address;
		isvar, xtype, len: Integer; str: String);

	procedure IIFRgpcontrol(state: Integer; alt: Integer);
	pragma interface(C, IIFRgpcontrol);
	pragma interface_name(IIFRgpcontrol, C_SUBP_PREFIX & "IIFRgpcontrol");

	-- Inquire/Set_FRS
	function IIiqset(objtype: Integer; row: Integer;
			 nm1, nm2, nm3: Address := IInull) return Integer;
	pragma interface (C, IIiqset);
	pragma interface_name (IIiqset, C_SUBP_PREFIX & "IIiqset");

	procedure IIstfsioI(attr: Integer; obj: Address; row: Integer;
			ind: Address; isvar, typ, len: Integer; ival: Integer);
	pragma interface (C, IIstfsioI);
	pragma interface_name (IIstfsioI, C_SUBP_PREFIX & "IIstfsio");

	procedure IIstfsioF(attr: Integer; obj: Address; row: Integer;
		ind: Address; isvar, typ, len: Integer; fval: float);
	pragma interface (C, IIstfsioF);
	pragma interface_name (IIstfsioF, C_SUBP_PREFIX & "IIstfsio");

	procedure IIstfsioA(attr: Integer; obj: Address; row: Integer;
		ind: Address; isvar, typ, len: Integer; addr: Address);
	pragma interface (C, IIstfsioA);
	pragma interface_name (IIstfsioA, C_SUBP_PREFIX & "IIstfsio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIstfsioS(attr: Integer; obj: Address; row: Integer;
			   ind: Address; isvar, typ, len: Integer; str: String);

	procedure IIiqfsioA(ind: Address; isvar, typ, len: Integer;
		addr: Address; attr: Integer; obj: Address; row: Integer);
	pragma interface (C, IIiqfsioA);
	pragma interface_name (IIiqfsioA, C_SUBP_PREFIX & "IIiqfsio");

	-- Attribute setting on Loadtable/Insertrow
	procedure IIFRsaSetAttrioI(attr: Integer; obj: Address;
			ind: Address; isvar, typ, len: Integer; ival: Integer);
	pragma interface (C, IIFRsaSetAttrioI);
	pragma interface_name (IIFRsaSetAttrioI, C_SUBP_PREFIX & "IIFRsaSetAttrio");

	procedure IIFRsaAttrioF(attr: Integer; obj: Address;
		ind: Address; isvar, typ, len: Integer; fval: float);
	pragma interface (C, IIFRsaAttrioF);
	pragma interface_name (IIFRsaAttrioF, C_SUBP_PREFIX & "IIFRsaAttrio");

	procedure IIFRsaSetAttrioA(attr: Integer; obj: Address;
		ind: Address; isvar, typ, len: Integer; addr: Address);
	pragma interface (C, IIFRsaSetAttrioA);
	pragma interface_name (IIFRsaSetAttrioA, C_SUBP_PREFIX & "IIFRsaSetAttrio");

		  -- This procedure requires a wrapper in the package body.
	procedure IIFRsaSetAttrioS(attr: Integer; obj: Address;
			   ind: Address; isvar, typ, len: Integer; str: String);


	-- Dynamic FRS
	procedure IIFRsqExecute(lang, ftag, itag: Integer; sq: Address);
	pragma interface(C, IIFRsqExecute);
	pragma interface_name(IIFRsqExecute, C_SUBP_PREFIX & "IIFRsqExecute");

	procedure IIFRsqDescribe(lang, ftag: Integer;
				 form, tab, mode: Address; sq: Address);
	pragma interface (C, IIFRsqDescribe);
	pragma interface_name (IIFRsqDescribe, C_SUBP_PREFIX & "IIFRsqDescribe");

end EQUEL_FORMS;

package body EQUEL_FORMS is

	-- The following ioS wrappers modify the I/O input string arguments
	-- and their types.  All these wrappers call the coresponding ioA
	-- procedure.

	procedure IIputfldioS(fld: Address; ind: Address;
			      isvar, typ, len: Integer; str: String) is
	begin
	    IIputfldioA(fld, ind, isvar, DB_CHA_TYPE, str'Length, str'Address);
	end IIputfldioS;

	procedure IIstfsioS(attr: Integer; obj: Address; row: Integer;
			ind: Address; isvar, typ, len: Integer; str: String) is
	begin
	    IIstfsioA(attr, obj, row, ind, isvar, DB_CHA_TYPE,
		      str'Length, str'Address);
	end IIstfsioS;

	procedure IIFRsaSetAttrioS(attr: Integer; obj: Address;
			ind: Address; isvar, typ, len: Integer; str: String) is
	begin
	    IIFRsaSetAttrioA(attr, obj, ind, isvar, DB_CHA_TYPE,
		      str'Length, str'Address);
	end IIFRsaSetAttrioS;

	procedure IItcoputioS(col: Address; ind: Address;
			      isvar, typ, len: Integer; str: String) is
	begin
	    IItcoputioA(col, ind, isvar, DB_CHA_TYPE, str'Length,str'Address);
	end IItcoputioS;

	procedure IIFRgpsetioS(pid: Integer; nullind: Address;
			       isvar, xtype, len: Integer; str: String) is
	begin
	    IIFRgpsetioA(pid, nullind, isvar, DB_CHA_TYPE, str'Length,
			 str'Address);
	end IIFRgpsetioS;

end EQUEL_FORMS;
