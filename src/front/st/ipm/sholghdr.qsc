/*
**      Copyright (c) 2004 Actian Corporation
**      All rights reserved.
*/

#include <compat.h>
#include <iicommon.h>
#include <si.h>
#include <cs.h>
#include <st.h>
#include <dbms.h>
#include <pc.h>
#include <lg.h>
#include <lgdstat.h>
#include <lk.h>
#include <fe.h>
#include <er.h>
#include        <adf.h>
#include        <ft.h>
#include        <fmt.h>
#include        <frame.h>
#include "lists.h"
#include "msgs.h" 
#include "dba.h"
/*
** Forward and external references
*/
VOID get_lklgstats();
VOID printlghdr();
VOID printlghlgx();
VOID morelghdr();
VOID morelghdtx();
FUNC_EXTERN VOID stat_decode();
FUNC_EXTERN VOID tablefield_find();

#define DIAGRAM_SIZE 70  /* must change WHEN the field width on form changes */
#define BOFEOF_MARKER '>'	/* delineates eof/bof in log_diagram */
#define NORANGE_MARKER '*'	/* when bof = eof therefor no range */
#define RANGE_MARKER '-'	/* delineates space inbetween bof&eof */
#define EXAMINE_MARKER '^'	/* delineates what block is being examined */
#define RESERVED_MARKER '+'	/* delineates reserved space */

#define	SHOW_RESERVED	TRUE


/*
** Declare file wide vars
**
** Statics of interest:
**	log_diagram - this contains the diagram of the log file displayed
**	    on the form.  It is static because it needs to be manipulated
**	    in the Examine submenu - i.e. highlighting the block that is
**	    being examined for transactions.  It is alos built up in the
**	    printlghdr routine.
**	start_position - this indicates the logical beginning of file
**	    in the log_diagram variable.  This is the array position of
**	    the logical begin of the log file.  This variable is set in
**	    the printlghdr routine and used in the Examine menuitem in
**	    the showlghdr routine.
**	end_position - this indicates the logical end of file
**	    in the log_diagram variable.  This is the array position of
**	    the logical end of the log file.  This variable is set in
**	    the printlghdr routine and used in the Examine menuitem in
**	    the showlghdr routine.
**	reserved_position - this indicates the imaginary position
**	    in the log_diagram variable where reserved space starts.
**	    Between reserved_position and start_position, space will
**	    be displayed as that reserved for use by the recovery system.
**	pages_per_block - how many log file pages are represented by
**	    one block in the log_diagram (scaling factor)
**	eof/bof - end of file and beginning of file are needed in the
**	    examine submenu in showlghdr() but are calculated in printlghdr()
*/
## static char Fshowlghdr[] = "fshowlghdr";
## static char Fmorelghdtx[] = "fmorelghdtx";
## static char Fmorelghdr[] = "fmorelghdr";

## static char *Title1 = "Transactions occuring in";
## static char *Title2 = "the log file between pages";
## static char *Title3 = "are";
## static char *Title4 = "displayed in the scrolling";
## static char *Title5 = "area to the right ------->";
## static char *Title6 = "Transaction ID   Session      Database";
## static char log_diagram[DIAGRAM_SIZE + 1]; 
## static int	start_position,	end_position, reserved_position;
## static double	pages_per_block;
## static i4	ii_eof, bof;
/*
** List Constants used by log display routines
*/


/*
**
**  File: sholghdr.qc
**
**  Purpose - this file contains the routines which display logging
**	system header form.  
**
**  This file contains:
**	showlghdr - displays the logging system header information form. 
**	printlghdr - puts the values on the form
**	morelghdtx - displays more info for examining log file transactions.
**      morelghdr - displays more info for the log header screen
**
**  History
**	8/27/89		tomt	created
**	9/2/89		tomt	added display code
**	9/6/89		tomt	added bargraph for %logfile used.
**				added autorefresh capabilities.
**	9/29/89		tomt	added blocks in use field
**	10/1/89		tomt	integrated 6.3 changes
**	3/15/90		tomt	added blocks_free field and changed form
**	3/17/90		tomt	changed percent display to diagram of log file
**	4/2/90		tomt	added more info form for examining transactions
**	9/12/90		tomt	added more info form for log header info
**				and also changed appearance of log header
**				screen
**	3/21/91		tomt	changed title on form to trim.  Removed
**                              variable used to hold title.
**      5/26/93 (vijay)
**              include pc.h
**	26-Aug-1993 (fredv)
**		Included <st.h>.
**      21-Sep-1993 (smc)
**              Added <cs.h> for CS_SID.
**	4-Jan-1994 (jpk)
**		Updated Lghdrstat to add logging system statuses
**		new in 6.5.
**	21-mar-94 (smc) Bug #60829
**		Added #include header(s) required to define types passed
**		in prototyped external function calls.
**	 1-nov-95 (nick)
**		Removed flag_file.
**	24-nov-95 (nick)
**		Fix #58838 ; ensure the calculated current_position
**		remains within the log diagram array's bounds.
**	18-mar-96 (mckba01) 
**		#70619, modified 'printlghdr' so that a calculation
**		is not performed if the logging system is not online. 
**	20-jan-97 (mcgem01)
**		eof is reserved when using Micorsoft Visual/C++
**      08-Dec-1997 (hanch04)
**          Use new la_block field when block number is needed instead
**          of calculating it from the offset
**          Keep track of block number and offset into the current block.
**          for support of logs > 2 gig
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	18-sep-2003 (abbjo03)
**	    Include pc.h ahead of lg.h.
**	04-Jan-2011 (jonj) SIR 124894 LG/LK/IPM unification
**	    Delete unneeded Lghdrstat.
**      13-Jul-2011 (hanal04) SIR 125458
**          Update cs_elog calls inline with sc0e_putAsFcn changes.
*/
VOID
showlghdr()
{
    bool	e_xit = FALSE, refresh = TRUE;
##  int		timeout, diagram_column;
##  int		curcolumn, current_position, old_position;
##  int		low_page, high_page, list_count;
##  int		on_valid_area = FALSE;	/* used in Examine menuitem */
##  char	field_name[FE_MAXNAME + 1];
    static i4	forms_added = FALSE;

##  GLOBALREF int *fshowlghdr;
##  GLOBALREF int *fmorelghdtx;
##  GLOBALREF int *fmorelghdr;

    /*
    **  Determine if forms are added, if not addform them.  Also
    **  don't add forms if output is being directed to a file
    */
    if (forms_added == FALSE)
    {
##	ADDFORM fshowlghdr;
##	ADDFORM fmorelghdtx;
##	ADDFORM fmorelghdr;
	forms_added = TRUE;
    }

    /* Set the refresh interval */
    timeout = frs_timeout;		/* place into local frs var */
##  SET_FRS FRS (timeout = timeout);	/* set the refresh time */

/* ##  DISPLAY Fshowlghdr READ		-- no longer this */
    /* Display the form -- once again a popup */
##  DISPLAY Fshowlghdr READ WITH STYLE = POPUP (BORDER = NONE,
##  STARTCOLUMN = 1, STARTROW = 2)
##  INITIALIZE
##  {
	/* Put information on the form.  some of it must be formatted first */
##	PUTFORM Fshowlghdr (#title1 = Title1,
##	    #title2 = Title2, #title3 = Title3, #title4 = Title4,
##	    #title5 = Title5, #title6 = Title6);
	current_position = 0;
	old_position = 0;
	printlghdr();	/* put the values on the form */
	refresh_status(VISIBLE, "flogmenu");
##	redisplay
##	RESUME MENU
##  }
##  ACTIVATE TIMEOUT
##  {
	printlghdr();	/* put the values on the form */
##	RESUME MENU
##  }
##  ACTIVATE MENUITEM "More_Info":
##  {
##      SET_FRS FRS (timeout = 0);	/* turn off autorefresh */
	morelghdr();
	/*  Set the refresh interval */
	timeout = frs_timeout;		/* place into local frs var */
##      SET_FRS FRS (timeout = timeout);/* set the refresh time */
##  }
##  ACTIVATE MENUITEM "Refresh":
##  {
	printlghdr();	/* put the values on the form */
##  }
##  ACTIVATE MENUITEM "Examine":
##  {
##      DISPLAY SUBMENU
##	INITIALIZE
##	{
	    /* Turn on Examine fields and messages */
##          SET_FRS FRS (timeout = 0);	/* turn off autorefresh */
##	    SET_FRS FIELD Fshowlghdr (invisible(#low_page) = 0,
##		invisible(#high_page) = 0, invisible(#title1) = 0,
##		invisible(#title2) = 0, invisible(#title3) = 0,
##		invisible(#title4) = 0, invisible(#title5) = 0,
##              invisible(#title6) = 0,
##		reverse(#log_diagram) = 1, invisible(#log_xlist) = 0)
	    refresh = TRUE;	/* ensure fresh log xaction info */

##	    INITTABLE Fshowlghdr #log_xlist READ
##		(#write = i4, #split = i4, #force = i4,
##		#wait = i4, #tr_first = i4, #tr_last = i4, #tr_cp = i4,
##		#tr_pid = c8, #tr_status = c80)

	    /*
	    ** determine if user is on the log_diagram field.  If the user is,
	    ** then determine if the cursor rests on an occupied part of the
	    ** diagram.
	    */
##	    INQUIRE_FRS FIELD Fshowlghdr (field_name = name) /* where am i */
	    if (STcompare(field_name, "log_diagram") == 0)  
	    {

		/*
		** Cursor is on log_diagram field, mark position if valid in
		** the log_diagram and get the log xaction info.  
		*/
		/* where on field ? */
##		INQUIRE_FRS FIELD "" (diagram_column = startcolumn)
##		INQUIRE_FRS FRS (curcolumn = cursorcolumn) /* wheres the csr */
		diagram_column--;	/* field title fools FRS */

		/*
		** just because we have the log diagram as the current
		** field doesn't mean the cursor is on it ; it may be
		** on the menuline
		*/
		if (curcolumn < diagram_column)
		{
		    curcolumn = diagram_column;
		}

		current_position = curcolumn - diagram_column;
								/* with respect
								** to 'C' array
								*/
		if (current_position >= DIAGRAM_SIZE)
		{
		    current_position = DIAGRAM_SIZE - 1;
		}

		if (end_position < start_position)	/* case 1: eof < bof */
		{
		    if ((current_position <= end_position) /* valid area */
			|| (current_position >= start_position))
		    {    
			on_valid_area = TRUE;	/* used below to set range */
		    }
		    else	
		    {
			on_valid_area = FALSE;	/* used below */
		    }
		}
		else if (start_position < end_position) /* case 2: bof < eof */
		{
		    if ((current_position <= end_position)
			&& (current_position >= start_position))
		    {				/* valid area */
			on_valid_area = TRUE;	/* used below to set range */
		    }
		    else	
		    {
			on_valid_area = FALSE;	/* used below */
		    }
		}
		else	/* case 3: eof is in same block as bof */
		{
		    if (current_position == end_position) /* valid area */
		    {    
			on_valid_area = TRUE;	/* used below to set range */
		    }
		    else	
		    {
			on_valid_area = FALSE;	/* used below */
		    }
		}
	    }
	    else	/* on some other field */
	    {

		/* Not on log_diagram field, set logical accordingly */
		on_valid_area = FALSE;
	    } /* end if (STcompare(field_name, "log_diagram") == 0)  */

	    /*
	    ** In any event, display the range of log file pages represented
	    ** by the current position if cursor was on valid area, else
	    ** default to logical bof.  Set the proper position in the
	    ** log_diagram to indicate what part we are examining.
	    */
	    if (on_valid_area)	/* cursor on an occupied area of log file */
	    {
		low_page = (int)((double)current_position *
		    pages_per_block);
		high_page = (int)(((double)current_position *
		    pages_per_block) + pages_per_block);
	    }
	    else	/* not on valid area, default to start_position */
	    {
		low_page = (int)((double)start_position *
		    pages_per_block);
		high_page = (int)(((double)start_position *
		    pages_per_block) + pages_per_block);
		current_position = start_position;
	    }

	    /*
	    **	  adjust low and high page so they don't indicate values
	    **	  outside of valid range
	    */
	    if (ii_eof > bof)
	    {
		if (low_page < bof)
	        {
		    low_page = bof;
	        }
	        if (high_page > ii_eof)
	        {
		    high_page = ii_eof;
	        }
	    }
	    else   /* tail is past the head */
	    {
		if ((low_page < bof) && (low_page > ii_eof))
	        {
		    low_page = bof;
	        }
	        if ((high_page > ii_eof) && (high_page < bof))
	        {
		    high_page = ii_eof;
	        }
	    }
	    if (low_page == 0)	/* page 0 reserved for log header */
	    {
		low_page = 1;	/* useless to look for xactions on page 0 */
	    }
	    /* shows where we are */
	    log_diagram[current_position] = EXAMINE_MARKER;

	    /* Put the matching transactions on the form */
	    printlghlgx(low_page, high_page, Fshowlghdr, &refresh);
##	    PUTFORM Fshowlghdr (#log_diagram = log_diagram,
##		#low_page = low_page, #high_page = high_page)
	    refresh_status(INVISIBLE, "flogmenu");
##	    redisplay
##	}
##	ACTIVATE MENUITEM "Next":
##	{
	    /* Move the examine_marker to next block  */
	    old_position = current_position;	/* used to reset prev loc */
	    if (current_position == end_position) /* wrap around logical eof */
	    {
		current_position = start_position;
	    }
	    /* wrap around phys eof */
	    else if ((current_position + 1) == DIAGRAM_SIZE)
	    {
		current_position = 0;	/* wrap around */
	    }
	    else	/* move one to the right */
	    {
		current_position++;	
	    }	/* end of wrap around handling */
	    log_diagram[current_position] = EXAMINE_MARKER;

	    /* Set the old_position marker in log_diagram to what it was */
	    if ((old_position == start_position) &&
		(start_position == end_position)) /* end = beginning */
	    {
		log_diagram[old_position] = NORANGE_MARKER;
	    }
	    else if ((old_position == start_position) ||
		(old_position == end_position)) /* set to eof/bof char */
	    {
		log_diagram[old_position] = BOFEOF_MARKER;
	    }
	    else
	    {
		log_diagram[old_position] = RANGE_MARKER;
	    }

	    /* Calculate the new ranges for current page */
	    low_page = (int)((double)current_position *
		pages_per_block);
	    high_page = (int)(((double)current_position *
		pages_per_block) + pages_per_block);

	    /*
	    ** adjust low and high page so they don't indicate values
	    **	  outside of valid range
	    */
	    if (ii_eof > bof)
	    {
		if (low_page < bof)
	        {
		    low_page = bof;
	        }
	        if (high_page > ii_eof)
	        {
		    high_page = ii_eof;
	        }
	    }
	    else   /* tail is past the head */
	    {
		if ((low_page < bof) && (low_page > ii_eof))
	        {
		    low_page = bof;
	        }
	        if ((high_page > ii_eof) && (high_page < bof))
	        {
		    high_page = ii_eof;
	        }
	    }
	    if (low_page == 0)	/* page 0 reserved for log header */
	    {
		low_page = 1;	/* useless to look for xactions on page 0 */
	    }

	    /*
	    **	  Put the matching transactions on the form
	    */
##	    CLEAR FIELD #log_xlist
	    printlghlgx(low_page, high_page, Fshowlghdr, &refresh);
##	    PUTFORM Fshowlghdr (#log_diagram = log_diagram,
##		#low_page = low_page, #high_page = high_page)
##	}
##	ACTIVATE MENUITEM "Previous":
##	{
	    /*
	    **	  Move the examine_marker to previous block
	    */
	    old_position = current_position;	/* used to reset previous loc */
	    if (current_position == start_position) /* wrap around logical eof */
	    {
		current_position = end_position;
	    }
	    else if (current_position == 0)	/* wrap around phys eof */
	    {
		current_position = DIAGRAM_SIZE - 1;	/* wrap around */
	    }
	    else	/* move one to the left */
	    {
		current_position--;
	    }	/* end of wrap around handling */
	    log_diagram[current_position] = EXAMINE_MARKER;

	    /* Set the old_position marker in log_diagram to what it was */
	    if ((old_position == start_position) &&
		(start_position == end_position)) /* end = beginning */
	    {
		log_diagram[old_position] = NORANGE_MARKER;
	    }
	    else if ((old_position == start_position) ||
		(old_position == end_position)) /* set to eof/bof char */
	    {
		log_diagram[old_position] = BOFEOF_MARKER;
	    }
	    else
	    {
		log_diagram[old_position] = RANGE_MARKER;
	    }

	    /* Calculate the new ranges for current page */
	    low_page = (int)((double)current_position *
		pages_per_block);
	    high_page = (int)(((double)current_position *
		pages_per_block) + pages_per_block);

	    /*
	    **	  adjust low and high page so they don't indicate values
	    **	  outside of valid range
	    */
	    if (ii_eof > bof)
	    {
		if (low_page < bof)
	        {
		    low_page = bof;
	        }
	        if (high_page > ii_eof)
	        {
		    high_page = ii_eof;
	        }
	    }
	    else   /* tail is past the head */
	    {
		if ((low_page < bof) && (low_page > ii_eof))
	        {
		    low_page = bof;
	        }
	        if ((high_page > ii_eof) && (high_page < bof))
	        {
		    high_page = ii_eof;
	        }
	    }
	    if (low_page == 0)	/* page 0 reserved for log header */
	    {
		low_page = 1;	/* useless to look for xactions on page 0 */
	    }

	    /*
	    **	  Put the matching transactions on the form
	    */
##	    CLEAR FIELD #log_xlist
	    printlghlgx(low_page, high_page, Fshowlghdr, &refresh);
##	    PUTFORM Fshowlghdr (#log_diagram = log_diagram,
##		#low_page = low_page, #high_page = high_page)
##	}
##	ACTIVATE MENUITEM "More_Info":
## 	{
	    /* make sure user is on scrolling area */
##	    INQUIRE_FRS FIELD Fshowlghdr (field_name = name) /* where am i */
	    if (STcompare(field_name, "log_xlist") != 0)  /* NOT on field */
	    {
		POP_MSG("The cursor must be on the transaction scrolling area");
##		RESUME FIELD #log_xlist
	    }

	    /* get number of dbs in logging system */
##	    INQUIRE_FRS TABLE Fshowlghdr (list_count = DATAROWS(#log_xlist))
	    if (list_count == 0)
	    {
		POP_MSG("There are no transactions to get information on");
##		RESUME
	    }
	    morelghdtx();	/* display the extra info */
##	}
##	ACTIVATE MENUITEM "Find", frskey7:
##      {
##	    INQUIRE_FRS TABLE Fshowlghdr (list_count = DATAROWS(#log_xlist))
	    if (list_count == 0)
	    {
		POP_MSG("There is nothing to find");
##		RESUME
	    }
##          INQUIRE_FRS COLUMN Fshowlghdr #log_xlist (field_name = name)
	    tablefield_find();
##	    RESUME COLUMN #log_xlist field_name
##	}
##	ACTIVATE MENUITEM "End", frskey3:
##	{
	    /* Set the refresh interval */
	    timeout = frs_timeout;		/* place into local frs var */
##          SET_FRS FRS (timeout = timeout);	/* set the refresh time */
##	    SET_FRS FIELD Fshowlghdr (invisible(#low_page) = 1,
##		invisible(#high_page) = 1, invisible(#title1) = 1,
##		invisible(#title2) = 1, invisible(#title3) = 1,
##		invisible(#title4) = 1, invisible(#title5) = 1,
##              invisible(#title6) = 1,
##		reverse(#log_diagram) = 0, invisible(#log_xlist) = 1)

	    /* Set the current_position marker in log_diagram to what it was */
	    if ((current_position == start_position) &&
		(start_position == end_position)) /* end = beginning */
	    {
		log_diagram[current_position] = NORANGE_MARKER;
	    }
	    else if ((current_position == start_position) ||
		(current_position == end_position)) /* set to eof/bof char */
	    {
		log_diagram[current_position] = BOFEOF_MARKER;
	    }
	    else
	    {
		log_diagram[current_position] = RANGE_MARKER;
	    }
##	    PUTFORM Fshowlghdr (#log_diagram = log_diagram)
##	    BREAKDISPLAY
##	}
	refresh_status(VISIBLE, "flogmenu");
##	redisplay
##  }
##  ACTIVATE MENUITEM "Help", frskey1:
##  {
##      SET_FRS FRS (timeout = 0);	/* turn off autorefresh */
	my_help("ipmshlgh.hlp",  "Logging System Header");

	/* Set the refresh interval */
	timeout = frs_timeout;		/* place into local frs var */
##      SET_FRS FRS (timeout = timeout);	/* set the refresh time */
##  }
##  ACTIVATE MENUITEM "End", frskey3:
##  {
##	BREAKDISPLAY
##  }
##  ACTIVATE MENUITEM "Quit", frskey2:
##  {
	e_xit = TRUE;		/* user wants to leave */
##	MESSAGE " "		/* force cursor to bottom of screen */
##	BREAKDISPLAY
##  }

    if (e_xit) {		/* user wants to leave */
	terminate(OK);
    }
##  SET_FRS FRS (timeout = 0);	/* turn off autorefresh */
    refresh_status(INVISIBLE, "flogmenu");
    return;
}

/*
** morelghdtx() - This routine displays the popup form which show the
**	less needed header examine transaction info.
**
** History
**	4/2/90		tomt	written
**
*/
VOID
morelghdtx()
{
/*
** Declare Variables
*/
##  int		write,	split,	force,	wait,	tr_first,	tr_last;
##  int		tr_cp;
##  char	tr_status[81],	tr_pid[HEXID_SIZE + 1];

##  DISPLAY Fmorelghdtx READ WITH STYLE = POPUP (STARTROW = 5, BORDER = NONE)
##  INITIALIZE
##  {
	/*
	**   Get the values off of the tablefield on the base form and
	**   place them on the current form
	*/
##	GETROW Fshowlghdr #log_xlist (write = #write, split = #split,
##	    force = #force, wait = #wait, tr_first = #tr_first,
##	    tr_last = #tr_last, tr_cp = #tr_cp, tr_pid = #tr_pid,
##	    tr_status = #tr_status)
##	PUTFORM Fmorelghdtx (#write = write, #split = split, #force = force,
##	    #wait = wait, #tr_first = tr_first, #tr_last = tr_last,
##	    #tr_cp = tr_cp, #tr_pid = tr_pid, #tr_status = tr_status)
##	REDISPLAY
##	SUBMENU
##	ACTIVATE MENUITEM "End", frskey3:
##	{
##	    BREAKDISPLAY
##	}
##  }

    return;
}

/*
** printlghdr - puts the log header values on the form or to a file
**
** Inputs
**	None
**
** Outputs
**	values to form or to screen
**
** Return
**	None
**
** History
**	9/2/89		tomt	created
**	9/5/89		tomt	added bargraph for % of log file used
**	9/29/89		tomt	added blocks in use field
**	10/1/89		tomt	integrated 6.3 changes
**	3/15/90		tomt	added blocks free field and changed form
**	3/17/90		tomt	changed percent display to diagram of log file
**	12/13/92	jpk	support side effects of XA project
**      15-jan-1996 (toumi01; from 1.1 axp_osf port)
**            Added kchin's change (from 6.4) for axp_osf.  Also changed
**            blocks_reserved, blocks_reserved_mb, and reserve_bytes which
**            not part of kchin's change
**            9/10/93 kchin changed type of blocks_in_use, blocks_in_use_mb,
**                          blocks_free, blocks_free_mb, bufcnt, and
**                          lgd_status from long to i4, to make the
**                          declarations of these variables consistent,
**                          eg. tally with the decl'n in get_lklgstats().
**                          This is to fix problems when running
**                          on 64-bit platform such as Alpha OSF/1, in
**                          this case long is 64-bit, which is no longer
**                          similar in size to 32-bit int, thus mixing
**                          them will result in error, moreover, 64-bit
**                          integer is not supported by SQL/QUEL yet.
**
**	18/03/96	mckba01	70619, Divide by zero arithmetic trap.
**				Move calculation of blocks_reserved
**				to a point where we are sure the
**				logging system in online.
**
**	5-Jan-2006 (kschendel)
**	    Log reservation in bytes is now a u_i8.
*/
VOID
printlghdr()
{
##  i4	cp, ncp_page;
##  i4	blocks_in_use, blocks_in_use_mb;
##  i4	blocks_free, blocks_free_mb;
##  i4	blocks_reserved, blocks_reserved_mb;
##  i8	reserved_bytes;
##  double	fend_position, fstart_position, freserved_position;
##  int		percent_full, counter;
##  i4	bufcnt;
##  i4	lgd_status;
##  char	tran_id[17], warning[12];
##  char	lgh_begin[25], lgh_cp[26], lgh_end[26];
##  char	log_status[81], jnl_window[81];
    LG_LA	fcp;
    LG_LA	lcp;
    LG_HEADER	header;
##  i4	lgh_l_logfull;
##  i4	lgh_size;
##  i4	lgh_count, lgh_count_mb;
##  i4	lgh_l_cp;
##  i4	lgh_l_abort;

    /*
    **    Put information on the form.  some of it must be formatted first
    */
    get_lklgstats(GET_LOGHEADER, (PTR) &header);
    get_lklgstats(GET_LOGFJNLCP, (PTR) &fcp);
    get_lklgstats(GET_LOGLJNLCP, (PTR) &lcp);
    get_lklgstats(GET_LOGSTS, (PTR) &lgd_status);
    get_lklgstats(GET_LG_A_RES_SPACE, (PTR) &reserved_bytes);

    /* if ((lgd_status & LG_E_ONLINE) == 0) what the call is on UNIX */
    if ((lgd_status & 1) == 0)
    {
	POP_MSG("Warning: Can't get logging information, system not online");
	return;
    }
    blocks_reserved = reserved_bytes / header.lgh_size;
    get_lklgstats(GET_LOGBCNT, (PTR) &bufcnt);

    STprintf(tran_id, "%x%0x", header.lgh_tran_id.db_high_tran,
	header.lgh_tran_id.db_low_tran);

    bof = header.lgh_begin.la_block,
    STprintf(lgh_begin, "<%d:%d:%d>",  header.lgh_begin.la_sequence, 
        bof, header.lgh_begin.la_offset);

    cp = header.lgh_cp.la_block;
    STprintf(lgh_cp, "<%d:%d:%d>", header.lgh_cp.la_sequence,
	cp, header.lgh_cp.la_offset);

    ii_eof = header.lgh_end.la_block;
    STprintf(lgh_end, "<%d:%d:%d>", header.lgh_end.la_sequence,
	ii_eof, header.lgh_end.la_offset);

    STprintf(jnl_window, "<%d,%d,%d>..<%d,%d,%d>",
	fcp.la_sequence,
	fcp.la_block,
	fcp.la_offset,
	lcp.la_sequence,
	lcp.la_block,
	lcp.la_offset);

    stat_decode(log_status, LGD_STATES, (u_i4)lgd_status);

    /* Calculate how full the log file is, then build display string. */
    if (ii_eof < bof)	/* need to account for wraparound */
    {
	blocks_in_use = (header.lgh_count - bof) + ii_eof;
    }
    else
    {
	blocks_in_use = ii_eof - bof;
    }
    blocks_in_use_mb = (blocks_in_use * header.lgh_size) / 1024;

    /* properly determine next cp accounting for wraparound */
    if ((cp + header.lgh_l_cp) > header.lgh_count)	/* wraparound */
    {
	ncp_page = (cp + header.lgh_l_cp) - header.lgh_count;
    }
    else
    {
	ncp_page = header.lgh_l_cp + cp;		/* calculate next cp */
    }

    blocks_free = header.lgh_count - blocks_in_use - blocks_reserved;
    blocks_free_mb = (blocks_free * header.lgh_size) / 1024;
    percent_full = (i4)(((double) (blocks_in_use + blocks_reserved) /
	    (double) header.lgh_count) * 100.0);

    /*
    **  Determine where the logical end and beginning of file are for
    **  the diagram. Perform proper rounding and handle when end or
    **  beginning is at full scale.
    */
    pages_per_block = (double)header.lgh_count / (double)DIAGRAM_SIZE;
    fend_position = ((double)ii_eof / pages_per_block);
    fstart_position = ((double)bof / pages_per_block);

    if (bof >= blocks_reserved)
    {
	freserved_position = ((double) (bof - blocks_reserved) 
		/ pages_per_block);
    }
    else		/* it too wraps around */
    {
	freserved_position = ((double) ((header.lgh_count - blocks_reserved)
		 + bof) / pages_per_block);
    }

    start_position = (int)fstart_position;
    end_position = (int)fend_position;
    reserved_position = (int)freserved_position;

/*    if ((fstart_position - (int)fstart_position) < 0.5)
**    {
**	start_position = (int)fstart_position;
**    }
**    else
**    {
**	start_position = (int)fstart_position + 1;
**    }
**
**    if ((fend_position - (int)fend_position) < 0.5)
**    {
**	end_position = (int)fend_position;
**    }
**    else
**    {
**	end_position = (int)fend_position + 1;
**    }
*/
    if (end_position == DIAGRAM_SIZE)
    {
	end_position = DIAGRAM_SIZE - 1;  /* correct array index */
    }	
    if (start_position == DIAGRAM_SIZE)
    {
	start_position = DIAGRAM_SIZE - 1;  /* correct array index */
    }

    /* clear diagram */
    for (counter = 0; counter < DIAGRAM_SIZE; counter++)
    {
	log_diagram[counter] = ' ';  /* space fill */
    }
    log_diagram[DIAGRAM_SIZE] = EOS;  /* null terminate */

    /*
    **  Fill in the log file diagram between the beginning and end
    */
    for (counter = 0; counter < DIAGRAM_SIZE; counter++)
    {
	if (start_position == end_position)
	{
	    if (counter < start_position)
	    {
		log_diagram[counter] = ' ';
	    }
	    else if (counter == start_position)
	    {
		log_diagram[start_position] = NORANGE_MARKER;  /* start = end */
	    }
	    else
	    {
		log_diagram[counter] = '\0';	/* null terminate and break */
		break;
	    }
	}
	else if (end_position < start_position)
					/* need to fill from phys begin
					** to logical end and from logical
                                        ** begin to physical end
					*/
	{
	    if ((counter > start_position)
		|| (counter < end_position)) /* fill with '-' */
	    {
		log_diagram[counter] = RANGE_MARKER;
	    }
	    else if (counter == start_position)  /* indicate start */
	    {
		log_diagram[counter] = BOFEOF_MARKER;
	    }
	    else if ((counter > end_position) && (counter < start_position))
	    {
		log_diagram[counter] = ' ';
	    }
	    else if (counter == end_position)
	    {
		log_diagram[counter] = BOFEOF_MARKER;
	    }
	}
	else  /* BOF is less than EOF */
	{
	    if (counter < start_position) 
	    {
		log_diagram[counter] = ' ';
	    }
	    else if (counter == start_position)  /* indicate start */
	    {
		log_diagram[counter] = BOFEOF_MARKER;
	    }
	    else if ((counter < end_position)
		&& (counter > start_position)) /* fill with '-' */
	    {
		log_diagram[counter] = RANGE_MARKER;
	    }
	    else if (counter == end_position)
	    {
		log_diagram[counter] = BOFEOF_MARKER;
	    }
	    else /* past the logical end: null term and break */
	    {
#if SHOW_RESERVED
		if ((start_position >= reserved_position)
			&& (counter >= reserved_position))
		{
#endif
		    log_diagram[counter] = EOS;
		    break;
#if SHOW_RESERVED
		}
#endif
	    }
	}
#if SHOW_RESERVED
	if (start_position > reserved_position)
	{
	    if ((counter > reserved_position) && (counter < start_position))
	    {
		log_diagram[counter] = RESERVED_MARKER;
	    }
	}
	else if (start_position < reserved_position)	/* wrapped */
	{
	    if ((counter < start_position) || (counter > reserved_position))
	    {
		log_diagram[counter] = RESERVED_MARKER;
	    }
	}
	else
	{
		;	/* no need to mark anything as reserved */
	}
#endif
    } /* end of FOR loop */
    log_diagram[DIAGRAM_SIZE] = EOS;  /* null terminate */

    /* determine whether or not to warn of log file force_abort or log_full */
    if (((blocks_in_use + blocks_reserved) >= header.lgh_l_abort) &&
	((blocks_in_use  + blocks_reserved) < header.lgh_l_logfull))
    {
	STcopy("FORCE ABORT", warning);
##	PUTFORM Fshowlghdr (#warning = warning)
##	SET_FRS FIELD Fshowlghdr (invisible(#warning) = 0,
##	    reverse(#warning) = 1, blink(#warning) = 0);
    }
    else if ((blocks_in_use  + blocks_reserved) >= header.lgh_l_logfull)
    {
	STcopy("LOG FULL", warning);
##	PUTFORM Fshowlghdr (#warning = warning)
##	SET_FRS FIELD Fshowlghdr (invisible(#warning) = 0,
##	    reverse(#warning) = 1, blink(#warning) = 1);
    }
    else
    {
	STcopy("OK", warning);
##	PUTFORM Fshowlghdr (#warning = warning)
##	SET_FRS FIELD Fshowlghdr (reverse(#warning) = 0,
##	    blink(#warning) = 0, invisible(#warning) = 1);
    }

    lgh_l_logfull = header.lgh_l_logfull;
    lgh_size = header.lgh_size;
    lgh_count = header.lgh_count;
    lgh_count_mb = (lgh_count * header.lgh_size) / 1024;
    lgh_l_cp = header.lgh_l_cp;
    lgh_l_abort = header.lgh_l_abort;

##  PUTFORM Fshowlghdr (#lgh_size = lgh_size,
##	#lgh_count = lgh_count, #bufcnt = bufcnt,
##	#lgh_l_cp = lgh_l_cp, #lgh_l_logfull = lgh_l_logfull,
##	#lgh_l_abort = lgh_l_abort, #lgh_begin = lgh_begin,
##	#lgh_cp = lgh_cp, #lgh_end = lgh_end, #lgh_tran_id = tran_id,
##	#lga = jnl_window, #lgd_status = log_status,
##	#blocks_free = blocks_free, #log_diagram = log_diagram,
##	#blocks_in_use = blocks_in_use, #reserved = blocks_reserved,
##	#percent_used = percent_full,
##	#bof_page = bof, #eof_page = ii_eof, #lcp_page = cp,
##	#ncp_page = ncp_page)

    return;
}

/*
** morelghdr() - This routine displays the popup form which show the
**	less needed header info.
**
** History
**	9/12/90		tomt	written
**
*/
VOID
morelghdr()
{
    /*
    ** Declare Variables
    */
##  char	lghbegin[25], lghcp[26],	lghend[26];
##  char	jnl_win[81],	lgh_tranid[17];

##  DISPLAY Fmorelghdr READ WITH STYLE = POPUP (BORDER = NONE,
##  STARTROW = 14, STARTCOLUMN = 6)
##  INITIALIZE
##  {
	/*
	**   Get the values off of the tablefield on the base form and
	**   place them on the current form
	*/
##	GETFORM Fshowlghdr (lghbegin = #lgh_begin, lghcp = #lgh_cp,
##	    lghend = #lgh_end, lgh_tranid = #lgh_tran_id, jnl_win = #lga)
##	PUTFORM Fmorelghdr (#lgh_begin = lghbegin, #lgh_cp = lghcp,
##	    #lgh_end = lghend, #lgh_tran_id = lgh_tranid, 
##	    #lga = jnl_win)
##	REDISPLAY
##	SUBMENU
##	ACTIVATE MENUITEM "End", frskey3:
##	{
##	    BREAKDISPLAY
##	}
##  }

    return;
}
