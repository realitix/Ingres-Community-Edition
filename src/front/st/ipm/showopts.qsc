/*
**      Copyright (c) 2004 Actian Corporation
**      All rights reserved.
*/

/* globals and includes */
#include <compat.h>
#include <iicommon.h>
#include <si.h>
#include <cs.h>
#include <st.h>
#include <dbms.h>
#include <fe.h>
#include <pc.h>
#include <lg.h>
#include <lk.h>
#include <er.h>
#include        <adf.h>
#include        <ft.h>
#include        <fmt.h>
#include        <frame.h>
#include "lists.h"
#include "msgs.h" 
#include "dba.h"

/* Option codes for option_work routine */
#define		CHECK		 0	/* check user options */
#define		CHECK_AND_SAVE	 1	/* check user options then set flags */
#define		YNSIZE		1 + 1	/* str = "y" or "n" */

/*
** Forward and External References
*/
VOID put_options();
VOID set_options();
i4  get_db_id();
i4  get_nextdb();
i4  option_work();
PTR displktype();
PTR dispdb();
i4  trans_lock_type();
i4  trns_lnm_to_lktyp();
i4  getlockcat();

/*
** Declares
*/
## static char Fshowopts[] = "fshowopts";

/*
**	put_options - this routine puts the options chosen by the
**	the user on the command line.  This allows a user to specify
**	options on startup and see them by calling up the options form.
**
**		Written by:	Tom Turchioe   Relational Technology
**		Date	  :     3-aug-1988
**
**	History
**	2/6/89   tomt   Added support for popup help for list of dbnames
**	3/8/89   tomt   Added lockname popup help and moved routines for
**			displaying those popups into this file
**			dispdb().
**	9/6/89	 tomt  Added an frs timeout field which the user can
**		       set.  This is only used on certian forms.
**      3/13/90  tomt  added lock and log stats
**      5/26/93 (vijay)
**              include pc.h
**	26-Aug-1993 (fredv)
**		Included <st.h>.
**      21-Sep-1993 (smc)
**              Added <cs.h> for CS_SID.
**	21-mar-94 (smc) Bug #60829
**		Added #include header(s) required to define types passed
**		in prototyped external function calls.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      13-Jul-2011 (hanal04) SIR 125458
**          Update cs_elog calls inline with sc0e_putAsFcn changes.
*/
VOID
put_options()
{
    /* declare local variables */
##  int		lock_type_id, timeout;
##  char	*db_name_ptr;
##  char	*table_ptr;
##  char	lock_type_nm[FE_MAXNAME + 1];

    /* copy global pointers into local pointers for INGRES stmts */
    lock_type_id = ing_locktype;
    db_name_ptr = ptr_dbname;
    table_ptr = ptr_tablename;

    if (flag_nl)  /* flag_nl set indicates printing of Granted NL locks */
    {
##	PUTFORM Fshowopts (#flag_null = "y")
    }
    else
    {
##	PUTFORM Fshowopts (#flag_null = "n")
    }

    if (flag_all_locks)
    {
##	PUTFORM Fshowopts (#flag_all_lk = "y", #flag_lktype = "n")
    }
    else if (flag_locktype)
    {
	(VOID) trans_lock_type(lock_type_id, lock_type_nm);
##	SET_FRS FIELD Fshowopts (invisible(#locktype) = 0);
##	PUTFORM Fshowopts (#locktype = lock_type_nm)
##	PUTFORM Fshowopts (#flag_lktype = "y", #flag_all_lk = "n")
    }
    else
    {
##	PUTFORM Fshowopts (#flag_all_lk = "n", #flag_lktype = "n")
##	SET_FRS FIELD Fshowopts (invisible(#locktype) = 1);
    }

    timeout = frs_timeout;	/* put value into frs known local var */
##  PUTFORM Fshowopts (frs_timeout = timeout)

    if (flag_db)
    {
##	PUTFORM Fshowopts (#flag_db = "y", #dbname = db_name_ptr)
##	SET_FRS FIELD Fshowopts (invisible(#dbname) = 0);
    }
    else
    {
##	PUTFORM Fshowopts (#flag_db = "n")
##	SET_FRS FIELD Fshowopts (invisible(#dbname) = 1);
##	CLEAR FIELD #dbname
    }

    if (flag_table)
    {
##	SET_FRS FIELD Fshowopts (invisible(#tablename) = 0);
##	PUTFORM Fshowopts (#flag_table = "y", #tablename = table_ptr)
    }
    else
    {
##	SET_FRS FIELD Fshowopts (invisible(#tablename) = 1);
##	PUTFORM Fshowopts (#flag_table = "n")
##	CLEAR FIELD #tablename
    }

    if (flag_nonprot_lklists)
    {
##	PUTFORM Fshowopts (#flag_nonprot_lklists = "y")
    }
    else
    {
##	PUTFORM Fshowopts (#flag_nonprot_lklists = "n")
    }

    if (flag_inactive_tx)
    {
##	PUTFORM Fshowopts (#flag_inactive_tx = "y")
    }
    else
    {
##	PUTFORM Fshowopts (#flag_inactive_tx = "n")
    }

    if (flag_internal_sess)
    {
##	PUTFORM Fshowopts (#flag_internal_sess = "y")
    }
    else
    {
##	PUTFORM Fshowopts (#flag_internal_sess = "n")
    }
}

/*
**	set_options - this routine displays the options form and allows
**	the user to change them.  This allows a user to specify
**	options without having to leave the lockinfo program.
**
**		Written by:	Tom Turchioe   Relational Technology
**		Date	  :     3-aug-1988
**
**	History
**		1/26/89		tomt	adapted for use in Lockinfo R6
**		3/08/89		tomt	more work for R6 version (lock names)
**		21 Sept 1990	jpk	modify menu items "Save" to "OK",
**					"Forget" to "Cancel",
**					"Restore" to "Defaults"
**
*/
VOID
set_options()
{
    bool	e_xit;
##  char field_name[FE_MAXNAME + 1];
    static 	forms_added = FALSE;

##  GLOBALREF int *fdispdb;
##  GLOBALREF int *fdisplktype;
##  GLOBALREF int *fshowopts;

    /*
    **  Determine if forms are added, if not addform them.
    */
    if (!forms_added)
    {
##	ADDFORM fdispdb
##	ADDFORM fdisplktype
##	ADDFORM fshowopts
	forms_added = TRUE;
    }

##  DISPLAY Fshowopts UPDATE
##  INITIALIZE
##  {
	/* display current options on form */
	put_options();
##	SET_frs frs (activate(previousfield) = 1); /* trap backtabs */
##  }
##  ACTIVATE FIELD ALL
##  {
	(VOID) option_work(CHECK, field_name);
##	RESUME FIELD field_name
##  }
##  ACTIVATE MENUITEM "OK", frskey8:
##  {
	if (option_work(CHECK_AND_SAVE, field_name) == FAIL)
	{
##	    RESUME FIELD field_name
	}
	e_xit = FALSE;
##	BREAKDISPLAY
##  }
##  ACTIVATE MENUITEM "Cancel", frskey9:
##  {
	e_xit = FALSE;
##	BREAKDISPLAY
##  }
##  ACTIVATE MENUITEM "Defaults":
##  {
##	MESSAGE "Restoring original options..."
##	SLEEP 2
##	CLEAR FIELD ALL
	put_options();	/* display original settings */
##	RESUME FIELD #flag_null
##  }
##  ACTIVATE MENUITEM "Help", frskey1:
##  {
	my_help("ipmshwop.hlp", "Option Selection");
##  }
##  ACTIVATE MENUITEM "Quit", frskey2:
##  {
	e_xit = TRUE;
##	BREAKDISPLAY
##  }

    if (e_xit)
    {
	terminate(OK);
    }
    return;
}

/*
**  option_work(option) - 
**	This routine gets the option settings from the fshowopts form;
**	if option is CHECK then
**		check if the user selected conflicting options
**	else if option is CHECK_AND_SAVE then
**		check if the user selected conflicting options
**		if there are no errors then
**			set appropriate internal flags
**		endif
**	endif
**
**	This routine copies the name of the field to resume on into the
**	option character variable.  The caller issues the RESUME statement.
**
**	Checking the options involves ensuring that they are not set in
**	conflicting ways.
**
**	History
**		1/26/89		tomt	adapted for use in Lockinfo R6
**		3/09/89		tomt	lock name work
**              3/12/90         tomt    added lock and tx filters
**		2/28/93		jpk	add internal sess flag
*/
i4
option_work(option, field_name)
i4	option;
char 	*field_name;
{
##  char	c_locktype[20], msg[81];
##  char	c_flag_null[YNSIZE];
##  char	c_flag_all_lk[YNSIZE];
##  char	c_flag_locktype[YNSIZE];
##  char	c_flag_table[YNSIZE];
##  char	c_flag_db[YNSIZE];
##  char	c_flag_nonprot_lklists[YNSIZE];
##  char	c_flag_inactive_tx[YNSIZE];
##  char	c_flag_internal_sess[YNSIZE];
##  char	c_dbname[FE_MAXNAME + 1];
##  char	c_tablename[FE_MAXNAME + 1], *db_name, *locktype_ptr;
##  int		lfrs_timeout;
    i4		db_id, lock_type_id;
    i4		lock_cat;

    /* what field am I on */
##  INQUIRE_frs FIELD Fshowopts (field_name = NAME)

    /* get all values off the form */
##  GETFORM Fshowopts (c_tablename = #tablename, c_flag_table = #flag_table,
##      c_flag_null = #flag_null, c_flag_all_lk = #flag_all_lk,
##	c_locktype = #locktype, c_flag_locktype = #flag_lktype,
##	lfrs_timeout = frs_timeout, c_flag_inactive_tx = #flag_inactive_tx, 
##	c_flag_db = #flag_db, c_dbname = #dbname,
##	c_flag_nonprot_lklists = #flag_nonprot_lklists,
##	c_flag_inactive_tx = #flag_inactive_tx,
##	c_flag_internal_sess = #flag_internal_sess)
    /*
    ** check the values.  This routine is called after every
    ** field activate as well as when the SAVE operation is picked.
    ** If the option flag is set to CHECK, then this routine is being
    ** called from the ACTIVATE FIELD.  In this mode, we want to set
    ** other fields based on the current field the user is on.
    ** The error checking below effectively collects the error checking
    ** that would be performed in various ACTIVATE FIELD blocks and puts
    ** them in one place.
    **
    ** Determine the lock catagory (database, table, page, other).  This
    ** simplifies the code.
    */
    if (c_flag_locktype[0] == 'y')
    {
	lock_type_id = trns_lnm_to_lktyp(c_locktype); /* locktype */
	lock_cat = getlockcat(lock_type_id); /* lock catagory */
    }

    if (option == CHECK)
    {
	if (STcompare(field_name, "flag_null") == 0)
	{
	    STcopy("flag_all_lk", field_name);
	}
	else if (STcompare(field_name, "flag_all_lk") == 0)
	{
	    if (c_flag_all_lk[0] == 'y')
	    {
##	        PUTFORM Fshowopts (#flag_lktype = "n", #flag_table = "n",
##		    #flag_null = "y")
##		SET_FRS FIELD Fshowopts (invisible(#tablename) = 1,
##		    invisible(#locktype) = 1);
##		CLEAR FIELD #tablename
##		CLEAR FIELD #locktype
		STcopy("flag_db", field_name);
	    }
	    else
	    {
		STcopy("flag_lktype", field_name);
	    }
	}
	else if (STcompare(field_name, "flag_lktype") == 0)
	{
	    if (c_flag_locktype[0] == 'y')
	    {
##	        PUTFORM Fshowopts (flag_all_lk = "n", #flag_table = "n",
##		    #flag_null = "y")
##		SET_FRS FIELD Fshowopts (invisible(#tablename) = 1,
##		    invisible(#locktype) = 0);
##		CLEAR FIELD #tablename
		STcopy("locktype", field_name);
	    }
	    else
	    {
		STcopy("flag_db", field_name);
##		SET_FRS FIELD Fshowopts (invisible(#locktype) = 1);
##		CLEAR FIELD #locktype
	    }
	}
	else if (STcompare(field_name, "locktype") == 0)
	{
	    if (!lock_type_id)
	    {
		if (c_locktype[0] != '?') 	/* bad lktype not HELP */
		{
	    	    STprintf(msg, "Locktype %s does not exist.  Getting available locktypes...", c_locktype);
##		    MESSAGE msg
##		    SLEEP 2
		}
		/* display help form */
		if ((locktype_ptr = displktype()) != NULL)  /* place value on form if usr selected one*/
		{
##		    PUTFORM Fshowopts (#locktype = locktype_ptr)
		}
		STcopy("locktype", field_name);
	    }
	    else
	    {
		if ((c_flag_db[0] == 'n') && ((lock_cat != DATABASE_LOCK) &&
		    (lock_cat != OTHER_LOCK)))
		{ /* not a db or other type lock */
##		    PUTFORM Fshowopts (#flag_db = "y");
##		    SET_FRS FIELD Fshowopts (invisible(#dbname) = 0);
	    	    STcopy("dbname", field_name);
		}
		else
		{
	    	    STcopy("flag_db", field_name);
		}
	    }
	}
	else if (STcompare(field_name, "flag_db") == 0)
	{
	    if (c_flag_db[0] == 'y')
	    {
	        STcopy("dbname", field_name);
##		SET_FRS FIELD Fshowopts (invisible(#dbname) = 0);
	    }
	    else
	    {
##		PUTFORM Fshowopts (#flag_table = "n")
##		CLEAR FIELD #tablename, #dbname
##		SET_FRS FIELD Fshowopts (invisible(#tablename) = 1,
##		    invisible(#dbname) = 1);
		if ((c_flag_locktype[0] == 'y') && (lock_cat != DATABASE_LOCK))
		{
##		    PUTFORM Fshowopts (#flag_lktype = "n")
##		    SET_FRS FIELD Fshowopts (invisible(#locktype) = 1);
##		    CLEAR FIELD #locktype
		}
	        STcopy("flag_table", field_name);
	    }
	}
	else if (STcompare(field_name, "dbname") == 0)
	{
	    if ((db_id = get_db_id(c_dbname)) == -1)
	    {
		if (c_dbname[0] != '?') 	/* wrong dbname not HELP */
		{
	    	    STprintf(msg, "Database %s does not exist. Getting available databases... ", c_dbname);
##		    MESSAGE msg
##		    SLEEP 2
		}
		/* display help form */
		if ((db_name = dispdb()) != NULL)  /* place value on form if usr selected one*/
		{
##		    PUTFORM Fshowopts (#dbname = db_name)
		}
		STcopy("dbname", field_name);
	    }
	    else
	    {
		STcopy("flag_table", field_name);
	    }
	}
	else if (STcompare(field_name, "flag_table") == 0)
	{
	    if (c_flag_table[0] == 'y')
	    {
##		PUTFORM Fshowopts (#flag_all_lk = "n", #flag_lktype = "n",
##		    #flag_null = "y")
##		CLEAR FIELD #locktype
##		SET_FRS FIELD Fshowopts (invisible(#locktype) = 1);
		if (c_flag_db[0] == 'n')
		{
##		    PUTFORM Fshowopts (#flag_db = "y")
		    POP_MSG("Please specify a database name");
##		    SET_FRS FIELD Fshowopts (invisible(#dbname) = 0);
		    STcopy("dbname", field_name);
		}
		else
		{
		    STcopy("tablename", field_name);
##		    SET_FRS FIELD Fshowopts (invisible(#tablename) = 0);
		}
	    }
	    else
	    {
##		SET_FRS FIELD Fshowopts (invisible(#tablename) = 1);
##		CLEAR FIELD #tablename
		STcopy("frs_timeout", field_name);
	    }
	}
	else if (STcompare(field_name, "tablename") == 0)
	{
	    if (STlength(c_tablename) == 0)
	    {
		POP_MSG("Please enter a tablename or select Defaults or Cancel");
		STcopy("tablename", field_name);
	    }
	    STcopy("frs_timeout", field_name);
	}
	else if (STcompare(field_name, "frs_timeout") == 0)
	{
	    STcopy("flag_inactive_tx", field_name);
	}
        else if (STcompare(field_name, "flag_inactive_tx") == 0)
        {
            STcopy("flag_nonprot_lklists", field_name);
        }
        else if (STcompare(field_name, "flag_nonprot_lklists") == 0)
        {
            STcopy("flag_internal_sess", field_name);
        }
	else if (STcompare(field_name, "flag_internal_sess") == 0)
	{
	    STcopy("flag_null", field_name);
	} 
	return(OK);
    }
    else if (option == CHECK_AND_SAVE)
    {

	/*
	**    Perform error checking and if OK, set flags accordingly.
	**    The error checking above is different from what needs to be
	**    done before saving.  The error checking below needs to detect
	**    inconsistent selection of options and report the error.  Only
	**    if no errors are found, will the internal flags be set.
	*/

	/*
	**    Make sure user enters values for locktype and or tablename
	**    if they indicated that they wanted to.
	*/
	if ((c_flag_locktype[0] == 'y') && (STlength(c_locktype) == 0))
	{
	    POP_MSG("Please enter a locktype or select Defaults or Cancel");
	    STcopy("locktype", field_name);
	    return(FAIL);
	}
	if ((c_flag_table[0] == 'y') && (STlength(c_tablename) == 0))
	{
	    POP_MSG("Please enter a tablename or select Defaults or Cancel");
	    STcopy("tablename", field_name);
	    return(FAIL);
	}

	/*
	**    validate option selections.  Instead of toggling
	**    other fields, report error
	*/
	if (c_flag_all_lk[0] == 'y') 		/* check flag_all_locks field */
	{
	    if (c_flag_null[0] == 'n') 	/* don't suppress null locks */
	    {
		POP_MSG("Suppressing display of null locks is incompatible with displaying all locks");
		STcopy("flag_null", field_name);
		return(FAIL);
	    }
	    else if (c_flag_locktype[0] == 'y') 	/* can't both be "y" */
	    {
		if (c_flag_table[0] == 'y')   /* cant view all lks & a tbl */
		{
		    POP_MSG("Checking all locks is incompatible with show locks for a particular table");
		    STcopy("flag_table", field_name);
		}
		else
		{
		    POP_MSG("Checking all locks is incompatible with checking for a particular locktype");
		    STcopy("flag_lktype", field_name);
		}
		return(FAIL);
	    }
	    else if (c_flag_table[0] == 'y') /* cant view all lks & a tbl */
	    {
		POP_MSG("Checking all locks is incompatible with show locks for a particular table");
		STcopy("flag_table", field_name);
		return(FAIL);
	    }
	}

	if (c_flag_db[0] == 'n')
	{
	    if ((c_flag_locktype[0] == 'y') && (lock_cat != DATABASE_LOCK) &&
		(lock_cat != OTHER_LOCK))
	    {
		POP_MSG("Showing locks on all databases is incompatible with showing page or table locktypes");
		STcopy("flag_lktype", field_name);
		return(FAIL);
	    }
	    else if (c_flag_table[0] == 'y')
	    {
		POP_MSG("You specified a table, must specify which database");
		STcopy("flag_db", field_name);
	        return(FAIL);
	    }
	}
	else if (c_flag_db[0] == 'y')
	{
	    if ((db_id = get_db_id(c_dbname)) == -1)
	    {
		STprintf(msg, "Database %s does not exist.  Enter a valid dbname", c_dbname);
		POP_MSG(msg);
		STcopy("dbname", field_name);
		return(FAIL);
	    }
	}

	if (c_flag_locktype[0] == 'y')
	{
	    if (! (lock_type_id = trns_lnm_to_lktyp(c_locktype)))
	    {
	    	STprintf(msg, "Locktype %s does not exist.  Type '?' for a list", c_locktype);
		POP_MSG(msg);
		STcopy("locktype", field_name);
		return(FAIL);
	    }
	}

	/*
	**    Now, set the flags
	*/
	if (c_flag_null[0] == 'y')
	{
	    flag_nl++;		/* set this flag to show ALL locks */
	}
	else
	{
	    flag_nl = 0;	/* clear to SUPPRESS Granted NL locks */
	}

	if (c_flag_all_lk[0] == 'y')
	{
	    flag_all_locks++;
	    flag_locktype = 0;
	    ing_locktype = 0;	/* clear locktype */
	}
	else if (c_flag_locktype[0] == 'y')
	{
	    flag_all_locks = 0;
	    flag_locktype++;		/* Suppress all_locks flag and set
					** specific lock flag
					*/
	    ing_locktype = lock_type_id;	/* put into global */
	}
	else
	{
	    flag_all_locks = 0;
	    flag_locktype = 0;
	    ing_locktype = 0;	/* clear locktype */
	}

	frs_timeout = lfrs_timeout;	/* place in global */

	if (c_flag_db[0] == 'y')
	{
	    flag_db = TRUE;
	    STcopy(c_dbname, ptr_dbname);	/* copy to gbl area */
	    dbname_id = db_id; /* change global tid val so we select desired db */
	}
	else
	{
	    flag_db = FALSE;
	    ptr_dbname[0] = EOS;	/* erase gbl db value */
	}

	if (c_flag_table[0] == 'y')
	{
	    flag_table++;
	    STcopy(c_tablename, ptr_tablename);	/* copy to gbl area */
	}
	else
	{
	    flag_table = 0;
	    ptr_tablename[0] = EOS;	/* erase gbl tbl value */
	}

	if (c_flag_nonprot_lklists[0] == 'y')
	{
	    flag_nonprot_lklists++;
	}
	else	
	{
	    flag_nonprot_lklists = 0;
	}

        if (c_flag_inactive_tx[0] == 'y')
        {
            flag_inactive_tx++;
        }
        else
        {
            flag_inactive_tx = 0;
        }

        if (c_flag_internal_sess[0] == 'y')
        {
            flag_internal_sess = TRUE;
        }
        else
        {
            flag_internal_sess = FALSE;
        }
    }
    return(OK);
}

/*
**  dispdb() - this routine displays
**	a form which contains a list of database names.
**
**  History
**	2/6/89		tomt	Created
**	3/9/89		tomt	moved inside of showopts.qc file
**	21 Sept 1990	jpk	change "Forget" to "Cancel"
**
*/
PTR dispdb()
{
##  static char	dbname[FE_MAXNAME + 1];

##  DISPLAY Fdispdb READ
##  INITIALIZE
##  {
##	INITTABLE Fdispdb #dblist READ

	while (get_nextdb(dbname))
	{
##	    LOADTABLE Fdispdb #dblist (#database = dbname)
	}
##  }
##  ACTIVATE MENUITEM "Help", frskey1:
##  {
	my_help("ipmdspdb.hlp", "Database List");
##  }
##  ACTIVATE MENUITEM "Select", frskey4:
##  {
##	GETROW Fdispdb #dblist (dbname = #database)
##      BREAKDISPLAY
##  }
##  ACTIVATE MENUITEM "Cancel", frskey9:
##  {
	dbname[0] = EOS;	/* return null */	
##      BREAKDISPLAY
##  }

    return(&dbname[0]);
}
