/*
**      Copyright (c) 2004 Actian Corporation
**      All rights reserved.
*/

/*
** Includes and defines
*/
#include <compat.h>
#include <iicommon.h>
#include <cs.h>
#include <st.h>
#include <dbms.h>
#include <fe.h>
#include <pc.h>
#include <lk.h>
#include <lg.h>
#include <er.h>
#include "lists.h"
#include "msgs.h"
#include "dba.h"

/*
**
**  File: lockresdet.qc
**
**  This file contains the routines to display locks for 
**	a selected resource list. 
**
**
**  Inputs
**	sub_list - the desired sublist for a given main list element.  For
**		example, all the locks for the 2nd resource row in the
**		tablefield of Resource Information Display.
**
**  History
**	1/6/89		tomt		created
**	4/11/89		tomt		positioned form at col 32
**	8/18/89		tomt		use INGDBA version of lk structs
**	9/8/89		tomt		added session_name field to form
**	9/13/89		tomt		now printlkres takes a formname
**					as a parameter as it is called
**					from various places
**	3/21/91		tomt		changed title on form to trim.  Removed
**                              	variable used to hold title.
**      5/26/93 (vijay)
**              include pc.h
**	26-Aug-1993 (fredv)
**		Included <st.h>.
**      21-Sep-1993 (smc)
**              Added <cs.h> for CS_SID.
**      27-dec-1994 (canor01)
**              Added declaration for lock_itoa()
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	04-Jan-2011 (jonj) SIR 124894 LG/LK/IPM unification
**	    Use int_to_str() to figure out lock state, lock mode
**      13-Jul-2011 (hanal04) SIR 125458
**          Update cs_elog calls inline with sc0e_putAsFcn changes.
*/

/*
** Constants
*/
#define POPUP_R_SIZE 14

VOID lockresdet();
VOID printresdet();
VOID tablefield_find();
VOID displkres();
VOID getlk_trid();
VOID get_sessname();
VOID int_to_str();


/*
**
**  Routine: lockresdet()
**
**  Purpose - this routine displays locks for all lock lists
**	or for a selected lock list.  Called from displkres()
**
**
**  Inputs
**	sub_list - the desired sublist for a given main list element.  For
**		example, all the locks for the 2nd resource row in the
**		tablefield of Resource Information Display.
**
**  History
**	1/6/89		tomt	created
**	4/11/89		tomt	positioned form at col 32
**	9/13/89		tomt	now pass form name to printresdet
*/
VOID
lockresdet(sub_list)
i4  sub_list;
{
    bool 	e_xit = FALSE;
##  int		begin_row, p_numrows, currow, screen_rows;
##  char	colname[FE_MAXNAME + 1];
    char	form_name[FE_MAXNAME + 1];

    /*
    **  Init local variables
    */
    STcopy("fshowlkres", form_name);

    /*
    **  Calculate starting row of popup
    */
    p_numrows = POPUP_R_SIZE;
##  INQUIRE_FRS FRS (currow = CURSORROW)
##  INQUIRE_FRS FRS (screen_rows = ROWS)
    if ((p_numrows + currow) > screen_rows)
    {
	begin_row = currow - p_numrows;
    }
    else if ((currow - p_numrows) < 1)
    {
	begin_row = currow + 1;

    }
    else
    {
	begin_row = 0;	/* let the FRS decide */
    }

    /*
    **  Display the form and get the information
    */
##  DISPLAY #fshowlkres READ WITH STYLE = popup
##	(STARTCOLUMN = 19, STARTROW = begin_row, BORDER = none)
##  INITIALIZE
##  {
   	/* Put information on the form */
##	INITTABLE #fshowlkres #lockdetail READ
	/* get lock info and put on screen */
	printresdet(sub_list, form_name);
##  }
##  ACTIVATE MENUITEM "Find", frskey7:
##  {
##      INQUIRE_FRS COLUMN #fshowlkres #lockdetail (colname = name)
	tablefield_find();
##	RESUME COLUMN #lockdetail colname
##  }
##  ACTIVATE MENUITEM "Help", frskey1:
##  {
	my_help("ipmlkrdt.hlp", "Lock Detail");
##  }
##  ACTIVATE MENUITEM "End", frskey3:
##  {
##	BREAKDISPLAY
##  }
##  ACTIVATE MENUITEM "Quit", frskey2:
##  {
	e_xit = TRUE;	/* user wants to leave */
##	MESSAGE " "	/* force cursor to bottom of screen */
##	BREAKDISPLAY
##  }

    if (e_xit) {	/* user wants to leave */
	terminate(OK);
    }
    return;
}

/*
** printresdet() - this routine gets, formats and outputs the locks in a
**	resource list.
**
** Inputs:
**	listnum - which resource element to get locks from
**
** Outputs:
**	writes formatted lock info to screen or file
**
** Returns:
**	none
**
** History
**	3/15/89		tomt	written
**	9/8/89		tomt	added session_name to form
**	9/13/89		tomt	now called from various places, so now we pass
**				in form name...
*/
VOID
printresdet(sublist, form_name)
i4  sublist;
PTR form_name;
{
    u_i4	txid_low, txid_high;
##  char	id[HEXID_SIZE + 1], state[51], formname[FE_MAXNAME + 1];
    char	tmpstate[51];
##  char	llb[HEXID_SIZE + 1], session_name[FE_MAXNAME + 1];
    i4		lk_state_i;
    bool	select_sub;
    i4		num_in_list;
    bool	reset = TRUE;	/* start at beginning of list */
    bool	refresh = TRUE;	/* tell get_sessname to refresh if
				** search was unsuccessful.  get_sessname
				** will toggle this off after the first
				** search to eliminate unneccesary refreshes
				*/
    LK_LKB_INFO *lkb;
##  char	str_rq[5];
##  char	str_gr[5];

    /* copy form name to local buffer because PTR type not known by eqc */
    STcopy(form_name, formname);

    if (sublist > 0) 
    {		
	/* caller wants a particular sublist */
	select_sub = TRUE;
    } 
    else 
    {			
	/* caller wants all sublists */
	sublist = 1;
	select_sub = FALSE;	/* start with first sublist */
	num_in_list = l_num_elements(RESINFO); /* how many elements to walk */
    }

    for ( ; ; )			/* perhaps sublist++ to control loop?? */
    {
	while ((lkb = (LK_LKB_INFO *)l_retrieve(RESINFO,
	    sublist, &reset)) != NULL) 
	{
	    /* format for display on form */
	    STprintf(id, "%x", lkb->lkb_id);
	    STprintf(llb, "%x", lkb->lkb_llb_id);

	    /*
	    ** to get session name, first get the xaction id that this lock
	    ** belongs to.  That is used to find the session name.
	    ** The refresh flag will be toggled off after first refresh to 
	    ** eliminate
	    ** overhead of useless succeeding refreshes because no session name
	    ** could be found
	    */
	    getlk_trid(&txid_high, &txid_low, lkb->lkb_llb_id); 
	    get_sessname(txid_high, txid_low, session_name, &refresh);

	    lk_state_i = (i4)lkb->lkb_state;	/* cast for following hack */
	    /*
	    **  Old check for subscript out of bounds.  A fix was made to 
	    **  eliminate the problem.  However, the code was left in as 
	    **  an error checking measure.
	    **
	    **  Problem found (9/24/89) but leaving in for a while until we 
	    **  are sure.
	    */
	    /* 4 and 6 are array size bounds -- jpk */
/*	    if (lk_state_i >= 4)*/
/*	       || lkb->lkb_request_mode >= 6 || lkb->lkb_grant_mode >= 6)*/
/*	    {*/
/*		POP_MSG("Attempt to display a lock with bad values.");*/
/*		break;*/
/*	    }*/

	    int_to_str(state, sizeof(state), LKB_STATE, lk_state_i);

	    if (lkb->lkb_attribute & LKB_PHYSICAL)
	    {
		STprintf(tmpstate, "%s PHYS(%d) ", state, lkb->lkb_phys_cnt);
		STcopy(tmpstate, state);
	    }

	    int_to_str(str_rq, sizeof(str_rq), LOCK_MODE, lkb->lkb_request_mode);
/*	    int_to_str(str_gr, sizeof(str_gr), LOCK_MODE, lkb->lkb_grant_mode); */

##	    LOADTABLE formname #lockdetail (#id = id,
##		#llb = llb, #request = str_rq,
##		#state = state, #session_name = session_name)
	}
	if (select_sub) 
	{ 
	    /* user wants this particular sub_list */
	    break;	    /* we are done getting the data */
	} 
	else 
	{ 
	    /* user wants all sublists */
	    if (sublist >= num_in_list) /* no more to get */
		break;
	    sublist++;	/* move to next sublist */
	}
    }
    return;
}

