/*
**      Copyright (c) 2004 Actian Corporation
**      All rights reserved.
*/

#include <compat.h>
#include <iicommon.h>
#include <cs.h>
#include <st.h>
#include <dbms.h>
#include <fe.h>
#include <pc.h>
#include <lk.h>
#include <lg.h>
#include <er.h>
#include "lists.h"
#include "msgs.h"
#include "dba.h"
#include "block.h"

/*
** Forward and External References
*/
STATUS get_db_name();
STATUS get_rel_name();
VOID showblock();
i4  blklkwork();
VOID printresdet();
VOID close_db();
VOID int_to_str();
FUNC_EXTERN VOID open_db();
FUNC_EXTERN VOID tablefield_find();


/*
** Constants
*/
#define POPUP_R_SIZE 15

/*
** showblock.qc - this file contains the routines necessary
**	to find blocking/blocked locks and display them for the
**	user to see.
**
** This file contains:
**	showblock - displays the blocked/blocking lock form.
**	blklkwork - finds the blocked/blocking locks
**
** History
**	4/18/89		tomt		written
**	9/13/89		tomt		added necessary code to display
**					    only blocking locks
**	9/24/89		tomt		now pass mode in which showblock
**					is called.  Determines which title
**					is displayed
**      5/26/93 (vijay)
**              include pc.h
**	26-Aug-1993 (fredv)
**		Included <st.h>.
**      21-Sep-1993 (smc)
**              Added <cs.h> for CS_SID.
**      24-Apr-1995 (nick) Bug #67888
**              Added LK_CKP_TXN and LK_EVCONNECT
**	 1-Nov-1995 (nick)
**		Change display method for LK_CONTROL.
**		Added LK_ROW.
**		Added LK_AUDIT.
**      22-nov-1996 (dilma04)
**              Row-level locking project:
**                - add LK_PH_PAGE;
**	          - add LK_VAL_LOCK;
**		  - display row and value locks by default.
**      16-oct-1998 (stial01)
**              Correctly print last element of Lock_type array
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	05-Mar-2002 (jenjo02)
**	    Added LK_SEQUENCE
**	26-May-2009 (kschendel) b122041
**	    Compiler warning fixes.
**	04-Jan-2011 (jonj) SIR 124894 LG/LK/IPM unification
**	    Use int_to_str() to figure out lock type,
**	    delete obsolete LK_OWNER_ID, LK_PH_PAGE, LK_EXTEND_FILE
**	    lock types, add LK_TBL_MVCC type.
**      13-Jul-2011 (hanal04) SIR 125458
**          Update cs_elog calls inline with sc0e_putAsFcn changes.
*/

/*
** showblock - this function will display the blocking resource and the
**	locks contained in that resource.  This routine expects to receive
**	a blocking resource ID.  This resource ID is usually obtained from
**	the lock list structure.
**
** Inputs:
**	irsb_blocking - the ID of the resource which contains the blocking
**		lock.
**
** Outputs:
**	This routine displays the form which contains the blocking resource
**	information.
**
** Returns
**	none
**
** History:
**	9/13/89		tomt	added code to display blocking lock info
**	9/24/89		tomt		now pass mode in which showblock
**					is called.  Determines which title
**					is displayed
**
*/
VOID
showblock(irsb_blocking, mode)
i4 irsb_blocking;
i4  mode;
{
##  int		begin_row, p_numrows, currow, screen_rows;
##  char	titlmsg[35], colname[FE_MAXNAME + 1];
    char	form_name[FE_MAXNAME + 1];

    /* set form name to pass to blklkwork */
    STcopy("fshowblock", form_name);

    /* Calculate starting row of popup */
    p_numrows = POPUP_R_SIZE;
##  INQUIRE_FRS FRS (currow = CURSORROW)
##  INQUIRE_FRS FRS (screen_rows = ROWS)
    if ((p_numrows + currow) > screen_rows)
    {
	begin_row = currow - p_numrows;
    }
    else if ((currow - p_numrows) < 1)
    {
	begin_row = currow + 1;
    }
    else
    {
	begin_row = 0;	/* let the FRS decide */
    }

    /* Display the form and get the information */
##  DISPLAY #fshowblock READ WITH STYLE = popup
##	(STARTCOLUMN = 19, STARTROW = begin_row, BORDER = none)
##  INITIALIZE
##  {

	/* Put information on the form */
	/* display the appropriate title: this allows one form for two uses */
	if (mode == SHOWBLOCK)
	{
	    STcopy("Blocking Lock Display", titlmsg);
	}
	else
	{
	    STcopy("Resource Lock Display", titlmsg);
	}

##	PUTFORM #fshowblock (#title = titlmsg)
##	INITTABLE #fshowblock #lockdetail READ
	 /* get lock info and put on screen */
	if (blklkwork((u_i4) irsb_blocking, (PTR) form_name) == FAIL)
	{
	    POP_MSG("The resource that this lock belongs to is not\
 currently in the resource list.  Only resource lists that match the\
 settings shown in the Options Display are available.  To change the\
 resources that are available for display, select the 'Options' menuitem\
 on the previous menu (Lock List Display).  After the Options you specified\
 are saved, select the 'Refresh' menuitem which is also available on the\
 previous menu");
##	    BREAKDISPLAY
	}

##  }
##  ACTIVATE MENUITEM "Find", frskey7:
##  {
##      INQUIRE_FRS COLUMN #fshowblock #lockdetail (colname = name)
	tablefield_find();
##	RESUME COLUMN #lockdetail colname
##  }
##  ACTIVATE MENUITEM "Help", frskey1:
##  {
	my_help("ipmshwbk.hlp", "Blocking Lock");
##  }
##  ACTIVATE MENUITEM "End", frskey3:
##  {
##	BREAKDISPLAY
##  }
    return;
}

i4
blklkwork(blocking_rsb, formname)
u_i4 blocking_rsb;
PTR formname;
{
##  int		counter, page_num, row_num;
##  char	id[HEXID_SIZE + 1], lock_tp[15];
##  char	tab_name[FE_MAXNAME + 1];
    char	dbbuf[FE_MAXNAME + 1];	/* for printing dbname */
##  char	*dbname = dbbuf;
    bool	resource_found = FALSE;	/* to determine if a match occured */
    bool	reset = TRUE;		/* always start at list begin */
    LK_RSB_INFO *rsb;
##  char	str_gr[5];
##  char	str_cv[5];
##  char	res_name[FE_MAXNAME + 1];

    dbbuf[0] = EOS;
    counter = 0;

    /* Get the Info */
    close_db();				/* ensure no open databases */
    while ((rsb = (LK_RSB_INFO *)l_retrieve(RESINFO, 0, &reset)) != NULL) 
    {
	/*
	** find proper resource list, format the resource info then get lock 
	** info.  Certain fields on the form will be made invisible depending 
	** on lock type
	*/
	counter++;			/* keep track of element number */
	if (blocking_rsb != rsb->rsb_id)/* NOT the resource id - skip */
	{
	    continue;
	}

	resource_found = TRUE;		/* found a match */

	int_to_str(lock_tp, sizeof(lock_tp), LK_LOCK_TYPE_MEANING, rsb->rsb_key[0]);

	switch(rsb->rsb_key[0]) 
	{
	    case LK_DATABASE:
	    case LK_SV_DATABASE:
	    case LK_JOURNAL:
	    case LK_DB_TEMP_ID:
	    case LK_CONFIG:
	    case LK_OPEN_DB:
	    case LK_CKP_CLUSTER:
	    case LK_BM_DATABASE:
	    case LK_CKP_DB:
	    case LK_BM_LOCK:
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 1,
##		    invisible(#page_num) = 1, invisible(#dbname) = 0,
##		    invisible(#row_num) = 1, invisible(#resource) = 1);
		if ((rsb->rsb_key[0] == LK_BM_DATABASE) ||
		    (rsb->rsb_key[0] == LK_CKP_DB)) /* dbname handling */
		    (VOID)get_db_name(dbname, rsb->rsb_key[1]);
		else
		    STcopy((char*)&rsb->rsb_key[1], dbname);
		break;

	    case LK_TABLE:
	    case LK_SV_TABLE:
	    case LK_BM_TABLE:
	    case LK_TBL_CONTROL:
	    case LK_TBL_MVCC:

		/* get table name.  Ignore if user is looking for db locks. */
	        (VOID)get_db_name(dbname, rsb->rsb_key[1]);
		open_db(dbname);	/* open a database */
		(VOID)get_rel_name(tab_name, rsb->rsb_key[2], rsb->rsb_key[3]);
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 0,
##		    invisible(#page_num) = 1, invisible(#dbname) = 0,
##		    invisible(#row_num) = 1, invisible(#resource) = 1);
		break;

	    case LK_PAGE:
	    case LK_BM_PAGE:
	        (VOID)get_db_name(dbname, rsb->rsb_key[1]);
		open_db(dbname);	/* open a database */
		(VOID)get_rel_name(tab_name, rsb->rsb_key[2], rsb->rsb_key[3]);
		page_num = rsb->rsb_key[4];
                row_num = rsb->rsb_key[5];
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 0,
##		    invisible(#page_num) = 0, invisible(#dbname) = 0,
##		    invisible(#row_num) = 0, invisible(#resource) = 1);
		break;

	    case LK_AUDIT:
		if (rsb->rsb_key[1] == SXAS_LOCK)
		{
		    if (rsb->rsb_key[2] == SXAS_STATE_LOCK)
			STprintf(res_name, "State(primary)");
		    else if (rsb->rsb_key[2] == SXAS_SAVE_LOCK)
			STprintf(res_name, "State(save)");
		    else
			STprintf(res_name, "State(oper=%d)", 
				rsb->rsb_key[2]);
		}
		else if (rsb->rsb_key[1] == SXAP_LOCK)
		{
		    if (rsb->rsb_key[2] == SXAP_SHMCTL)
			STprintf(res_name, "Physical_layer(shmctl, node=%x)",
			    rsb->rsb_key[3]);
		    else if (rsb->rsb_key[2] == SXAP_ACCESS)
			STprintf(res_name, "Physical_layer(access)");
		    else if (rsb->rsb_key[2] == SXAP_QUEUE)
			STprintf(res_name,
			    "Physical_layer(queue, node=%x)",
			    rsb->rsb_key[3]);
		    else
			STprintf(res_name, "Physical_layer(oper=%d)",
			    rsb->rsb_key[2]);
		}
		else
		{
		    STprintf(res_name, "TYPE=%d, OPER=%d", 
			rsb->rsb_key[1], rsb->rsb_key[2]);
		}
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 1,
##		    invisible(#page_num) = 1, invisible(#dbname) = 1,
##		    invisible(#row_num) = 1, invisible(#resource) = 0);
		break;

	    case LK_ROW:
	        (VOID)get_db_name(dbname, rsb->rsb_key[1]);
		open_db(dbname);	/* open a database */
		(VOID)get_rel_name(tab_name, rsb->rsb_key[2], rsb->rsb_key[3]);
		page_num = rsb->rsb_key[4];
		row_num = rsb->rsb_key[5];
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 0,
##		    invisible(#page_num) = 0, invisible(#dbname) = 0,
##		    invisible(#row_num) = 0, invisible(#resource) = 1);
		break;

	    case LK_SS_EVENT:
		STprintf(res_name, "SERVER = %x,[%x,%x])",
		    rsb->rsb_key[1], rsb->rsb_key[2], rsb->rsb_key[3]);
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 1,
##		    invisible(#page_num) = 1, invisible(#dbname) = 1,
##		    invisible(#row_num) = 1, invisible(#resource) = 0);
		break;

	    case LK_EVCONNECT:
		STprintf(res_name, "Server PID = %d", rsb->rsb_key[1]);
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 1,
##		    invisible(#page_num) = 1, invisible(#dbname) = 1,
##		    invisible(#row_num) = 1, invisible(#resource) = 0);
		break;

	    case LK_CONTROL:
		string_move(res_name, (PTR) &rsb->rsb_key[1], LK_KEY_LENGTH);
		res_name[LK_KEY_LENGTH] = EOS;
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 1,
##		    invisible(#page_num) = 1, invisible(#dbname) = 1,
##		    invisible(#row_num) = 1, invisible(#resource) = 0);
		break;

	    case LK_CKP_TXN:
		if (rsb->rsb_key[3] != 0)
		{
		    string_move(dbname, (PTR) &rsb->rsb_key[3], 16);
		    dbname[16] = EOS;
		}
		else
		{
		    dbname[0] = EOS;
		}
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 1,
##		    invisible(#page_num) = 1, invisible(#dbname) = 0,
##		    invisible(#row_num) = 1, invisible(#resource) = 1);
		break;

	    case LK_CREATE_TABLE:
	    case LK_SEQUENCE:
	        (VOID)get_db_name(dbname, rsb->rsb_key[1]);
		open_db(dbname);	/* open a database */
		(VOID)STprintf(tab_name, "'%s-%s'",
		    &rsb->rsb_key[4], &rsb->rsb_key[2]);
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 0,
##		    invisible(#page_num) = 1, invisible(#dbname) = 0,
##		    invisible(#row_num) = 1, invisible(#resource) = 1);
		break;

            case LK_VAL_LOCK:
                (VOID)get_db_name(dbname, rsb->rsb_key[1]);
                open_db(dbname);        /* open a database */
                (VOID)get_rel_name(tab_name, rsb->rsb_key[2], rsb->rsb_key[3]);
                STprintf(tab_name, "VALUE: <%d,%d,%d>",
                    rsb->rsb_key[4], rsb->rsb_key[5], rsb->rsb_key[6]);
##              SET_FRS FIELD #fshowblock (invisible(#table_name) = 0,
##                  invisible(#page_num) = 1, invisible(#dbname) = 0,
##                  invisible(#row_num) = 1, invisible(#resource) = 1);
                break;

 
	    default:
		STprintf(res_name, "%d, (%x,%x,%x,%x,%x,%x)",
		    rsb->rsb_key[0], rsb->rsb_key[1],
                    rsb->rsb_key[2], rsb->rsb_key[3],
		    rsb->rsb_key[4], rsb->rsb_key[5], rsb->rsb_key[6]); 
##		SET_FRS FIELD #fshowblock (invisible(#table_name) = 1,
##		    invisible(#page_num) = 1, invisible(#dbname) = 1,
##		    invisible(#row_num) = 1, invisible(#resource) = 0);
	}

	int_to_str(str_gr, sizeof(str_gr), LOCK_MODE, rsb->rsb_grant);
	int_to_str(str_cv, sizeof(str_cv), LOCK_MODE, rsb->rsb_convert);

##	PUTFORM #fshowblock (#id = id, 
##		#grant = str_gr,
##		#convert = str_cv,
##	    	#table_name = tab_name, #page_num = page_num, 
##		#dbname = dbname, #resource = res_name, #row_num = row_num,
##	    	#lock_type = lock_tp)

	/* Now display the actual locks in the tablefield */
	printresdet(counter, formname);
	break;	/* no need to look at rest of resource list */
    }
    close_db();	/* ensure that there are no open databases */

    if (resource_found)
	return(OK);
    else
	return(FAIL);
}
