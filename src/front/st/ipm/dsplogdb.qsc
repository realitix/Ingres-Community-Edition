/*
**      Copyright (c) 2004 Actian Corporation
**      All rights reserved.
*/

/*
** includes and defines
*/
#include <compat.h>
#include <iicommon.h>
#include <si.h>
#include <cs.h>
#include <st.h>
#include <dbms.h>
#include <fe.h>
#include <pc.h>
#include <lk.h>
#include <lg.h>
#include <er.h>
#include        <adf.h>
#include        <ft.h>
#include        <fmt.h>
#include        <frame.h>
#include "lists.h"
#include "msgs.h" 
#include "dba.h"
#include "me.h"

/*
**  File: dsplogdb.qc
**
**  Purpose - this file contains the routines which display the active dbs
**	(in logging system) information form.  
**
**  This file contains:
**	displgdb() - displays a list of dbs in the logging system form. 
**	printlgdb() - gets, formats and outputs logging system db information.
**	get_logdb_name() - given a logging db id, returns the name.
**
**  History
**	8/29/89		tomt	created
**	9/4/89		tomt	added code to display log db info
**	9/5/89		tomt	added get_logdb_name() routine
**	10/1/89		tomt	integrated 6.3 changes
**	3/21/91		tomt	changed title on form to trim.  Removed
**                              variable used to hold title.
**      5/26/93 (vijay)
**              include pc.h
**	26-Aug-1993 (fredv)
**		Included <st.h>.
**      21-Sep-1993 (smc)
**              Added <cs.h> for CS_SID.
**	 1-Nov-1995 (nick)
**		Remove unused variable.
**      15-jan-1996 (toumi01; from 1.1 axp_osf port)
**              Added kchin's change (from 6.4) for axp_osf
**              9/10/93 kchin   changed type of lforce, and lwait from long to
**                              i4.  This is to fix problems when running
**                              on 64-bit platform such as Alpha OSF/1, in
**                              this case long is 64-bit, which is no longer
**                              similar in size to 32-bit int, thus mixing
**                              them will result in error, moreover, 64-bit
**                              integer is not supported by SQL/QUEL yet.
**      08-Dec-1997 (hanch04)
**          Use new la_block field when block number is needed instead
**          of calculating it from the offset
**          Keep track of block number and offset into the current block.
**          for support of logs > 2 gig
**
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	24-Nov-2009 (frima01) Bug 122490
**	    Moved string_move declaration to fe.h for inclustion in
**	    front end mudules.
**      22-apr-2010 (stial01)
**          Changes for Long Ids
**      24-May-2010 (stial01)
**          Fixed above change.
**      10-Jun-2010 (stial01)
**          Fixed above change.
**	04-Jan-2011 (jonj) SIR 124894 LG/LK/IPM unification
**	    Use lg.h-defines string constants.
**      13-Jul-2011 (hanal04) SIR 125458
**          Update cs_elog calls inline with sc0e_putAsFcn changes.
*/

#define		LOC_MAXSIZE		(DB_LOC_MAXNAME * 2)

/*
** forward declarations
*/
VOID printlgdb();
VOID get_lklgstats();
VOID morelgdb();
VOID stat_decode();
FUNC_EXTERN VOID tablefield_find();

/*
** Declare file wide statics
*/
## static char Fdisplgdb[] = "fdisplgdb";
## static char Fmorelgdb[] = "fmorelgdb";

/*
** Routine: displgdb()  displays a list of databases in the logging system
**	    on a popup form
**
** Inputs: none
**
** Outputs: displays a form
**
** Side effects: assumes the forms system is active
*/
VOID
displgdb()
{
    bool	e_xit = FALSE;
##  int		list_count;
##  char	colname[FE_MAXNAME + 1];
    static bool	forms_added = FALSE;

##  GLOBALREF int *fdisplgdb;
##  GLOBALREF int *fmorelgdb;

    /*
    **  Determine if forms are added, if not addform them.  Also
    **  don't add forms if output is being directed to a file
    */
    if (!forms_added)
    {
##	ADDFORM fmorelgdb
##	ADDFORM fdisplgdb
	forms_added = TRUE;
    }

    /*
    **  Display the form and get the information
    */
##  DISPLAY Fdisplgdb READ WITH STYLE = popup (BORDER = none,
##	STARTCOLUMN = 2, STARTROW = 2)
##  INITIALIZE
##  {

##	INITTABLE Fdisplgdb #dblist READ (db_id = c8, db_owner = varchar(32),
##	    force = i4, wait = i4, location = varchar(64), lga = varchar(50),
##	    #backup = varchar(50))

	printlgdb();	/* Put the info in the tablefield */

	/* get number of dbs in logging system */
##	INQUIRE_FRS TABLE Fdisplgdb (list_count = DATAROWS(#dblist))

##  }
##  ACTIVATE MENUITEM "Refresh":
##  {
	/* Get lock resource info from INGRES */
##	CLEAR FIELD #dblist
##	MESSAGE "Loading logging information..."
	get_lklgstats(GET_LOGDBLIST, (PTR) 0);

	printlgdb();	/* put the info in the tablefield */

	/* get number of dbs */
##	INQUIRE_FRS TABLE Fdisplgdb (list_count = DATAROWS(#dblist))
##  }
##  ACTIVATE MENUITEM "More_Info":
##  {
	if (list_count == 0) {
	    POP_MSG("There are no databases to get information on");
##	    RESUME
	}
	morelgdb();
##  }
##  ACTIVATE MENUITEM "Find", frskey7:
##  {
	if (list_count == 0) {
	    POP_MSG("There is nothing to find");
##	    RESUME
	}
##      INQUIRE_FRS COLUMN Fdisplgdb #dblist (colname = name)
	tablefield_find();
##	RESUME COLUMN #dblist colname
##  }
##  ACTIVATE MENUITEM "Help", frskey1:
##  {
	my_help("ipmdplgd.hlp", "Log Database");
##  }
##  ACTIVATE MENUITEM "End", frskey3:
##  {
##	BREAKDISPLAY
##  }
##  ACTIVATE MENUITEM "Quit", frskey2:
##  {
	e_xit = TRUE;		/* user wants to leave */
##	MESSAGE " "		/* force cursor to bottom of screen */
##	BREAKDISPLAY
##  }

    if (e_xit) {		/* user wants to leave */
	terminate(OK);
    }
    return;
}

/*
** morelgdb() - This routine displays the popup form which show the
**	less needed database info.
**
** History
**	8/29/89		tomt	written
**	9/4/89		tomt	added code to display info
**	10/1/89		tomt	integrated 6.3 changes
**
*/
VOID
morelgdb()
{
/*
** Declare Variables
*/
##  char	dbowner[FE_MAXNAME + 1], loc[LOC_MAXSIZE + 1], llga[51],
##		dbid[HEXID_SIZE + 1];
##  char	back_up[51];
##  i4	lforce, lwait;

##  DISPLAY Fmorelgdb READ
##  INITIALIZE
##  {

	/*
	**   Get the values off of the tablefield on the base form and
	**   place them on the current form
	*/
##	GETROW Fdisplgdb #dblist (dbowner = #db_owner, loc = #location,
##	    llga = #lga, lforce = #force, lwait = #wait, dbid = #db_id,
##	    back_up = #backup)
##	PUTFORM Fmorelgdb (#db_id = dbid, #owner = dbowner, #force = lforce,
##	    #wait = lwait, #location = loc, #lga = llga, #backup = back_up)
##	REDISPLAY
##	SUBMENU
##	ACTIVATE MENUITEM "End", frskey3:
##	{
##		BREAKDISPLAY
##	}
##  }
    return;
}

/*
** printlgdb() - this routine gets, formats and outputs the logging system
**	database information.
**
** Inputs:
**	none
**
** Outputs:
**	formatted logging db information to screen or file
**
** Returns:
**	none
**
** History:
**	8/27/89		tomt	written
**	9/4/89		tomt	added code to display info
**	9/8/89		tomt	fixed so db list traversal begins at beginning
**				of list
**	10/1/89		tomt	integrated 6.3 changes
**	30-July-1993	jpk	update LG_DATABASE structure member names
**				to reflect LGshow interface change.
**	21-mar-94 (smc) Bug #60829
**		Added #include header(s) required to define types passed
**		in prototyped external function calls.
*/
VOID
printlgdb()
{
##  char	db_name[FE_MAXNAME + 1], db_stat[41]; 
##  char	db_own[FE_MAXNAME + 1], lga[51];
##  char	location[LOC_MAXSIZE + 1], db_id[HEXID_SIZE + 1], backup[51];
    u_i4	bgn1, mid1, end1, bgn2, mid2, end2;
    PTR		bufptr;		/* used to step thru ldb->buffer string */
    u_i4	length;
    bool	reset = TRUE;	/* start at beginning of list */
    LG_DATABASE	*ldb;
    LG_HEADER	header;
##  i4	db_stat_trans;
##  i4	db_stat_read;
##  i4	db_stat_write;
##  i4	db_stat_begin;
##  i4	db_stat_end;
##  i4	db_stat_force;
##  i4	db_stat_wait;

    /*
    **    Need header info for calculating journal window size
    */
    get_lklgstats(GET_LOGHEADER, (PTR) &header);

    while ((ldb =
	(LG_DATABASE *)l_retrieve(LOGDBINFO, 0, &reset)) != NULL)
    {
	/* do formatting for display */
	STprintf(db_id, "%x", ldb->db_id);

	/*
	** Database info is in db_buffer as follows
	** 
	** Database name 
	** Database Owner 
	** Database ID
	** Length of pathname
	** Database Path
	** 
	** We got the LG database information from LGshow in gtlklgst.qsc
	** A better way would have been to connect to the imadb and
	** select db_name,db_owner from ima_log_databases
	** (this would require that we add the area name to this ima table)
	** IMA is the preferred way to access information in server 
	** control blocks.
	** 
	** One side note is that connecting from imadb to select 
	** LG database information will always return an entry for imadb
	** (that would not necessarily be there if you did LGshow).
	*/
	bufptr = &ldb->db_buffer[0];
	MEmove(DB_DB_MAXNAME, bufptr, ' ', sizeof(db_name), db_name);
	db_name[sizeof(db_name)-1] = EOS;

	bufptr += DB_DB_MAXNAME; /* move pointer to the next item */

	MEmove(DB_OWN_MAXNAME, bufptr, ' ', sizeof(db_own), db_own);
	db_own[sizeof(db_own)-1] = EOS;

	bufptr += DB_OWN_MAXNAME; /* move pointer to the next item */

	stat_decode(db_stat, DB_STATUS_MEANING, (u_i4) ldb->db_status);

 	/* len of location (counted string) */
 	length = *(i4 *)&ldb->db_buffer[DB_DB_MAXNAME + DB_OWN_MAXNAME + 4];
 	if (length > LOC_MAXSIZE)
 	{
 	    length = LOC_MAXSIZE;
 	}
 	STlcopy(&ldb->db_buffer[DB_DB_MAXNAME + DB_OWN_MAXNAME + 4 + sizeof(i4)],
 	    location, length);

	bgn1 = ldb->db_f_jnl_la.la_sequence;
	mid1 = ldb->db_f_jnl_la.la_block,
	end1 = ldb->db_f_jnl_la.la_offset;
	bgn2 = ldb->db_l_jnl_la.la_sequence;
	mid2 = ldb->db_l_jnl_la.la_block;
	end2 = ldb->db_l_jnl_la.la_offset;
	STprintf(lga, "<%d,%d,%d>..<%d,%d,%d>",
	    bgn1, mid1, end1, bgn2, mid2, end2);

	bgn1 = ldb->db_sbackup.la_sequence;
	mid1 = ldb->db_sbackup.la_block;
	end1 = ldb->db_sbackup.la_offset;
	STprintf(backup, "<%d,%d,%d>", bgn1, mid1, end1);

	if (ldb->db_status == 0)  /* just in case, make it clear on scr */
	    STcopy("<none>", db_stat);

	db_stat_trans = ldb->db_stat.trans;
	db_stat_read = ldb->db_stat.read;
	db_stat_write = ldb->db_stat.write;
	db_stat_begin = ldb->db_stat.begin;
	db_stat_end = ldb->db_stat.end;
	db_stat_force = ldb->db_stat.force;
	db_stat_wait = ldb->db_stat.wait;

##	LOADTABLE Fdisplgdb #dblist (#db_id = db_id, #db_name = db_name,
##	    #db_s = db_stat, #trans = db_stat_trans,
##	    #read = db_stat_read, #write = db_stat_write,
##	    #begin = db_stat_begin, #end = db_stat_end,
##	    #db_owner = db_own, #force = db_stat_force,
##	    #wait = db_stat_wait, #location = location, #lga = lga,
##	    #backup = backup)
    }
    return;
}

/*
** get_logdb_name - this routine finds the name of a database given
**	a database ID.  If it can't find it, a default string is returned
**
** Inputs:
**	db_name - a ptr to a buffer where the name is placed
**	db_id - the db id for which to get the db name
**
** Outputs:
**	the db name placed where db_name points
**
** Returns:
**	none
**
** History:
**	9/5/89		tomt	written
**	12/13/92	jpk	support XA transactions, DB_MAXNAME
*/
VOID
get_logdb_name(db_name, db_id)
PTR db_name;
LG_DBID db_id;
{
    bool		found = FALSE;	/* set if db found */
    bool		reset = TRUE;	/* start at beginning of list */
    LG_DATABASE	*ldb;

    /*
    ** find the matching dbname
    */
    while ((ldb =
	(LG_DATABASE *)l_retrieve(LOGDBINFO, 0, &reset)) != NULL)
    {
	/*
	**    Check if db_ids match
	*/
	if (ldb->db_id == db_id)
	{
 	    string_move(db_name, (PTR) ldb->db_buffer, (i4) DB_DB_MAXNAME); /* info is a substr of str */
 	    db_name[DB_DB_MAXNAME] = EOS;
	    found = TRUE;
	    break;
	}
    }
    if (!found)
	STcopy("<none found>", db_name);

    return;
}
