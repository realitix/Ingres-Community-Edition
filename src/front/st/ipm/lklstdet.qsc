
/*
**      Copyright (c) 2004 Actian Corporation
**      All rights reserved.
*/

/*
** Includes and defines
*/
#include <compat.h>
#include <iicommon.h>
#include <cs.h>
#include <st.h>
#include <dbms.h>
#include <fe.h>
#include <pc.h>
#include <lk.h>
#include <cx.h>
#include <cv.h>
#include <lg.h>
#include <cm.h>
#include <er.h>
#include "lists.h"
#include "dba.h"
#include "block.h"

/*
**
**  File: lklstdet.qc
**
**  Routines:
**	locklistdet() - displays the lock list detail form
**	printlockdet() - gets and formats lock list detail
**
**  Purpose - this file contains the routines to displays locks for all lock
**	lists or for a selected lock list.  This routine displays all
**	locks and is called from the lock list list display.
**
**  Inputs
**	sub_list - the desired sublist for a given main lock list element.  For
**		example, all the locks for the 2nd locklist row in the
**		tablefield of Lock List Information Display.
**
**  History
**	1/6/89		tomt		created
**	3/1/89		tomt		can only be called from displklists()
**					   if called to display a particular sublist
**	3/15/89		tomt		broke out get and format lkdet code
**	8/18/89		tomt		use INGDBA version of LK structs
**	9/24/89		tomt		call showblock with mode so showblock
**					knows how it was called.
**	3/21/91		tomt		changed title on form to trim.  Removed
**                              	variable used to hold title.
**      5/26/93 (vijay)
**              include pc.h
**	26-Aug-1993 (fredv)
**		Included <st.h>. Also, removed extra argument to STtrmwhile()
**			calls.
**      21-Sep-1993 (smc)
**              Added <cs.h> for CS_SID.
**      27-Dec-1994 (canor01)
**              Added function declaration for lock_itoa()
**      24-Apr-1995 (nick) Bug 67888
**              Added LK_CKP_TXN
**	21-aug-1995 (albany)  Bug #70787
**		printlockdet() now properly decodes the lkb_flags bitmap
**		rather than attempting to index off of it.
**	 1-nov-1995 (nick)
**		Change display method for LK_CONTROL. #71654
**		Add support for LK_AUDIT and LK_ROW. #72320
**	22-nov-1996 (dilma04)
**		Added LK_PH_PAGE and LK_VAL_LOCK for row level loking 
**		project.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	19-jul-2001 (devjo01)
**	    Modify for new LK_LKB_INFO struct. s103715.
**	26-May-2009 (kschendel) b122041
**	    Compiler warning fixes.
**	24-Nov-2009 (frima01) Bug 122490
**	    Added include of cv.h and moved string_move declaration
**	    to fe.h for inclustion in front end mudules.
**	04-Jan-2011 (jonj) SIR 124894 LG/LK/IPM unification
**	    Use int_to_str() to figure out lock type, lkb state,
**	    lock mode, delete obsolete LK_OWNER_ID, LK_PH_PAGE,
**	    LK_EXTEND_FILE lock types, add LK_TBL_MVCC type.
**      13-Jul-2011 (hanal04) SIR 125458
**          Update cs_elog calls inline with sc0e_putAsFcn changes.
*/

/*
** Forward and external Declares
*/
VOID close_db();
STATUS get_rel_name();
STATUS get_db_name();
VOID morelklock();
VOID open_db();
VOID printlockdet();
VOID int_to_str();
VOID showblock();
#ifdef VMS
    VOID showproc();
    VOID stat_decode();
#endif
FUNC_EXTERN VOID tablefield_find();


/*
**  Name: locklistdet()
**
**  Purpose - this routine displays locks for all lock lists
**	or for a selected lock list.  This routine displays all
**	locks and is called from the lock list list display.
**
**
**  Inputs
**	sub_list - the desired sublist for a given main lock list element.  For
**		example, all the locks for the 2nd resource row in the
**		tablefield of Lock List Information Display.
**
**  History
**	1/6/89		tomt		created
**	3/1/89		tomt		can only be called from displklists()
**					   if called to display a particular sublist
**	3/15/89		tomt		broke out get and format lkdet code
**	9/13/89		tomt		added ability to look at other locks
**					   on a specified resource
**	9/24/89		tomt		call showblock with mode so showblock
**					knows how it was called.
*/
VOID
locklistdet(sub_list)
i4  sub_list;
{
##  char	colname[FE_MAXNAME + 1], rsb_to_check[HEXID_SIZE + 1];
    i4	i_rsb;
    bool	e_xit = FALSE;

    /*
    **  Display the form and get the information
    */
##  DISPLAY #fshowlklock READ
##  INITIALIZE
##  {
##	INITTABLE #fshowlklock #lockdetail READ (#rsb = c8, #lock_id = c8,
##	    #value = c16)
	printlockdet(sub_list);	/* put lock list locks on form */

##  }
##  ACTIVATE MENUITEM "More_Info":
##  {
	morelklock();
##  }
##  ACTIVATE MENUITEM "Resource_Info":
##  {
##	MESSAGE "Loading resource information..."
##	GETROW #fshowlklock #lockdetail (rsb_to_check = #rsb)
	CVahxl(rsb_to_check, &i_rsb);	/* to int */
	showblock(i_rsb, SHOWRES);
##  }
##  ACTIVATE MENUITEM "Find", frskey7:
##  {
##      INQUIRE_FRS COLUMN #fshowlklock #lockdetail (colname = name)
	tablefield_find();
##	RESUME COLUMN #lockdetail colname
##  }
##  ACTIVATE MENUITEM "Help", frskey1:
##  {
	my_help("ipmlkltd.hlp", "Lock Detail");
##  }
##  ACTIVATE MENUITEM "End", frskey3:
##  {
##	BREAKDISPLAY
##  }
##  ACTIVATE MENUITEM "Quit", frskey2:
##  {
	e_xit = TRUE;	/* user wants to leave */
##	MESSAGE " "	/* force cursor to bottom of screen */
##	BREAKDISPLAY
##  }

    if (e_xit)  /* user wants to leave */
    {
	terminate(OK);
    }
    return;
}

/*
** morelklock() - This routine displays the popup form which show the
**	less needed lock detail info.
**
** History
**	3/2/89		tomt	written
**
*/
VOID
morelklock()
{
##  char	crsb[HEXID_SIZE + 1], clock_id[HEXID_SIZE + 1], cvalue[17];

##  DISPLAY #fmorelklock READ
##  INITIALIZE
##  {
	/*
	**   Get the values off of the tablefield on the base form and
	**   place them on the current form
	*/
##	GETROW #fshowlklock #lockdetail (crsb = #rsb, clock_id = #lock_id,
##	    cvalue = #value)
##	PUTFORM #fmorelklock (#rsb = crsb, #lock_id = clock_id,
##	    #value = cvalue)
##	REDISPLAY
##	SUBMENU
##	ACTIVATE MENUITEM "End", frskey3:
##	{
##	    BREAKDISPLAY
##	}
##  }

    return;
}

/*
** Routine:
**	printlockdet() - gets and formats lock list detail
**
**	This routine gets and formats lock list locks
**
** Inputs:
**	sublist - which sublist to get.  0 means all sublists
**
** Outputs:
**	none
** Returns:
**	none
**
** History
**	3/15/89		tomt	written
**      4/24/95         nick    Added LK_CKP_TXN
**	21-aug-1995 (albany)  Bug #70787
**		printlockdet() now properly decodes the lkb_flags bitmap
**		rather than attempting to index off of it.
**	11/1/95		nick	Add support for LK_AUDIT and LK_ROW. #72320
**				Change handling of LK_CONTROL. #71654
**      22-nov-1996     dilma04 Added LK_PH_PAGE and LK_VAL_LOCK for row 
**                              level loking project.
**      16-oct-1998     stial01 Correctly print last element of Lock_type array
**      08-dec-1998     stial01 Increase size of key buffer
**      08-Aug-2000 (hanal04)
**              Made crtblname 17 elements long to resolve out of bounds
**              reference.
**	19-jul-2001 (devjo01)
**	    Modify for new LK_LKB_INFO struct. s103715.
**	05-Mar-2002 (jenjo02)
**	    Added LK_SEQUENCE
*/
VOID
printlockdet(sublist) 
i4	sublist;
{
##  char	id[HEXID_SIZE + 1], rsb[HEXID_SIZE + 1],
##		lock_id[2 * (HEXID_SIZE + 2)];
##  char	state[51], tmpstate[51], flagstate[51];
##  char	lock_value[ 4 *(HEXID_SIZE + 2)], llb[HEXID_SIZE + 1],
##		lock_tp[15];
##  char	key[200];
##  char	tempbuf[50];
##  char	tab_name[FE_MAXNAME + 1];
    char	dbbuf[FE_MAXNAME + 1]; /* for printing dbname */
##  char	*dbname = dbbuf;
    char	*dbn = dbbuf;
    char	olddbname[FE_MAXNAME + 1];
##  char	crtblname[17], crownname[9];
    bool	is_db_same = FALSE;	/* used to help formatting */
    bool	is_table_same = FALSE;  /* used to help formatting */
    i4		table_id = 0, table_idx = 0;
    i4		select_sub;
    bool	reset = TRUE;	/* start at beginning of list */
    i4		num_in_list;
    STATUS	status;
    LK_LKB_INFO *lkb;
##  char	str_rq[5];
##  char	str_gr[5];		/* not shown any more */

    /*  Determine if caller wants a particular sublist  */
    if (sublist > 0)		/* yes, caller does */
    {
	select_sub = TRUE;
    }
    else 			/* no, caller wants all sublists */
    {
	sublist = 1;		/* start with first sublist */
	select_sub = FALSE;
	num_in_list = l_num_elements(LOCKINFO); /* how many elements to walk */
    }

    for (; ;) 	/* something to break out of */
    {
	while ((lkb = (LK_LKB_INFO *)l_retrieve(LOCKINFO,
	    sublist, &reset)) != NULL) 
	{
	    /*
	    **        do formatting for display
	    */
	    STprintf(id, "%x", lkb->lkb_id);
	    STprintf(rsb, "%x", lkb->lkb_rsb_id);
	    STprintf(llb, "%x", lkb->lkb_llb_id);

	    int_to_str(state, sizeof(state), LKB_STATE, lkb->lkb_state);

	    if (lkb->lkb_attribute & LKB_PHYSICAL) {
		STprintf(tmpstate, "%s PHYS(%d) ", state, lkb->lkb_phys_cnt);
		STcopy(tmpstate, state);
	    }

	    if ( CXcluster_configured() )
	    {
		STprintf(lock_id, "%x.%x", 
		 lkb->lkb_dlm_lkid.lk_uhigh,  lkb->lkb_dlm_lkid.lk_ulow);
		STprintf(lock_value, "%08x %08x %08x %08x", 
			 lkb->lkb_dlm_lkvalue[0], lkb->lkb_dlm_lkvalue[1],
			 lkb->lkb_dlm_lkvalue[2], lkb->lkb_dlm_lkvalue[3]);
# ifdef VMS
		stat_decode( flagstate, LKB_ATTRIBUTE, (u_i4)lkb->lkb_attribute );
		STprintf(tmpstate, "%s %s", state, flagstate );
		STcopy(tmpstate, state);
# endif /* VMS */
	    }
	    else
	    {
		STcopy("<n/a>", lock_value);
		STcopy("<n/a>", lock_id);
	    }
	    int_to_str(lock_tp, sizeof(lock_tp), LK_LOCK_TYPE_MEANING, lkb->lkb_key[0]);

	    switch(lkb->lkb_key[0]) {
	    case LK_DATABASE:
	    case LK_SV_DATABASE:
	    case LK_JOURNAL:
	    case LK_DB_TEMP_ID:
	    case LK_CONFIG:
	    case LK_OPEN_DB:
	    case LK_CKP_CLUSTER:
	    case LK_BM_DATABASE:

		if (lkb->lkb_key[0] == LK_BM_DATABASE)	/* dbname handling */
		    (VOID)get_db_name(dbname, lkb->lkb_key[1]);
		else
		    STcopy((char*) &lkb->lkb_key[1], dbname);

		if (!CMnmstart(dbn))	/* truncate any invalid non INGNAMEchar */
		{
		     *dbn = EOS;
		}
		else	/* step thru, insert NULL at first nonvalid char */
		{
		    for (CMnext(dbn); *dbn != EOS; CMnext(dbn))
		    {
			if (!CMnmchar(dbn))
			{
			    *dbn = EOS;
			    break;
			}
		    }
		}
		STprintf(key, "%-32s", dbname);
		break;

	    case LK_CONTROL:
		string_move(tempbuf, (PTR) &lkb->lkb_key[1], LK_KEY_LENGTH);
		tempbuf[LK_KEY_LENGTH] = EOS;   /* null terminate */
		STprintf(key, "SYS CONTROL: %s", tempbuf);
		break;

	    case LK_TABLE:
	    case LK_BM_TABLE:
	    case LK_SV_TABLE:
	    case LK_TBL_CONTROL:
	    case LK_TBL_MVCC:

		/* 
		**  Open the next database, if necessary, because
		**  you are going to have to print out relation name.  
		*/
	        (VOID)get_db_name(dbname, lkb->lkb_key[1]);
	        if (STcompare(olddbname, dbname) != 0)	/* different */
		{
		    close_db();
		    open_db(dbname);			/* open a database */
		    STcopy(dbname, olddbname);
		    is_db_same = FALSE;
	        }
		else
		    is_db_same = TRUE;

	        if (!is_db_same || (table_id != lkb->lkb_key[2]) || 
		    (table_idx != lkb->lkb_key[3]))	/* diff. tbl name */
		{
		    status = get_rel_name(tab_name, lkb->lkb_key[2],
			lkb->lkb_key[3]);
		    STtrmwhite(dbname);
		    if (status == OK)			/* if real tbl name */
			STzapblank(tab_name, tab_name);	/* trim string */
		    else
			STtrmwhite(tab_name);
		    table_id = lkb->lkb_key[2];		/* for next time */
		    table_idx = lkb->lkb_key[3];
	        }

		if (is_db_same)
		{
		    STprintf(key, "   %-32s", tab_name);
		}
		else
		{
		    STprintf(key, "%s, TABLE: %s", dbname, tab_name);
		}
	        break;

	    case LK_PAGE:
	    case LK_BM_PAGE:

		/* 
		** Open the next database, if necessary, because you are going to have
		** to print out relation name.  Try to be clever about formatting:
		** if dbname is same as previous lock then don't print it etc...
		*/
		(VOID)get_db_name(dbname, lkb->lkb_key[1]);
		if (STcompare(olddbname, dbname) != 0)	/* different */
		{
		    close_db();
		    open_db(dbname);			/* open a database */
		    STcopy(dbname, olddbname);
		    is_db_same = FALSE;
	        }
		else
		    is_db_same = TRUE;

	        if ((table_id != lkb->lkb_key[2]) || !is_db_same ||
		    (table_idx != lkb->lkb_key[3]))	/* diff tbl name */
		{
		    (VOID)get_rel_name(tab_name, lkb->lkb_key[2],
			lkb->lkb_key[3]);
		    table_id = lkb->lkb_key[2];		/* for next time */
		    table_idx = lkb->lkb_key[3];
		    is_table_same = FALSE;
	        }
		else
		{
		    is_table_same = TRUE;
		}

		if ((is_db_same) && (is_table_same))
		{
		    STprintf(key, "%40d", lkb->lkb_key[4]);
		}
		else if ((is_db_same) && !is_table_same)
		{
		    STprintf(key, "   %-30s %6d", tab_name, lkb->lkb_key[4]);
		}
		else
		{
		    STprintf(key, "%s, TABLE: %s, PAGE: %d",
		    dbname, tab_name, lkb->lkb_key[4]);
		}
	        break;

	    case LK_SS_EVENT:
	        STprintf(key, "SERVER: %x,[%x,%x]", lkb->lkb_key[1],
		    lkb->lkb_key[2], lkb->lkb_key[3]);
	        break;

	    case LK_EVCONNECT:
		STprintf(key, "Server PID = %d", lkb->lkb_key[1]);
		break;

	    case LK_CKP_TXN:
		if ((lkb->lkb_key[3] != 0) && (lkb->lkb_key[1] != 0))
		{
		    string_move(crtblname, (PTR) &lkb->lkb_key[3], 16);
		    string_move(crownname, (PTR) &lkb->lkb_key[1], 8);
		    crtblname[16] = crownname[8] = EOS;
		}
		else
		{
		    crtblname[0] = crownname[0] = EOS;
		}
		STprintf(tempbuf, "%s-%s", crtblname, crownname);
		STzapblank(tempbuf, tempbuf);
		STprintf(key, "   ('%s')", tempbuf);
	        break;

	    case LK_AUDIT:
		if (lkb->lkb_key[1] == SXAS_LOCK)
		{
		    if (lkb->lkb_key[2] == SXAS_STATE_LOCK)
			STprintf(key, "AUDIT: State(primary)");
		    else if (lkb->lkb_key[2] == SXAS_SAVE_LOCK)
			STprintf(key, "AUDIT: State(save)");
		    else
			STprintf(key, "AUDIT: State(oper=%d)", 
				lkb->lkb_key[2]);
		}
		else if (lkb->lkb_key[1] == SXAP_LOCK)
		{
		    if (lkb->lkb_key[2] == SXAP_SHMCTL)
			STprintf(key, 
			    "AUDIT: Physical_layer(shmctl, node=%x)",
			    lkb->lkb_key[3]);
		    else if (lkb->lkb_key[2] == SXAP_ACCESS)
			STprintf(key, "AUDIT: Physical_layer(access)");
		    else if (lkb->lkb_key[2] == SXAP_QUEUE)
			STprintf(key,
			    "AUDIT: Physical_layer(queue, node=%x)",
			    lkb->lkb_key[3]);
		    else
			STprintf(key, "AUDIT: Physical_layer(oper=%d)",
			    lkb->lkb_key[2]);
		}
		else
		{
		    STprintf(key, "AUDIT: TYPE=%d, OPER=%d", lkb->lkb_key[1],
			lkb->lkb_key[2]);
		}
		break;

	    case LK_ROW:
		(VOID)get_db_name(dbname, lkb->lkb_key[1]);
		if (STcompare(olddbname, dbname) != 0)
		{
		    close_db();
		    open_db(dbname);			/* open a database */
		    STcopy(dbname, olddbname);
		    is_db_same = FALSE;
	        }
		else
		{
		    is_db_same = TRUE;
		}

	        if ((table_id != lkb->lkb_key[2]) || 
			!is_db_same ||
		    	(table_idx != lkb->lkb_key[3]))	/* diff tbl name */
		{
		    (VOID)get_rel_name(tab_name, lkb->lkb_key[2],
			lkb->lkb_key[3]);
		    table_id = lkb->lkb_key[2];		/* for next time */
		    table_idx = lkb->lkb_key[3];
		    is_table_same = FALSE;
	        }
		else
		{
		    is_table_same = TRUE;
		}

		if ((is_db_same) && (is_table_same))
		{
		    STprintf(tempbuf, "%d[%d]", lkb->lkb_key[4], 
			lkb->lkb_key[5]);
		    STprintf(key, "%40s", tempbuf);
		}
		else if ((is_db_same) && !is_table_same)
		{
		    STprintf(tempbuf, "%d[%d]", lkb->lkb_key[4], 
			lkb->lkb_key[5]);
		    STprintf(key, "   %-24s %12s", tab_name, tempbuf);
		}
		else
		{
		    STprintf(key, "%s, TABLE: %s, PAGE: %d, ROW: %d",
		    dbname, tab_name, lkb->lkb_key[4], lkb->lkb_key[5]);
		}
		break;
 
	    case LK_CREATE_TABLE:
	    case LK_CKP_DB:
	    case LK_SEQUENCE:

		/* 
		** Open the next database, if necessary,
		** because you are going to have to print out relation name.  
		*/
	        (VOID)get_db_name(dbname, lkb->lkb_key[1]);
	        if (STcompare(olddbname, dbname) != 0) 
		{
		    close_db();
		    open_db(dbname);			/* open a database */
		    STcopy(dbname, olddbname);
		    is_db_same = FALSE;
	        }
		else
		    is_db_same = TRUE;

		/*
		** Extract the table and owner name from the lock struct
		** They are stored without null terminators, so we take care
		** of that. In some cases, the pointers are null, we check
		*/
		if ((lkb->lkb_key[4] != 0) && (lkb->lkb_key[2] != 0))
		{
		    string_move(crtblname, (PTR) &lkb->lkb_key[4], 12);
		    string_move(crownname, (PTR) &lkb->lkb_key[2], 8);
		    crtblname[12] = crownname[8] = EOS;
		}
		else
		{
		    crtblname[0] = crownname[0] = EOS;
		}
		STprintf(tempbuf, "%s-%s", crtblname, crownname);
		STzapblank(tempbuf, tempbuf);

		if (is_db_same)
		{
		    STprintf(key, "   ('%s')", tempbuf);
		}
		else
		{
		    STprintf(key, "%s, NAME: ('%s')", dbname, tempbuf);
		}
	        break;
 
	    case LK_BM_LOCK:
		string_move(tempbuf, (PTR) &lkb->lkb_key[1], 8);
		tempbuf[8] = EOS;
		STprintf(key, "BUFMGR = '%s'", tempbuf);
		break;

            case LK_VAL_LOCK:
                (VOID)get_db_name(dbname, lkb->lkb_key[1]);
                (VOID)get_rel_name(tab_name, lkb->lkb_key[2], lkb->lkb_key[3]);
                STprintf(key, "%s, %s, VALUE: <%d,%d,%d>", 
                    dbname, tab_name, lkb->lkb_key[4], lkb->lkb_key[5], 
                    lkb->lkb_key[6]);
                break;


	    default:
	        STprintf(key, "%d, <(%x,%x,%x,%x,%x,%x)>",
		    lkb->lkb_key[0],lkb->lkb_key[1],
                    lkb->lkb_key[2],lkb->lkb_key[3],
		    lkb->lkb_key[4],lkb->lkb_key[5],lkb->lkb_key[6]); 
	    }

	    int_to_str(str_rq, sizeof(str_rq), LOCK_MODE, lkb->lkb_request_mode);
/*	    int_to_str(str_gr, sizeof(str_gr), LOCK_MODE, lkb->lkb_grant_mode); */

##	    LOADTABLE fshowlklock #lockdetail (#id = id,
##	        #rsb = rsb, #request = str_rq,
##	        #state = state,
##	        #lock_id = lock_id, #value = lock_value,
##	        #key = key, #lock_type = lock_tp)
	}
	if (select_sub)		/* if user wants this particular sublist */
	{
	    break;		/* then we are done getting the data */
	} 
	else			/* else user wants all sublists */
	{
	    if (sublist >= num_in_list)		/* no more to get */
		break;
	    sublist++;				/* move to next sublist */
	}
    }
    return;
}
