/*
**  Copyright (c) 2001, 2006 Actian Corporation.
*/

/*
**  Name: enterprise.cpp
**
**  Description:
**	Defines the class behaviors for the application.
**
**  History:
**	05-Jun-2001 (penga03)
**	    Created.
**	07-Jun-2001 (penga03)
**	    Added Execute() which creates a new process to execute an
**	    executable file. 
**	15-Jun-2001 (penga03)
**	    Added function Local_NMgtIngAt, a revised version of
**	    NMgtIngAt independent of Ingres CL functions.
**	23-July-2001 (penga03)
**	    Added functions IsWindows9X, GetII_SYSTEM, Local_PMget,
**	    IngresAlreadyRunning, WinstartRunning(), IsVer25().
**	23-July-2001 (penga03)
**	    For silence mode installation, also check if there exists
**	    an installation installed by old installer, if there exists,
**	    ask user if upgrade this installation.
**	23-July-2001 (penga03)
**	    For silence mode installation, if ingres is running,
**	    terminate installing.
**	15-aug-2001 (somsa01)
**	    In IngresAlreadyRunning(), since users are told to remove
**	    everything in their bin and utility directories before
**	    performing an upgrade, iigcn.exe will not exist. Therefore,
**	    we'll use the check for config.dat as the surefire way of
**	    letting us know that there is a valid installation here,
**	    then go on from there to see if Ingres is running.
**	24-oct-2001 (penga03)
**	    If Local_NMgtIngAt and Local_PMget don't find the value for the 
**	    string, return FALSE. 
**	05-nov-2001 (penga03)
**	    Removed GetII_SYSTEM and IsVer25. 
**	    In silence mode, according to the comparision of the installation 
**	    id read from response file and the ids already found, set the 
**	    property INGRES_VER25 and pass it to MsiExec.exe.
**	08-nov-2001 (somsa01)
**	    Made the changes corresponding to the new CA marketing campaign.
**	10-nov-2001 (somsa01)
**		Cleaned up 64-bit compiler warnings.
**	30-jan-2002 (penga03)
**	    Changed the registry key for Ingres from 
**	    "HKEY_LOCAL_MACHINE\\Software\\ComputerAssociates\\IngresII\\" to 
**	    "HKEY_LOCAL_MACHINE\\Software\\ComputerAssociates\\Advantage Ingres\\".
**	30-aug-2002 (penga03)
**	    Added a new command line option, /l, so that a verbose log 
**	    file will be generated by Windows Installer.
**	19-feb-2004 (penga03)
**	    Added ExecuteEx() and InstallMSRedistributions().
**	17-jun-2004 (somsa01)
**	    Added ExecuteEx(), which spawns a command and waits for it without
**	    popping up a Command Prompt window.
**	16-jul-2004 (penga03)
**	    Added a new command line parameter /nomdb.
**	26-jul-2004 (penga03)
**	    Removed all references to "Advantage".
**	10-sep-2004 (penga03)
**	    Removed MDB.
**	13-dec-2004 (penga03)
**	    Modified InitInstance() to get the upgrade type based on the
**	    chosen installation identifier (for silent install).
**	16-dec-2004 (penga03)
**	    Corrected the error when stopping ivm.
**	17-dec-2004 (penga03)
**	    Stop IVM before upgrade, even Ingres is not running.
**	08-feb-2005 (penga03)
**	    Added two more parameters for Error() and MyMessageBox().
**	28-feb-2005 (penga03)
**	    Corrected the error when setting m_RestartIngres.
**	14-march-2005 (penga03)
**	    Shut down Ingres by taking the resource offline in a cluster 
**	    environment.
**	08-apr-2005 (penga03)
**	    Close opened handles in ExecuteEx().
**	23-jun-2005 (penga03)
**	    Added ExitInstance() and return_code to return the 
**	    install.exe's exit code.
**	30-jun-2005 (penga03)
**	    Added two more controls to stop Ingres. 
**	18-jul-2005 (penga03)
**	    Fail the installation if the user tries to install an existing
**	    instance to another II_SYSTEM.
**	03-aug-2005 (penga03)
**	    Delete the tailing back slash of the II_SYSTEM got from rsp file.
**	18-aug-2005 (penga03) 
**	    Write the return code to the install.log in ExitInstance(). And 
**	    also initialize the return_code and hLogFile in InitInstance().
**	5-Jan-2006 (drivi01)
**	    SIR 115615
**	    Modified registry Keys to be SOFTWARE\IngresCorporation\Ingres
**	    instead of SOFTWARE\ComputerAssociates\Ingres.
**	    Updated shortcuts to point to Start->Programs->Ingres->
**	    Ingres [II_INSTALLATION] and updated location to
**	    C:\Program Files\Ingres\Ingres [II_INSTALLATION].
**  	15-Nov-2006 (drivi01)
**	    SIR 116599
**	    Enhanced pre-installer in effort to improve installer usability.
**	    Added all possible titles up to this release for winstart.exe
**	    to enable this application to detect when winstart is running.
**	    Updated response file processing with new locations of
**	    II_SYSTEM and II_INSTALLATION.
**  	06-Feb-2007 (drivi01)
**	    BUG 117635
**	    Added "User Defined Properties" section to the response file.
**	    Any property can be now moved to "User Defined Properties" section
**	    and it will be properly processed by the installer.
**	    Added routines to search for properties in "User Defined Properties"
**	    section if the property isn't found in the proper section.
**	13-Feb-2007 (drivi01)
**	    Removed call to Help function.  
**	16-Apr-2007 (drivi01)
**	    Check username for spaces before starting the installation.  Exit
**	    install if username contains spaces.
**  	25-May-2007 (drivi01)
**	    Added new property to installer INGRES_WAIT4GUI which will force 
**	    setup.exe to wait for post installer to finish if this property 
**	    is set to 1. INGRES_WAIT4GUI which is referred to as m_Wait4GUI
**	    within setup.exe is set to TRUE if "/w" flag is passed to setup.exe.
**	    /w is a new flag within setup.exe.
**	11-Apr-2008 (drivi01)
**	    Add function AskUserOC which will popup a message box with OK
**	    and Cancel buttons
**	15-Jan-2008 (drivi01)
**	    Update return code for invalid response file.
**	08-Aug-2009 (drivi01)
**	    Add pragma to remove deprecated POSIX functions warning 4996
**          b/c it is a bug.
**	17-Sep-2009 (drivi01)
**	    Add code to block upgrade (via response file) of Ingres releases 
**	    before 9.2 if the character set on those installations is UTF8.
**	04-Nov-2009 (drivi01)
**	    Initialize Rich edit control.
**	10-Dec-2010 (drivi01)
**	    Update the title to be a custom title based on the product
**	    being installed.
**	    Add functions that checks if the installation being performed
**	    is Ingres VectorWise.
**	    Modify error messages to be relevant to the product being installed.
**	    Add routines to initialize installation id for VectorWise
**	    to "VW" and detect all installations of Ingres/Ingres VectorWise/
**	    DBA Tools on the machine and set appropriate fields in the inst object
**	    to indicate what each installation is to be used later in the execution.
**	    Consolidate some of the code with DBA Tools code.
**	11-Jan-2011 (drivi01)
**	    This change was part of a bigger change in codev and
**	    changes the way redistributables are executed.  The msi file
**	    name for redistributable packages differs between 32-bit and 
**	    64-bit versions of Ingres.  This change removes a direct call 
**	    to msi and replaces it with a call to setup.exe which will 
**	    call appropriate MSI under the covers.
**	30-Jun-2011 (drivi01)
**	    Add GetIISystem function, which returns II_SYSTEM
**	    to the instance being currently installed. 
**	    Update the way the logging is done to ensure there is no
**	    redundant code and move log file initialization to AppendToLog
**	    function to ensure it is created as soon as II_SYSTEM\ingres\files
**	    is.  Add better log messages to provide clear information when
**	    install fails.
**	06-Jul-2011 (drivi01)
**	    Move szInstallCode definition to the top of InitInstance 
**	    definition, and add a line to copy default installation code "VT"
**	    for DBA Tools to szInstallCode for CalculateInstallCode.
**	13-Jul-2011 (drivi01) b125546
**	    Add routine to IsDBATools to check for setup.ini file in the
**	    root directory of DBA Tools cdimage and if VectorWise="TRUE"
**	    is set, then DBA Tools installer will default to VectorWise
**	    preferred defaults.
**	04-Aug-2011 (drivi01)
**	    Block VectorWise installation on any version of Windows prior 
**	    to Windows Vista.
**	15-Sep-2011 (drivi01)
**	    Block VW installations on Windows Vista.  Minimum supported OSes
**	    are Windows 7 and Windows 2008.
**	31-Oct-2011 (drivi01)
**	    Remove repeated definitions of szInstallCode.
*/
/* Turn off POSIX warning for this file until Microsoft fixes this bug */
#pragma warning (disable: 4996)
#include "stdafx.h"
#include "enterprise.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

HANDLE hLogFile=0;
int	return_code=0;
HPALETTE hSystemPalette=0;

static BOOL FileExists(LPCSTR s);
INT CompareIngresVersion(char *ii_system);
BOOL isValidUser(CString userName);
CString CalculateInstallCode(char *);
CString GetVersion(char *ii_system);
int IsPre92Release(CString version);
CString GetIISystem(char *inst_id);
static BOOL IsIngresVW();
/*
**	History:
**	23-July-2001 (penga03)
**	    Make the current property page is the owner window of the message box.
**	29-Apr-2008 (drivi01)
**	    Update title of the message box to reflect the installation type.
**	    "Ingres Setup Wizard" for ingres installs, "DBA Tools Setup Wizard"
**	     for DBA Tools installs.
*/
static UINT MyMessageBox(UINT uiStrID,UINT uiFlags,LPCSTR param=0, LPCSTR param2=0, LPCSTR param3=0)
{
	UINT ret;
	CString title;
	CString text;
	
	if (thePreInstall.m_DBATools)
	  	title.LoadString(IDS_TITLE_DBATOOLS);
	else if (thePreInstall.m_IngresVW)
		title.LoadString(IDS_TITLE_INGRESVW);
	else
		title.LoadString(IDS_TITLE);
	if (param3)
		text.Format(uiStrID,param, param2, param3);
	else if (param2)
		text.Format(uiStrID,param, param2);
	else if (param)
		text.Format(uiStrID,param);
	else
		text.LoadString(uiStrID);

	HWND hwnd=property ? property->m_hWnd : 0;
	if(!hwnd)
	 uiFlags|=MB_APPLMODAL;

	ret=::MessageBox(hwnd, text,title,uiFlags);
	return ret;
}

void Error(UINT uiStrID,LPCSTR param,LPCSTR param2,LPCSTR param3)
{
	MyMessageBox(uiStrID,MB_OK|MB_ICONEXCLAMATION,param, param2, param3);
}

BOOL AskUserYN(UINT uiStrID,LPCSTR param)
{
	return (MyMessageBox(uiStrID,MB_YESNO|MB_ICONQUESTION,param)==IDYES);
}

BOOL AskUserOC(UINT uiStrID, LPCSTR param)
{
	return (MyMessageBox(uiStrID, MB_OKCANCEL|MB_ICONQUESTION, param)==IDOK);
}

static BOOL IsGoodOSVersionAndRights()
{
	OSVERSIONINFOEX osver; 
	
	memset((char *) &osver,0,sizeof(OSVERSIONINFOEX)); 
	osver.dwOSVersionInfoSize=sizeof(OSVERSIONINFOEX); 
	GetVersionEx((OSVERSIONINFO *)&osver);
	
	if (IsIngresVW() )
	{
		if (osver.dwPlatformId == VER_PLATFORM_WIN32_NT && 
		((osver.dwMajorVersion >= 6 && osver.dwMinorVersion >= 1) ||
		 (osver.dwMajorVersion == 6 && osver.dwMinorVersion == 0 &&
		 osver.wProductType != VER_NT_WORKSTATION)))
		{
			/* Windows Windows 7, Windows 2008 Server, Windows 2008 Server R2 */
			return TRUE;
		}
		else
		{
			Error(IDS_NOTSUPPORTED);
			return FALSE;
		}
	}
	else
	{
		if ((osver.dwPlatformId==VER_PLATFORM_WIN32_WINDOWS && osver.dwMajorVersion==4 && osver.dwMinorVersion>=10) ||
		(osver.dwPlatformId==VER_PLATFORM_WIN32_NT && osver.dwMajorVersion>=4) )
		{
			/* Windows 98(410), Windows ME(490); Windows NT(400), Windows 2000(500) */
			return TRUE;
		}
		else
		{
			Error(IDS_SUPPORTVERSION);
			return FALSE;
		}
	}
}

static BOOL AlreadyRunning()
{
	CString s; 
	
	if (thePreInstall.m_IngresVW)
		s.LoadString(IDS_TITLE_INGRESVW);
	else if (thePreInstall.m_DBATools)
		s.LoadString(IDS_TITLE_DBATOOLS);
	else
		s.LoadString(IDS_TITLE);
	if (FindWindow(NULL,s)!=0)
	{
		if (thePreInstall.m_IngresVW)
			Error(IDS_VWALREADYRUNNING);
		else
			Error(IDS_ALREADYRUNNING);
		return TRUE;
	}
	return FALSE;
}

/*
** Description: Checks if the installation currently running is
**				installation of DBA Tools installation.
** History:
**	07-apr-2008 (drivi01)
**		Created.
*/
static BOOL IsDBATools()
{
	char path[1024], *p;
	char msiname[1024];
	WIN32_FIND_DATA wfd;
	HANDLE handle;

	GetModuleFileName(AfxGetInstanceHandle(),path,sizeof(path));
	p=_tcsrchr(path,'\\');
    if(*p) *(p)=0;

	sprintf(msiname, "%s\\files\\*DBA*.msi", path);
	if ((handle = FindFirstFile(msiname, &wfd))!=INVALID_HANDLE_VALUE)
	{
		char setupini[MAX_PATH+1];
		char szVal[MAX_PATH+1];
		FindClose(handle);
		sprintf(setupini, "%s\\setup.ini", path);
		if (GetFileAttributes(setupini) != -1)
		{
			*szVal = '\0';
			GetPrivateProfileString("Setup Type", "VectorWise", "", szVal, sizeof(szVal), setupini);
			if (*szVal && stricmp(szVal, "TRUE") == 0)
				thePreInstall.m_DBAToolsVW=TRUE;
		}
		return TRUE;
	}
	else
		return FALSE;

}
/*
** Description: Checks if the installation currently running is
**				Ingres VectorWise installation.
** History:
**	10-dec-2010 (drivi01)
**		Created.
*/
static BOOL IsIngresVW()
{
	char path[1024], *p;
	char msiname[1024];
	WIN32_FIND_DATA wfd;
	HANDLE handle;

	GetModuleFileName(AfxGetInstanceHandle(),path,sizeof(path));
	p=_tcsrchr(path,'\\');
    if(*p) *(p)=0;

	sprintf(msiname, "%s\\files\\*VW*.msi", path);
	if ((handle = FindFirstFile(msiname, &wfd))!=INVALID_HANDLE_VALUE)
	{
		FindClose(handle);
		return TRUE;
	}
	else
		return FALSE;
}


/*
**	History:
**	23-July-2001 (penga03)
**	    Modified Execute so that it can receive a parameter and run the command 
**	    by ingwrap.
*/
BOOL 
Execute(char *cmd, char *par /* =0 */, BOOL bWait /* =TRUE */)
{
	PROCESS_INFORMATION pi;
	STARTUPINFO si;
	char CmdLine[2048];
	
	memset((char *)&pi, 0, sizeof(pi));
	memset((char *)&si, 0, sizeof(si));
	si.cb=sizeof(si);
	
	sprintf(CmdLine, "%s", cmd);
	if(par)
	{
		strcat(CmdLine, " ");
		strcat(CmdLine, par);
	}
	if(CreateProcess(NULL, CmdLine, NULL, NULL, FALSE, NORMAL_PRIORITY_CLASS, NULL, NULL, &si, &pi))
	{
		if(bWait)
		{
			DWORD dw;

			WaitForSingleObject(pi.hProcess, INFINITE);
			GetExitCodeProcess(pi.hProcess, &dw);
			CloseHandle(pi.hProcess);
			CloseHandle(pi.hThread);
			return(dw==0);
		}
		else
		{
			CloseHandle(pi.hProcess);
			CloseHandle(pi.hThread);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL 
Local_NMgtIngAt(CString strKey, CString ii_system, CString &strRetValue)
{
	char szFileName[MAX_PATH+1];
	CStdioFile theInputFile;
	int iPos;
	CString strInputString;

	if(strKey.IsEmpty() || ii_system.IsEmpty())
		return FALSE;

	sprintf(szFileName, "%s\\ingres\\files\\symbol.tbl", ii_system.GetBuffer((ii_system.GetLength()+1)));
	if(!theInputFile.Open(szFileName, CFile::modeRead | CFile::typeText, 0))
		return FALSE;
	while(theInputFile.ReadString(strInputString) != FALSE)
	{
		strInputString.TrimRight();
		iPos=strInputString.Find(strKey);
		if(iPos>=0)
		{
			if( (strInputString.GetAt(iPos+strKey.GetLength()) == '\t') || 
				(strInputString.GetAt(iPos+strKey.GetLength()) == ' ') )
			{ 
				strInputString = strInputString.Right(strInputString.GetLength()-strKey.GetLength());
				strInputString.TrimLeft();
				strRetValue=strInputString;
				theInputFile.Close();
				return TRUE;
			}
		}
	}
	theInputFile.Close();
	return FALSE;
}

/*
**	Name: IsWindows9X
**
**	Description:
**	Check if the operating system that is currently running is Windows9X.
**
**	History:
**	23-July-2001 (penga03)
**	    Created.
**	07-Sep-2001 (penga03)
**	    Also checked the major version number.
*/
BOOL 
IsWindows9X()
{
	OSVERSIONINFO osver;

	memset((char *)&osver, 0, sizeof(osver));
	osver.dwOSVersionInfoSize=sizeof(osver);

	GetVersionEx(&osver);
	if((osver.dwPlatformId==VER_PLATFORM_WIN32_WINDOWS) && (osver.dwMajorVersion>=4))
		return TRUE;
	else
		return FALSE;
}

/*
**	Name: Local_PMget
**
**	Description:
**	A revised version of PMget independent of Ingres CL functions. 
**
**	History:
**	23-July-2001 (penga03)
**	    Created.
*/
BOOL 
Local_PMget(CString strKey, CString ii_system, CString &strRetValue)
{
	char szFileName[MAX_PATH+1];
	CStdioFile theInputFile;
	int iPos;
	CString strInputString;

	if(strKey.IsEmpty() || ii_system.IsEmpty())
		return FALSE;

	sprintf(szFileName, "%s\\ingres\\files\\config.dat", ii_system.GetBuffer((ii_system.GetLength()+1)));
	if(!theInputFile.Open(szFileName, CFile::modeRead | CFile::typeText, 0))
		return FALSE;
	while(theInputFile.ReadString(strInputString) != FALSE)
	{
		strInputString.TrimRight();
		iPos=strInputString.Find(strKey);
		if(iPos>=0)
		{
			if( (strInputString.GetAt(iPos+strKey.GetLength()) == ':') || 
				(strInputString.GetAt(iPos+strKey.GetLength()) == ' ') )
			{ 
				strInputString = strInputString.Right(strInputString.GetLength()-strKey.GetLength()-1);
				strInputString.TrimLeft();
				strRetValue=strInputString;
				theInputFile.Close();
				return TRUE;
			}
		}
	}
	theInputFile.Close();
	return FALSE;
}

/*
**  Name: IngresAlreadyRunning
**
**  Description:
**	Check if Ingres identified by II_SYSTEM is already running.
**
**  Returns:
**	-1	config.dat doesn't exist
**		(Ingres identified by II_SYSTEM is not installed)
**	 0	config.dat exists but Ingres not running
**		(Ingres indentified by II_SYSTEM is installed but not running)
**	 1	iigcn is running
**		(Ingres indentified by II_SYSTEM is installed and running)
**
**  History:	
**	23-Jul-2001 (penga03)
**	    Created.
**	15-aug-2001 (somsa01)
**	    Since users are told to remove everything in their bin and
**	    utility directories before performing an upgrade, iigcn.exe will
**	    not exist. Therefore, we'll use the check for config.dat as
**	    the surefire way of letting us know that there is a valid
**	    installation here, then go on from there to see if Ingres is
**	    running.
**	10-sep-2001 (penga03)
**	    Use GetFileAttributes to check whether a file exists or not.
*/
int
IngresAlreadyRunning()
{
    CString	csIigcn, csTemp, ii_system, csConfig;
    char	SubKey[128];
    HKEY	hkSubKey;
    DWORD	type, size;

    sprintf(SubKey, "SOFTWARE\\IngresCorporation\\Ingres\\%s_Installation",
	    thePreInstall.m_InstallCode);
    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, SubKey, 0, KEY_QUERY_VALUE,
		     &hkSubKey) == ERROR_SUCCESS)
    {
	size = sizeof(ii_installpath);
	RegQueryValueEx(hkSubKey, "II_SYSTEM", 0, &type,
			(BYTE *)ii_installpath, &size);
	RegCloseKey(hkSubKey);
    }
    else
	return -1;

    csConfig.Format("%s\\ingres\\files\\config.dat", ii_installpath);
    if (GetFileAttributes(csConfig) != -1)
    {
	/*
	** We have an installation. Now we have to see if it is running...
	*/
	csIigcn.Format("%s\\ingres\\bin\\iigcn.exe", ii_installpath);
	if (GetFileAttributes(csIigcn) != -1)
	{
	    /*
	    ** We have to use a hack to see if the installation is
	    ** running. This is by trying to delete the iigcn.exe
	    ** executable. We must use the hack so that we do not
	    ** have to link with Ingres libraries (which then
	    ** causes the install.exe to use the Ingres DLLs) to
	    ** utilize ping_iigcn().
	    */
	    csTemp.Format("%s\\ingres\\bin\\temp.exe", ii_installpath);
	    CopyFile(csIigcn, csTemp, FALSE);
	    if (DeleteFile(csIigcn))
	    {
		/* iigcn is not running */
		CopyFile(csTemp, csIigcn, FALSE);
		DeleteFile(csTemp);
		return 0;
	    }
	    else
	    {
		/* iigcn is running */
		DeleteFile(csTemp);
		return 1;
	    }
	}
	else
	{
	    /*
	    ** iigcn.exe does not exist. Therefore, the installation
	    ** cannot possibly be running.
	    */
	    return 0;
	}
    }
    else
	return 0;
}


/*
**	Name: WinstartRunning
**
**	Description:
**	Check if Winstart is running.
**
**	History:	
**	23-July-2001 (penga03)
**	    Created.
**	02-May-2007 (drivi01)
**	    Renamed Service Manager to a more generic name 
**	    "Ingres Service Manager" to avoid upgrade issues 
**	    when pre-installer can't find service manager
**	    window on the desktop b/c the version string in 
**	    the title changed.
*/
BOOL
WinstartRunning()
{
	CString title;
	/*
	HANDLE hSemaphore;
	CString SemaphoreName;

	SemaphoreName.Format("IngresII_Winstart_%s", thePreInstall.m_InstallCode); 
	hSemaphore=OpenSemaphore(SEMAPHORE_ALL_ACCESS, FALSE, SemaphoreName);
	if (hSemaphore != NULL)
	{
		CloseHandle(hSemaphore);
		return TRUE;
	}
	*/

	/* Winstart title needs to stay consistent in terms of product name,
	** release string version in the title isn't needed. Since pre-installer can not
	** compile version string b/c it's defined in gl.h, version string is eliminated.
	*/
	title.Format("Ingres Service Manager %s", thePreInstall.m_InstallCode);
	if (FindWindow(NULL, title) != 0)
		return TRUE;

	/** Leaving code below for backwards compatability with previous releases **/
	title.Format("Ingres 2006 Release 2 - Service Manager %s", thePreInstall.m_InstallCode);
	if (FindWindow(NULL, title) != 0)
		return TRUE;

	title.Format("Ingres 2006 - Service Manager %s", thePreInstall.m_InstallCode);
	if (FindWindow(NULL, title) != 0)
		return TRUE;

	title.Format("Ingres 2006 - Service Manager [%s]", thePreInstall.m_InstallCode);
	if (FindWindow(NULL, title) != 0)
		return TRUE;

	title.Format("Ingres - Service Manager [%s]", thePreInstall.m_InstallCode);
	if(FindWindow(NULL, title) != 0)
		return TRUE;

	title=CString("Ingres - Service Manager");
	if(FindWindow(NULL, title) != 0)
		return TRUE;

	title=CString("Ingres - IngStart");
	if(FindWindow(NULL, title) != 0)
		return TRUE;

	return FALSE;
}


/*
**  Name: ExecuteEx
**
**  Description:
**	Create a new process to execute an executable file.
**
**  History:
**	19-feb-2004 (penga03)
**	    Created.
*/
BOOL 
ExecuteEx(LPCSTR lpCmdLine, BOOL bWait/*=TRUE*/, BOOL bWindow/*=FALSE*/)
{
    PROCESS_INFORMATION	pi;
    STARTUPINFO		si;
    DWORD dwCreationFlags=CREATE_NO_WINDOW | NORMAL_PRIORITY_CLASS;

    memset((char*)&pi, 0, sizeof(pi)); 
    memset((char*)&si, 0, sizeof(si)); 
    si.cb = sizeof(si);

    if (bWindow)
    {
	si.dwFlags=STARTF_USESHOWWINDOW;
	si.wShowWindow=SW_MINIMIZE;
	dwCreationFlags=NORMAL_PRIORITY_CLASS;
    }
    if (CreateProcess(NULL, (LPSTR)lpCmdLine, NULL, NULL, TRUE, 
                      dwCreationFlags, NULL, NULL, &si, &pi))
    {
	if (bWait)
	{
	    DWORD   dw;

	    WaitForSingleObject(pi.hProcess, INFINITE);
	    GetExitCodeProcess(pi.hProcess, &dw);
	    CloseHandle(pi.hProcess);
	    CloseHandle(pi.hThread);
	    return(dw==0);
	}
	else
	{
	    CloseHandle(pi.hProcess);
	    CloseHandle(pi.hThread);
	    return TRUE;
	}
    }
    return FALSE;
}
/*
**	Name: InstallMSRedistributions
**
**	Description:
**	Install Microsoft redistributions.
**
**	History:	
**	19-Feb-2004 (penga03)
**	    Created. Install mfc71.dll, mfc71u.dll, msvcp71.dll 
**	    and msvcr71.dll.
*/
BOOL 
InstallMSRedistributions()
{
    char ach[MAX_PATH+1], *p, msredistloc[MAX_PATH+1], systemfolder[MAX_PATH+1];

    GetModuleFileName(AfxGetInstanceHandle(),ach,sizeof(ach));
    p=_tcsrchr(ach,'\\');
    if(*p) *(p)=0;
    sprintf(msredistloc, "%s\\files\\msredist", ach);
    GetSystemDirectory(systemfolder, sizeof(systemfolder));

    sprintf(ach, 
	"\"%s\\setup.exe\" /s /v\"/qn INSTALLDIR=%s\"",
	msredistloc, systemfolder);
    if (ExecuteEx(ach)) {return TRUE;}
    else {return FALSE;}
}

/*
**	Name: GetIISystem
**
**	Description:
**	Retrieve II_SYSTEM
**
**	History:	
**	22-Jun-2011 (drivi01)
**	    Created. 
*/
CString
GetIISystem(char *inst_id)
{
	char szBuf[MAX_PATH], szBuf2[MAX_PATH], szII_SYSTEM[MAX_PATH];
	HKEY hKey;
	CString ii_system;
	DWORD dwSize = 0;

	sprintf(szBuf, 
		"SOFTWARE\\IngresCorporation\\Ingres\\%s_Installation", 
		thePreInstall.m_InstallCode);
	sprintf(szBuf2, 
		"SOFTWARE\\Wow6432Node\\IngresCorporation\\Ingres\\%s_Installation", 
		thePreInstall.m_InstallCode);
	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, szBuf, 0, KEY_QUERY_VALUE, &hKey) == ERROR_SUCCESS ||
		RegOpenKeyEx(HKEY_LOCAL_MACHINE, szBuf2, 0, KEY_QUERY_VALUE, &hKey) == ERROR_SUCCESS)
	{
		dwSize=sizeof(szII_SYSTEM); *szII_SYSTEM=0;
		if (!RegQueryValueEx(hKey, "II_SYSTEM", 0, 0, (BYTE *)szII_SYSTEM, &dwSize) && *szII_SYSTEM)
			ii_system = szII_SYSTEM;
		RegCloseKey(hKey);
	}

	return ii_system;
}

void 
AppendToLog(LPCSTR p)
{
    DWORD   dw;
    CString s;

    if (!hLogFile) 
	{
		char szBuf[MAX_PATH], szPath[MAX_PATH];
		if (thePreInstall.m_ii_system.IsEmpty())
			thePreInstall.m_ii_system = GetIISystem(thePreInstall.m_InstallCode.GetBuffer());
		if (thePreInstall.m_ii_system.IsEmpty())
			return;

		sprintf(szBuf, "%s\\ingres\\files\\install.log", thePreInstall.m_ii_system);
		sprintf(szPath, "%s\\ingres\\files", thePreInstall.m_ii_system);
		if (GetFileAttributes(szPath) == -1)
			return;

		hLogFile = CreateFile(szBuf, GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
		if (hLogFile == INVALID_HANDLE_VALUE)
		{
				hLogFile = 0;
				return;
		}
	}
	
	SetFilePointer(hLogFile, 0, 0, FILE_END);

    if (_tcsstr(p,"..."))
    {
	s.LoadString(IDS_SEPARATOR);
	WriteFile(hLogFile, s, s.GetLength(), &dw, NULL);
    }
    s = p;
    s += "\r\n"; 
    WriteFile(hLogFile, s, s.GetLength(), &dw, NULL);
}

/////////////////////////////////////////////////////////////////////////////
// CEnterpriseApp

BEGIN_MESSAGE_MAP(CEnterpriseApp, CWinApp)
//{{AFX_MSG_MAP(CEnterpriseApp)
// NOTE - the ClassWizard will add and remove mapping macros here.
//    DO NOT EDIT what you see in these blocks of generated code!
//}}AFX_MSG
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CEnterpriseApp construction

CEnterpriseApp::CEnterpriseApp()
{
}

/////////////////////////////////////////////////////////////////////////////
// The one and only CEnterpriseApp object

CEnterpriseApp theApp;
CPreInstallation thePreInstall;
HICON theIcon=0;
CPropSheet *property=0;
char ii_installpath[MAX_PATH+1];

/////////////////////////////////////////////////////////////////////////////
// CEnterpriseApp initialization

/*
**	History:
**	23-July-2001 (penga03)
**	    For silence mode installation, also check if there exists an installation 
**	    installed by old installer, if there exists, ask user if upgrade this 
**	    installation.
**	23-July-2001 (penga03)
**	    For silence mode installation, if ingres is running, terminate installing.
**	31-dec-2001 (penga03)
**	    Removed m_SkipLicenseCheck.
**	14-jan-2002 (penga03)
**	    Trim the quotes around the path of the response file passed by the command 
**	    line, otherwise GetFileAttributes will fail.
**	30-jul-2002 (penga03)
**	    If the Ingres instance being upgraded was embedded, 
**	    keep the way it was.
**	28-oct-2004 (penga03)
**	    Removed the checking of /embed.
**	22-Jun-2007 (horda03)
**		Instruct LaunchWindowsInstaller to sanitize the registry if this is a new
**		install.
**	07-Apr-2008 (drivi01)
**		Adding functionality for DBA Tools installer to the Ingres code.
**		DBA Tools installer is a simplified package of Ingres install
**		containing only NET and Visual tools component.  
**		Added routines for handling DBA Tools install.
**		
*/
BOOL CEnterpriseApp::InitInstance()
{
	BOOL bCheck_Inst=TRUE;
	char szKey[MAX_PATH], szData[MAX_PATH];
	HKEY hKey;
	int DBAToolsUpgradable = 0;
	char szInstallCode[3];

	// Standard initialization
	hLogFile=0;
	return_code=0;
	hSystemPalette=0;
	//theIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);


/*	// InitCommonControlsEx() is required on Windows XP if an application
	// manifest specifies use of ComCtl32.dll version 6 or later to enable
	// visual styles.  Otherwise, any window creation will fail.
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// Set this to include all the common control classes you want to use
	// in your application.
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);
*/
	InitCommonControls();
	CWinApp::InitInstance();

	AfxInitRichEdit();
	AfxEnableControlContainer();
	


	/*Get a username of the user that is installing Ingres */
	char user[MAX_PATH];
	DWORD dwSize = 0;
	dwSize=sizeof(user);
	GetUserName(user, &dwSize);

	if(IsGoodOSVersionAndRights())
	{
		if(m_lpCmdLine)
		{
			CString strBuffer;
			int iPos;
			char ach[2048], *p, ii_system[1024];
			BOOL bInstalled=FALSE;

			strBuffer=m_lpCmdLine;
			strBuffer.MakeLower();
			
			iPos=strBuffer.Find("/?");
			if(iPos>=0)
			{
				if (thePreInstall.m_IngresVW)
					Error(IDS_VWINSTALLERUSAGE);
				else
					Error(IDS_INSTALLERUSAGE);
				return FALSE;
			}
			
			iPos=strBuffer.Find("/c");
			if(iPos>=0)
			{
				thePreInstall.m_CreateResponseFile ="1";
				Error(IDS_CREATINGRSPFILE);
			}
				
			iPos=strBuffer.Find("/l");
			if(iPos>=0)
			{
			    if (GetTempPath(sizeof(ach), ach))
			    {
				if (ach[strlen(ach)-1] == '\\') ach[strlen(ach)-1]='\0';
				thePreInstall.m_MSILog.Format("%s\\ingmsi.log", ach);
			    }
			    else
				thePreInstall.m_MSILog ="C:\\Temp\\ingmsi.log";
			}

			iPos = strBuffer.Find("/w");
			if (iPos>=0 /*&& !thePreInstall.m_CreateResponseFile*/)
				thePreInstall.m_Wait4GUI = TRUE;
			
			iPos=strBuffer.Find("/r");
			if(iPos>=0)
			{
				char szKey[256], szResName[256];
				int idx;
				HKEY hKey;
				BOOL bCluster;

				/* silent mode */

				CString strRSPFile, csTemp;
				char szInstallCode[3], szInstallPath[1024];
				
				strRSPFile=strBuffer.Mid(iPos+2);
				strRSPFile.TrimLeft();
				strRSPFile.TrimLeft('\"');
				strRSPFile.TrimRight();
				strRSPFile.TrimRight('\"');
				thePreInstall.m_ResponseFile=strRSPFile;
				
				if( (strRSPFile.GetAt(1)!=':') && !((strRSPFile.GetAt(0)=='\\') && (strRSPFile.GetAt(1)=='\\')) )
				{		
					GetModuleFileName(AfxGetInstanceHandle(),ach,sizeof(ach));
					p=_tcsrchr(ach,'\\');
					if(*p) *p=0;
					else *ach=0;
					if(p)
						thePreInstall.m_ResponseFile.Format("%s\\%s", ach, strRSPFile); 
				}
				if(GetFileAttributes(thePreInstall.m_ResponseFile)==-1)
				{ 
					//Error(IDS_RESPONSEFILEDOESNOTEXIST, thePreInstall.m_ResponseFile);
					return_code=(ERROR_FILE_NOT_FOUND);
					return TRUE;
				}

				GetPrivateProfileString("Ingres Configuration", "installationcode", "", szInstallCode, sizeof(szInstallCode), thePreInstall.m_ResponseFile);
				if (strlen(szInstallCode) == 0)
					GetPrivateProfileString("Ingres Configuration", "II_INSTALLATION", "", szInstallCode, sizeof(szInstallCode), thePreInstall.m_ResponseFile);
				if (strlen(szInstallCode) == 0)
					GetPrivateProfileString("User Defined Properties", "II_INSTALLATION", "", szInstallCode, sizeof(szInstallCode), thePreInstall.m_ResponseFile);
				if(strlen(szInstallCode)!=2 || !isalpha(szInstallCode[0]) || !isalnum(szInstallCode[1]))
				{
					//Error(IDS_INVALIDINSTALLATIONCODE, szInstallCode);
					return_code=1;
					return TRUE;
				}

				GetPrivateProfileString("Ingres Configuration", "II_SYSTEM", "", szInstallPath, sizeof(szInstallPath), thePreInstall.m_ResponseFile);
				if (strlen(szInstallPath) == 0)
					GetPrivateProfileString("Ingres Locations", "II_SYSTEM", "", szInstallPath, sizeof(szInstallPath), thePreInstall.m_ResponseFile);
				if (strlen(szInstallPath) == 0)
					GetPrivateProfileString("User Defined Properties", "II_SYSTEM", "", szInstallPath, sizeof(szInstallPath), thePreInstall.m_ResponseFile);
				if(!szInstallPath[0] || strlen(szInstallPath)<=3)
				{
					//Error(IDS_INVALIDINSTALLATIONPATH);
					return_code=1;
					return TRUE;
				}
				if (szInstallPath[strlen(szInstallPath)-1] == '\\') 
					szInstallPath[strlen(szInstallPath)-1]='\0';

				if (Local_NMgtIngAt("II_INSTALLATION", szInstallPath, csTemp) 
					&& csTemp.CompareNoCase(szInstallCode))
				{
					//Error(IDS_INVALIDINSTANCE, csTemp, szInstallPath, szInstallCode);
					return_code=1;
					return TRUE;
				}

				sprintf(szKey, "SOFTWARE\\IngresCorporation\\Ingres\\%s_Installation", szInstallCode);
				if (!RegOpenKeyEx(HKEY_LOCAL_MACHINE, szKey, 0, KEY_QUERY_VALUE, &hKey))
				{
					char szData[1024];
					DWORD dwSize=sizeof(szData);

					if (!RegQueryValueEx(hKey,"II_SYSTEM",0,0,(BYTE *)szData,&dwSize)
						&& _stricmp(szData, szInstallPath))
					{
						return_code=1;
						return TRUE;
					}
					//exits the install if the response file installation is attempting to 
					//install on top of DBA Tools install since DBA Tools doesn't support 
					//response file yet.
					dwSize=sizeof(szData);
					if (RegQueryValueEx(hKey, "dbatools", 0, 0, (BYTE*)szData, &dwSize)==ERROR_SUCCESS)
						if (strcmp(szData, "1")==0)
						{
							return_code=1;
							return TRUE;
						}
					RegCloseKey(hKey);

				}

				thePreInstall.m_InstallCode =szInstallCode;
				
				for(int i=0; i<thePreInstall.m_Installations.GetSize(); i++)
				{
					CInstallation *inst=(CInstallation *) thePreInstall.m_Installations.GetAt(i);
					if (inst && 
						!thePreInstall.m_InstallCode.CompareNoCase(inst->m_id) )
					{
						bCheck_Inst = FALSE;
						bInstalled=TRUE;
						sprintf(ii_system, "%s", inst->m_path);
						thePreInstall.m_UpgradeType=CompareIngresVersion(ii_system);
						/* block installation if this is pre-9.2 release with UTF8 charset */
						if (thePreInstall.m_UpgradeType)
						{
							if (IsPre92Release(GetVersion(inst->m_path.GetBuffer())))
							{
								CString charset;
								Local_NMgtIngAt("II_CHARSET", inst->m_path, charset);
								if (charset.IsEmpty())
								{
									char chrset[MAX_PATH];
									sprintf(chrset, "II_CHARSET%s", inst->m_id);
									Local_NMgtIngAt(chrset, inst->m_path, charset);
									if (!charset.IsEmpty() && charset.CompareNoCase("UTF8")==0)
										return FALSE;
								}
							}
						}
						if (inst->m_ver25)
						{
							thePreInstall.m_Ver25 ="1";
							thePreInstall.m_EmbeddedRelease =inst->m_embedded;
						}
						break;
					}
				}

				if (IsIngresVW())
				{
					thePreInstall.m_IngresVW = TRUE;
				}

				if ((_stricmp(szInstallCode, "II") && !thePreInstall.m_IngresVW) ||
						_stricmp(szInstallCode, "VW") && thePreInstall.m_IngresVW)
				{
					/* Compute the GUID index from the installation code */
					idx = (toupper(szInstallCode[0]) - 'A') * 26 + toupper(szInstallCode[1]) - 'A';
					if (idx <= 0)
						idx = (toupper(szInstallCode[0]) - 'A') * 26 + toupper(szInstallCode[1]) - '0';

					sprintf(szKey, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{A78D%04X-2979-11D5-BDFA-00B0D0AD4485}",idx);
				}
				else 
					sprintf(szKey, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{A78D00D8-2979-11D5-BDFA-00B0D0AD4485}");

				bCluster=FALSE;
				if(!RegOpenKeyEx(HKEY_LOCAL_MACHINE, szKey, 0, KEY_QUERY_VALUE, &hKey))
				{
					char szData[2];
					DWORD dwSize;

					dwSize=sizeof(szData); *szData=0;
					if (!RegQueryValueEx(hKey,"IngresClusterInstall", NULL, NULL, (BYTE *)szData, &dwSize) && !strcmp(szData, "1"))
						bCluster=TRUE;
					dwSize=sizeof(szResName); *szResName=0;
					if (!RegQueryValueEx(hKey,"IngresClusterResource", NULL, NULL, (BYTE *)szResName, &dwSize))
						sprintf(szResName, "Ingres Service [ %s ]", szInstallCode);
					RegCloseKey(hKey);
				}
				
				if(bInstalled && (!thePreInstall.m_Ver25.Compare("1") || thePreInstall.m_UpgradeType) && (IngresAlreadyRunning()==1))
				{
					char buf[2048];

					thePreInstall.m_RestartIngres=1;

					SetEnvironmentVariable("II_SYSTEM", ii_system);
					GetEnvironmentVariable("PATH", buf, sizeof(buf));
					sprintf(ach, "%s\\ingres\\bin;%s\\ingres\\utility;%s", 
						ii_system, ii_system, buf);
					SetEnvironmentVariable("PATH", ach);

					if (!bCluster)
					{
					sprintf(ach, "\"%s\\ingres\\utility\\ingstop.exe\"", ii_system);
					ExecuteEx(ach);
					}
					else
					{
						HCLUSTER hCluster = NULL;
						HRESOURCE hResource = NULL;
						WCHAR lpwResourceName[256];

						hCluster = OpenCluster(NULL);
						if (hCluster)
						{
							mbstowcs(lpwResourceName, szResName, 256);
							hResource = OpenClusterResource(hCluster, lpwResourceName);
							if (hResource)
							{
								OfflineClusterResource(hResource);
								CloseClusterResource(hResource);
							}
						}
					}
					while (IngresAlreadyRunning()==1)
						Sleep(1000);

					sprintf(ach, "\"%s\\ingres\\bin\\ivm.exe\"", ii_system);
					if (!Execute(ach, "-stop", TRUE))
					{
						sprintf(ach, "\"%s\\ingres\\vdba\\ivm.exe\"", ii_system);
						Execute(ach, "-stop", TRUE);
					}
				}

				if (!isValidUser(CString(_T(user))))
					return FALSE;

				if (!thePreInstall.LaunchWindowsInstaller(bCheck_Inst))
					return TRUE;
				
				return FALSE;
			}

			iPos = strBuffer.Find("/w");
			if (iPos>=0 /*&& !thePreInstall.m_CreateResponseFile*/)
				thePreInstall.m_Wait4GUI = TRUE;

		}/* if(m_lpCmdLine) */


		/* 
		** Determine if this is a pre-install for Ingres VectorWise installation
		** or DBA Tools
		*/
		if (IsIngresVW())
		{
			thePreInstall.m_IngresVW = TRUE;
			thePreInstall.m_InstallCode = "VW";
		}
		else if (IsDBATools())
		{
			thePreInstall.m_DBATools = TRUE ;
			thePreInstall.m_InstallCode = "VT";  //default installation id for DBA Tools
			sprintf(szInstallCode, "%s", thePreInstall.m_InstallCode.GetBuffer(3));
		}

		for (int i=0; i<thePreInstall.m_Installations.GetSize(); i++)
		{
			CInstallation *inst=(CInstallation *) thePreInstall.m_Installations.GetAt(i);
			if (inst)
			{
				sprintf(szKey, "SOFTWARE\\IngresCorporation\\Ingres\\%s_Installation", inst->m_id);
				if (!RegOpenKeyEx(HKEY_LOCAL_MACHINE, szKey, 0, KEY_QUERY_VALUE, &hKey))
				{
					char ii_system[1024];
					char ii_code[1024];

					sprintf(ii_system, "%s", inst->m_path);
					sprintf(ii_code, "%s", inst->m_id);

					dwSize = sizeof(szData);
					if (RegQueryValueEx(hKey, "vectorwise", 0, 0, (BYTE*)szData, &dwSize)==ERROR_SUCCESS)
					{
						int msi_UpgradeType=0;
						if (stricmp(szData, "1")==0)
						{
							inst->m_isIVW = TRUE;
							thePreInstall.m_IngresVW_count++;
							//Figure out if this installation qualifies for upgrade.
							inst->m_UpgradeCode = CompareIngresVersion(ii_system);
							inst->m_ReleaseVer = GetVersion(ii_system);
						}
					}
					else if (RegQueryValueEx(hKey, "dbatools", 0, 0, (BYTE*)szData, &dwSize)==ERROR_SUCCESS)
					{
						int msi_UpgradeType=0;
						if (stricmp(szData, "1")==0)
						{
							inst->m_isDBATools=TRUE;
							thePreInstall.m_DBATools_count++;
							//Figure out if this installation qualifies for upgrade.
							inst->m_UpgradeCode = CompareIngresVersion(ii_system);
							inst->m_ReleaseVer = GetVersion(ii_system);
							if (inst->m_UpgradeCode > 0 && inst->m_UpgradeCode < 3)
								DBAToolsUpgradable++;
						}
					}
					else
					{
						inst->m_UpgradeCode = CompareIngresVersion(ii_system);
						inst->m_ReleaseVer = GetVersion(ii_system);
						thePreInstall.m_Ingres_count++;
					}
					RegCloseKey(hKey);
				}
			}
		}
		

		if (thePreInstall.m_DBATools)
		{
			BOOL bInstalled=FALSE;
			char ii_system[1024], ach[2048];

			if (DBAToolsUpgradable > 0)
			{
				if (AskUserYN(IDS_UPGRADEORNEW))
				{
					thePreInstall.m_InstallType=0;
					if (DBAToolsUpgradable == 1)
					{
						//Just upgrade the qualifying installation
						for(int i=0; i<thePreInstall.m_Installations.GetSize(); i++)
						{
							CInstallation *inst=(CInstallation *) thePreInstall.m_Installations.GetAt(i);
							if (inst && inst->m_isDBATools && inst->m_UpgradeCode && inst->m_UpgradeCode < 3)
							{
								bInstalled = TRUE;
								bCheck_Inst = FALSE;
								thePreInstall.m_UpgradeType=inst->m_UpgradeCode;
								thePreInstall.m_InstallCode=inst->m_id;
								sprintf(szInstallCode, "%s", inst->m_id.GetBuffer());
								sprintf(ii_system, "%s", inst->m_path.GetBuffer());
								break;
							}
						}
					}
					else
					{
						bInstalled = TRUE;
						if(!AlreadyRunning())
						{
							property=new CPropSheet(IDS_DBA_TITLE);
							if (!isValidUser(CString(_T(user))))
							{
								Error(IDS_INVALIDUSER);
								return FALSE;
							}
							m_pMainWnd=property;
							INT_PTR response=property->DoModal();
						}
						//Allow the GUI installer to take over
						return FALSE;
					} //if (DBAToolsUpgradable == 1)
				} // if (AskUserYN(IDS_UPGRADEORNEW))
				else 
				{
					thePreInstall.m_InstallCode=CalculateInstallCode((char *)szInstallCode);
				}
					
			} //if (DBAToolsUpgradable > 0)
			else
				thePreInstall.m_InstallCode=CalculateInstallCode((char *)szInstallCode);


			if(bInstalled && thePreInstall.m_UpgradeType && (IngresAlreadyRunning()==1))
			{
				char buf[2048];
				thePreInstall.m_RestartIngres=1;

				SetEnvironmentVariable("II_SYSTEM", ii_system);
				GetEnvironmentVariable("PATH", buf, sizeof(buf));
				sprintf(ach, "%s\\ingres\\bin;%s\\ingres\\utility;%s", 
					ii_system, ii_system, buf);
				SetEnvironmentVariable("PATH", ach);

				sprintf(ach, "\"%s\\ingres\\utility\\ingstop.exe\"", ii_system);
				ExecuteEx(ach);
					
				while (IngresAlreadyRunning()==1)
					Sleep(1000);

				sprintf(ach, "\"%s\\ingres\\bin\\ivm.exe\"", ii_system);
				if (!Execute(ach, "-stop", TRUE))
				{
					sprintf(ach, "\"%s\\ingres\\vdba\\ivm.exe\"", ii_system);
					Execute(ach, "-stop", TRUE);
				}
			}

			if (!thePreInstall.LaunchWindowsInstaller(bCheck_Inst))
				return TRUE;

			return FALSE;

		} //if (thePreInstall.m_DBATools)

		/* Check if Wizard is already running */
		if(!AlreadyRunning())
		{
			int titleID;
			if (thePreInstall.m_IngresVW)
				titleID = IDS_TITLE_INGRESVW;
			else
				titleID = IDS_TITLE;
			property=new CPropSheet(titleID);
			if (!isValidUser(CString(_T(user))))
			{
				Error(IDS_INVALIDUSER);
				return FALSE;
			}


			m_pMainWnd=property;
			INT_PTR response=property->DoModal();
		}
	}/* if(IsGoodOSVersionAndRights()) */
	
	return FALSE;
}

static BOOL
FileExists(LPCSTR s)
{
    HANDLE File = CreateFile(s,0,0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0);

    if (File == INVALID_HANDLE_VALUE)
	return FALSE;

    CloseHandle(File);
    return TRUE;
}

int 
CEnterpriseApp::ExitInstance()
{
	char szBuf[1024], szII_SYSTEM[1024];
	HKEY hKey;
	DWORD dwSize;
	
	if (thePreInstall.m_ii_system.IsEmpty())
		thePreInstall.m_ii_system = GetIISystem(thePreInstall.m_InstallCode.GetBuffer());

	if (!thePreInstall.m_ii_system.IsEmpty())
	{			
			sprintf(szBuf, "setup.exe: RC = %d", return_code);
			AppendToLog(szBuf);
	}
	if (hLogFile)
		CloseHandle(hLogFile);

	
	return return_code;
}
