/*
**	Copyright (c) 2004 Actian Corporation
**	All rights reserved.
*/

#include	<compat.h>
#include	<me.h>
#include	<st.h>
#include	<er.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
#include	<fe.h>
##include	"mqbf.qsh"
##include	"mqsymbol.qsh"
#include	"erqf.h"

/**
** Name:	getchng.qc -
**
** Description:
**	This module is called to show the user the fields that will be
**	displayed for the current qdef. They can then delete any
**	of these (non-join) fields from the list so that those fields will
**	not be displayed.
**
**	Routines:
**	     mq_chgdispl()
**
** History:
**	Revision 6.4
**      	09/26/90 (emerson) Don't display logical keys
**	Revision 6.0  88/08/10  kenl
**		 07-dec-87 (kenl)
**			Turned module into a .QSC file in order to incorporate
**			the new headers file: mqbf.qsh and mqsymbol.qsh.
**		02-may-88 (kenl)
**			Added code to handle the deletion of a key column from
**			a table.  Instead of actually deleting the column from
**			the ATTRIBINFO structure, the column's formfield is
**			set to EOS.  This column will still be used for
**			updates.
**		10-aug-88 (kenl)
**			Fixed bug #2963.  Undid 5.0 to 6.0 code change that
**			someone did to try to be efficient on using
**			INSERTROW when UNDOing a DELETE.  Changed DISPLAY
**			of _mqchange from UPDATE to READ.
**		09-sep-88 (jhw)  Fixed some international support problems.
**	12/31/88 (dkh) - Perf changes.
**      09/04/90 (emerson)
**			Removed unused code in getdisp that was computing
**                      column width (variables flen and clen were set
**                      but not referenced).
**      09/26/90 (emerson) - Don't display logical keys (bug 8593).
**
**	Revision 4.0  85/07/16  stevel
**		 07/16/85 (scl) added some FTspace support for CMS
**
**	Revision 2.0  83/12/22  nadene
**		Written: 12/22/83 (nml)
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	07-mar-2001 (somsa01)
**	    Changed maxcharwidth from 10000 to FE_FMTMAXCHARWIDTH.
*/

#define	_HelpExpl		F_FE0100_ExplFrameHelp
#define	_EndExpl		F_FE0102_ExplEnd

# define	MQ_MAXCHARWIDTH		72	/* max width before folding */

FUNC_EXTERN	STATUS	fmt_sdeffmt();
FUNC_EXTERN	ADF_CB	*FEadfcb();

static VOID	getdisp();

bool
mq_chgdispl ( qdef, changed )
register MQQDEF	*qdef;
i4		*changed;
##{
##	char	*delitem;
##	char	*undoitem;

	register RELINFO	**rels = qdef->mqtabs;
	register ATTRIBINFO	**atts = qdef->mqatts;
	register i4		numatts = qdef->mqnumatts;

	i4	relno = 0;
	i4	num_deleted = 0;

	/* Undo save variables */

##	i4		delrow;		/* deleted row */
	i4		attnum;		/* deleted attribute number */
	bool		undodel;	/* for undo undo */
	ATTRIBINFO	*lastdel = NULL;/* deleted attribute */
	char		formcopy[FE_MAXNAME + 1];

	if (mq_forms)
		delitem =  undoitem = ERx("");
	else
	{
		delitem = ERget(FE_Delete);
		undoitem = ERget(FE_Undo);
	}

##	DISPLAY _mqchange READ
##	INITIALIZE
##	{
##		INITTABLE _mqchange _chgdisp READ

		getdisp(qdef, relno);
##		RESUME FIELD _chgdisp
##	}

##	ACTIVATE MENUITEM ERget(F_QF0004_NextTable)
##	{
		if ( qdef->mqnumtabs == 1 )
		{
			IIUGerr(E_QF002A_There_is_only_one_tab, 0, 0);
		}
		else
		{
			if ( undodel && lastdel != NULL )
			{
				if (lastdel->keyinfo != mqISKEY)
				{
				    MEfree(lastdel);
				}
				lastdel = NULL;
			}
##			CLEAR FIELD table, _chgdisp
			relno = (relno < qdef->mqnumtabs - 1) ? relno + 1 : 0;
			getdisp(qdef, relno);
		}
##		RESUME FIELD _chgdisp
##	}

##	ACTIVATE MENUITEM delitem
##	{
##		i4	istable;

##		INQUIRE_FRS FIELD _mqchange (istable = table);
		if ( !istable )
		{ /* not in table field */
			IIUGerr(E_QF002B_Place_cursor_over_nam, 0, 0);
		}
		else
##		{
##		    i4	lrow;

##		    INQUIRE_FRS TABLE ERx("") (lrow = lastrow)
		    if ( lrow == 0 )
		    {
			/* no rows in tablefield */
			IIUGerr(E_QF002C_No_fields_to_delete_f, 0, 0);
##			RESUME FIELD table
		    }
		    else if ( lrow == 1 && qdef->mqnumtabs == 1 )
		    {
			IIUGerr(E_QF002D_Can_t_delete_the_only, 0, 0);
##			RESUME FIELD _chgdisp
		    }
		    else
##		    { /* delete item */
			register i4	d;
##			i4	drow;
##			char	joinfld[4];
##			char	dff[FE_MAXNAME + 1];
##			char	dcol[FE_MAXNAME + 1];

##			GETROW _mqchange _chgdisp (
##			    dcol = col, dff = ff,
##			    joinfld = joinfield,
##			    drow = _RECORD
##			)
			STtrmwhite(dcol);
			if (*joinfld == '*')
			{
			    IIUGerr(E_QF002E_cant_delete_join_fld, 0, 1, dcol);
##			    RESUME FIELD _chgdisp
			}
			delrow = drow;
			STtrmwhite(dff);
			++num_deleted;
			for ( d = 0 ; d < numatts ; ++d )
			{
			    if ( STequal(dcol, atts[d]->col) &&
					STequal(dff, atts[d]->formfield) )
			    {
				    if ( undodel && lastdel != NULL )
				    {
					if (lastdel->keyinfo != mqISKEY)
					{
					    MEfree(lastdel);
					}
				    }
				    lastdel = atts[d];

				    if (lastdel->keyinfo != mqISKEY)
				    {
					register i4	c;

				        for ( c = d ; c < numatts - 1 ; ++c )
					    atts[c] = atts[c+1];
				        atts[c] = NULL;
				        --qdef->mqnumatts;
				    }
				    else
				    {
					STcopy(lastdel->formfield, formcopy);
					lastdel->formfield[0] = EOS;
				    }

				    attnum = d;
				    undodel = TRUE;
##				    DELETEROW _mqchange _chgdisp
				    break;
			    }
			}
##		    }
##		}
##		RESUME FIELD _chgdisp;
##	}

##	ACTIVATE MENUITEM undoitem, FRSkey9
##	{
		if (lastdel == NULL)
		{
			IIUGerr(E_QF002F_No_previous_delete_to, 0, 0);
##			RESUME FIELD _chgdisp
		}
		if (undodel)
##		{ /* undo delete */
##			char	*delcol;
##			char	*delff;

			delcol = lastdel->col;
			delff = lastdel->formfield;
			num_deleted--;
			if (lastdel->keyinfo != mqISKEY)
			{
			    register i4	c;

			    for ( c = numatts ; c > attnum ; --c )
				atts[c] = atts[c-1];
			    atts[attnum] = lastdel;
			    ++qdef->mqnumatts;
			}
			else
			{
			    STcopy(formcopy, lastdel->formfield);
			}

			/* bug 2963
			** Put back 5.0 style of code.
			*/
			if ( delrow - 1 == 0 )
			{
##			    SCROLL _mqchange _chgdisp TO 1
##			    INSERTROW _mqchange _chgdisp 0
##				(col = delcol, ff = delff)
			}
			else
##			{
##			    i4	irow = delrow - 1;

##			    SCROLL _mqchange _chgdisp TO irow
##			    INSERTROW _mqchange _chgdisp
##				(col = delcol, ff = delff)
##			}

			undodel = FALSE;
##		}
		else
		{ /* undo `undo' */
			++num_deleted;
			if (lastdel->keyinfo != mqISKEY)
			{
			    register i4	c;

			    for ( c = attnum ; c < numatts - 1 ; ++c )
				atts[c] = atts[c+1];
			    atts[c] = NULL;
			    --qdef->mqnumatts;
		    	}
			else
			{
			    STcopy(lastdel->formfield, formcopy);
			    lastdel->formfield[0] = EOS;
			}
##			SCROLL _mqchange _chgdisp TO delrow
##			DELETEROW _mqchange _chgdisp

			undodel = TRUE;
		}
##	}
##	ACTIVATE MENUITEM ERget(FE_Help)(expl = ERget(_HelpExpl),validate = 0),
##		FRSkey1 (validate = 0)
##	{
		FEhelp(ERx("qchng.hlp"),ERget(S_QF0030_QBF_Change_Display_Fo));
##	}

##	ACTIVATE MENUITEM ERget(FE_End) (expl = ERget(_EndExpl), validate=0),
##		FRSkey3 (validate = 0)
##	{
		if ( undodel && lastdel != NULL )
		{
			if (lastdel->keyinfo != mqISKEY)
			{
			    MEfree(lastdel);
			}
			lastdel = NULL;
		}
##		BREAKDISPLAY
##	}
##	FINALIZE()

	*changed = (num_deleted > 0);
	return TRUE;
##}


/*
** Name:	getdisp() - This routine puts a new table name,
**		    range variable and set of fields in
**		    the form (_mqchange).
**
*/
static VOID
getdisp(qdef, relno)
register MQQDEF	*qdef;
i4		relno;
##{
##	char		*rv;
	register i4	i;
	register i4	numatts = qdef->mqnumatts;
	ADF_CB		*ladfcb;

	ladfcb = FEadfcb();

	rv = qdef->mqtabs[relno]->mqrangevar;

##	PUTFORM _mqchange ( table = rv );

	for ( i = 0 ; i < numatts ; ++i )
	{
		register ATTRIBINFO	*catt = qdef->mqatts[i];

		if ( catt->formfield[0] != EOS && STequal(rv, catt->rvar) &&
			catt->lkeyinfo == 0 && catt->jpart != 0 )
##		{
##			char	*jfld;
			char	uformat[MAX_FMTSTR + 1];
			i4	x, y;
			i4	charwidth;

			charwidth = catt->intbl ?
					FE_FMTMAXCHARWIDTH : MQ_MAXCHARWIDTH;
			jfld = (catt->jpart == 1) ? ERx("*") : ERx("");

			if ( fmt_sdeffmt(ladfcb, &(catt->dbv), charwidth,
				FALSE, uformat, &x, &y) != OK )
			{
				IIUGerr(E_QF0031_Bad_datatype_format, 0, 0);
			}
			else
##			{
##				char		*fldcol;
##				char		*ffld;

				fldcol = catt->col;
				ffld = catt->formfield;

##				LOADTABLE _mqchange _chgdisp (
##					#col = fldcol, #ff = ffld,
##					#joinfield = jfld
##				);
##			}
##		}
	} /* end for */
##}
