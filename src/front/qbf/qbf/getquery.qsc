/*
** Copyright (c) 1984, 2008 Actian Corporation
**	All rights reserved.
*/

#include	<compat.h>
#include	<st.h>
#include	<er.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
#include	<fe.h>
##include	"mqbf.qsh"
#include	"mqeglobs.h"
#include	"erqf.h"
#include	"iisqlda.h"
#include	"uf.h"
#include	"runtime.h"

/**
** Name:	getquery.qc -	Get Query Qualification From Form.
**
** Description:
**	This module is used to perform the QUERY mode of QBF for both the
**	BROWSE and UPDATE modes.  It checks the form to see what fields have
**	been filled in to be used as qualifications for the query and then
**	finishes creating the necessary qualification string.  It is also used
**	to set up the desired range variables for the current qdef.
**
**	Routines:
**		IIqfGetQuery()
**
**	Returns:
**		-1 = Return to QDEF phase - this return code is sent for
**			an error in setting up the range variables.
**		 0 = Return to top QueryExecution form.
**		 1 = Go to run the query.
**		 2 = Go into Setsort mode.
**
** History:
**	Written: 1/16/84 (nml)
**	12-aug-1987 (danielt)
**		changed FEmsg() calls to IIUGerr() calls
**	07-dec-87 (kenl)
**		Turned module into a .QSC file in order to incorporate
**		the new header file: mqbf.qsh.  Changed call to IIrvalid
**		so that the address of routine IIQFblfBldFrom is passed
**		in addition to the address of the MQQDEF (qdef).
**		IIQFblfBldFrom builds the FROM clause required by QG
**		(for the Master portion of a 1-1 or Master/Detail JoinDef)
**		to perform an SQL SELECT.  Added code to handle the case
**		where IIQFblfBldFrom may not build a FROM clause if no
**		fields were filled in on the form.
**	23-aug-88 (kenl)
**		Added DML level to call on IIrvalid.
**	08-mar-90 (kenl)
**		Added ListChoices menuitem to allow user to get help
**		on fields.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      17-dec-2008 (joea)
**          Replace READONLY/WSCREADONLY by const.
**	18-Aug-2009 (kschendel) 121804
**	    Include runtime.h to get IIrvalid definition for gcc 4.3.
*/

#define	_HelpExpl		F_FE0100_ExplFrameHelp
#define	_EndExpl		F_FE0102_ExplEnd

extern i4	MQdblang;

##extern char	mq_frame[];
##extern char	mq_tbl[];

STATUS	IIQFblfBldFrom();

IIqfGetQuery ( qdef, prev_qry, last_qry )
MQQDEF	*qdef;
bool	prev_qry;
bool	last_qry;
##{
	register QDESC	*mqqry;
	char		*qfrom;
	i4		rtncode;
	bool		did_last_qry;
##	char		*lmenu;
##	char		*enditem;

	static const char	_procname[]	= ERx("IIqfGetQuery");

#ifndef	NOLASTQRY
	if (IIrngon(mq_frame) != OK)
	{
		IIUGerr(E_QF0048_RngOnErr, 0, 0);
		return -1;
	}

	lmenu = ERget(F_QF0008_LastQuery);
#else
	lmenu = ERx("");
#endif	/* NOLASTQRY */

	mqqry = qdef->mqqdesc;
	qfrom = ((QRY_SPEC *)mqqry->qg_from)->qs_var;
	rtncode = 0;
	enditem = (mq_func == mqBROWSE || mq_func == mqUPDATE)
			? ERget(FE_Quit) : ERget(FE_End);

	if (tblfield)
	{
##		INITTABLE mq_frame mq_tbl QUERY;
	}
##	display mq_frame QUERY
##	initialize()
##	{
##		clear field all
# ifndef	NOLASTQRY
		if (last_qry)
		{
			if (IIrnglast(mq_frame) != OK)
			{
				IIUGerr(E_QF0049_LastQryErr, 0, 0);
				rtncode = -1;
##				breakdisplay
			}
		}
		else
		{
			if (IIrnginit(mq_frame) != OK)
			{
				IIUGerr(E_QF004A_RngInitErr, 0, 1, _procname);
				rtncode = -1;
##				breakdisplay
			}
		}
# endif		/* NOLASTQRY */

		did_last_qry = last_qry;
##	}

##	activate menuitem ERget(FE_Go), FRSkey4
##	{
		did_last_qry = FALSE;

#ifndef NOLASTQRY
		/* initialize FROM clause to empty */
		*qfrom = EOS;
		if ( !IIrvalid(mq_frame, IIQFblfBldFrom, (PTR) qdef, MQdblang) )
		{
##			resume
		}

		/*
		**  If we return from IIrvalid with *qfrom still NULL then
		**  NO fields were filled in to query about.  Therefore,
		**  IIQFblfBldFrom was not called and no FROM clause was
		**  built.  Since no fields were filled in, the SELECT to
		**  be done by QG for the Master WILL NOT involve any
		**  Detail tables.  The FROM clause for the Master will be
		**  built to include ONLY Master tables.
		*/
		if (*qfrom == EOS)
		{
			IIqfAddFrom( qdef, mqIN_MASTER, qfrom );
		}

		/* remove trailing comma */
		*((qfrom + STlength(qfrom)) - 1) = EOS;

#endif	/* NOLASTQRY */
		if ( mqqry->qg_sort != NULL || ( mqqry->qg_child != NULL &&
		     			mqqry->qg_child->qg_sort != NULL ) )
		{
##			message ERget(S_QF0044_RetrievingSorted);

		}
		else
		{
##			message ERget(S_QF0045_RetrievingData);
		}
		rtncode = 1;
		IIqbfclr(FALSE);
##		breakdisplay
##	}

##	activate menuitem ERget(FE_Blank)
##	{
		did_last_qry = FALSE;
##		clear field all
#ifndef NOLASTQRY
		if (IIrnginit(mq_frame) != OK)
		{
			IIUGerr(E_QF004A_RngInitErr, 0, 1, _procname);
			rtncode = -1;
##			breakdisplay
		}
##	}

##	activate menuitem lmenu
##	{
		if (!prev_qry)
		{
			IIUGerr(E_QF004B_NoLastQry, 0, 0);
##			resume
		}
##		clear field all
		if (IIrnglast(mq_frame) != OK)
		{
			IIUGerr(E_QF0049_LastQryErr, 0, 0);
			rtncode = -1;
##			breakdisplay
		}
		did_last_qry = TRUE;
#endif	/* NOLASTQRY */
##	}

##	activate menuitem ERget(F_QF0009_Order)
##	{
##		i4	changed;

##		inquire_frs form (changed = change(mq_frame));
		if (changed)
		{
#ifndef NOLASTQRY
			if ( !IIrvalid(mq_frame, NULL, (PTR)NULL, MQdblang) )
			{
##				resume
			}
#endif	/* NOLASTQRY */
			rtncode = 3;
		}
		else if (did_last_qry)
		{
			rtncode = 3;
		}
		else
		{
			rtncode = 2;
		}
		IIqbfclr(FALSE);
##		breakdisplay
##	}

##	ACTIVATE MENUITEM ERget(FE_Lookup) (VALIDATE = 0, ACTIVATE = 0,
##			EXPL = ERget(FE_LookupExpl)), 
##			FRSkey10 (VALIDATE = 0, ACTIVATE = 0)
##	{
		IIUFfieldHelp();
##	}

##	activate menuitem ERget(FE_Help), FRSkey1 (validate = 0)
##	{
		char	*help_file;

		help_file = ( mq_func == mqBROWSE || mq_func == mqUPDATE )
				? ERx("qqueryx.hlp") : ERx("qqueryn.hlp");
		FEhelp( help_file, ERget(S_QF0046_QBF_Query_State) );
##	}

##	activate FRSkey2 (validate = 0)
##	{
		if ( mq_func != mqBROWSE && mq_func != mqUPDATE )
			FTbell();	/* quit key not allowed */
		else
		{
			rtncode = 0;
##			breakdisplay
		}
##	}
##	activate menuitem enditem, FRSkey3 (validate = 0)
##	{
		rtncode = 0;
##		breakdisplay
##	}
##	finalize
	IIqbfclr(TRUE);
#ifndef	NOLASTQRY
	if ( IIunrng(mq_frame) != OK )
	{
		IIUGerr( E_QF0002_RangeError, 0, 1, _procname );
		return -1;
	}
#endif	/* NOLASTQRY */
	return rtncode;
##}
