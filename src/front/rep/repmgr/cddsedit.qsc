/*
**Copyright (c) 2004 Actian Corporation
*/
# include <compat.h>
# include <cm.h>
# include <st.h>
# include <cv.h>
# include <er.h>
# include <gl.h>
# include <iicommon.h>
# include <fe.h>
# include <erfe.h>
# include <uf.h>
# include <ug.h>
# include <stdprmpt.h>
# include <rpu.h>
# include "errm.h"

/**
** Name:	cddsedit.qsc - edit a CDDS
**
** Description:
**	Defines
**		cdds_edit	- edit a CDDS
**
** History:
**	16-dec-96 (joea)
**		Created based on cddsedit.osq in replicator library.
**	14-nov-97 (joea)
**		Correct call to IIUGerr.
**	30-nov-98 (abbjo03)
**		Generalize the mode lookup functions. Add generic mode
**		validation function.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	16-oct-2001 (abbjo03)
**	    Change READONLY to const.
**	08-jul-2004 (abbjo03)
**	    Fix mode_lookup to use ESQL/EQUEL field name for falpha_mode.
**/

GLOBALREF
##char	RMdb_display[];

static bool	form_initd;
static const
##char	*form_name = ERx("rmcdds_detail"),
##	*fcdds_no = ERx("cdds_no"),
##	*fcdds_name = ERx("cdds_name"),
##	*fcoll_mode = ERx("collision_mode"),
##	*fcoll_mode_alpha = ERx("collision_mode_alpha"),
##	*ferr_mode = ERx("error_mode"),
##	*ferr_mode_alpha = ERx("error_mode_alpha");

static char *coll_mode_opt = ERx("collision_mode");
static char *err_mode_opt = ERx("error_mode");


bool mode_valid(char *mode_name, const char *fint_mode, char *mode_alpha);
void mode_lookup(char *mode_name, const char *fint_mode,
	const char *falpha_mode);
static bool pick_mode(char *list_rows, i2 *mode, char *mode_alpha);


/*{
** Name:	cdds_edit	- edit a CDDS
**
** Description:
**	Edit an existing Replicated Database definition
**
** Inputs:
**	cdds_no		- CDDS number
**	cdds_name	- CDDS name
**	collision_mode	- collision mode
**	coll_mode_alpha	- collision mode text
**	error_mode	- error mode
**	err_mode_alpha	- error mode text
**
** Outputs:
**	cdds_name	- CDDS name
**	collision_mode	- collision mode
**	coll_mode_alpha	- collision mode text
**	error_mode	- error mode
**	err_mode_alpha	- error mode text
**
** Returns:
**	0	- no changes were made
**	1	- changes were made and saved
*/
STATUS
cdds_edit(
i2	cdds_no,
char	*cdds_name,
i2	*collision_mode,
char	*coll_mode_alpha,
i2	*error_mode,
char	*err_mode_alpha)
# if 0
EXEC SQL BEGIN DECLARE SECTION;
##i2	cdds_no;
##char	*cdds_name;
##char	*coll_mode_alpha;
##char	*err_mode_alpha;
EXEC SQL END DECLARE SECTION;
# endif
##{
	EXEC SQL BEGIN DECLARE SECTION;
	i4	cdds_exist;
##	i2	coll_mode;
##	i2	err_mode;
	EXEC SQL END DECLARE SECTION;
##	i4	chng;
##	char	objname[FE_MAXNAME+1];
	STATUS	retval;

	coll_mode = *collision_mode;
	err_mode = *error_mode;
	if (!form_initd)
	{
		if (IIUFgtfGetForm(IIUFlcfLocateForm(), form_name) != OK)
		{
			IIUGerr(E_RM0006_Get_form_failed, UG_ERR_ERROR, 1,
				form_name);
			return;
		}
		form_initd = TRUE;
	}

##	display form_name update
##	initialize (db = RMdb_display, fcdds_no = cdds_no,
##		fcdds_name = cdds_name, fcoll_mode = coll_mode,
##		fcoll_mode_alpha = coll_mode_alpha, ferr_mode = err_mode,
##		ferr_mode_alpha = err_mode_alpha)
##	activate field fcdds_name
##	{
##		inquire_frs field form_name (chng = change)
		if (chng)
		{
			/* Check for existing cdds_name */
##			getform (cdds_name = fcdds_name)
			STtrmwhite(cdds_name);
			EXEC SQL SELECT	COUNT(*)
				INTO	:cdds_exist
				FROM	dd_cdds
				WHERE	cdds_name = :cdds_name;
			EXEC SQL COMMIT;
			if (cdds_exist)
			{
				IIUGerr(E_RM0022_Cdds_name_in_use,
					UG_ERR_ERROR, 0);
##				resume
			}
		}
##		resume next
##	}

##	activate field fcoll_mode
##	{
##		inquire_frs field form_name (chng = change)
		if (chng)
		{
			if (!mode_valid(coll_mode_opt, fcoll_mode,
				coll_mode_alpha))
			{
				IIUGerr(E_RM0023_Invalid_coll_mode,
					UG_ERR_ERROR, 0);
##				resume
			}
##			putform (fcoll_mode_alpha = coll_mode_alpha)
		}
##		resume next
##	}

##	activate field ferr_mode
##	{
##		inquire_frs field form_name (chng = change)
		if (chng)
		{
			if (!mode_valid(err_mode_opt, ferr_mode,
				err_mode_alpha))
			{
				IIUGerr(E_RM0024_Invalid_err_mode,
					UG_ERR_ERROR, 0);
##				resume
			}
##			putform (ferr_mode_alpha = err_mode_alpha)
		}
##		resume next
##	}

##	activate menuitem ERget(FE_Save) (expl = ERget(F_FE0117_SaveExpl)),
##		FRSkey8
##	{
##		inquire_frs form (chng = change)
		if (!chng)
		{
			IIUGerr(E_RM0029_No_changes_to_save, 0, 0);
##			resume
		}

##		validate
##		getform (cdds_no = fcdds_no, cdds_name = fcdds_name,
##			coll_mode = fcoll_mode,
##			coll_mode_alpha = fcoll_mode_alpha,
##			err_mode = ferr_mode, err_mode_alpha = ferr_mode_alpha)

		IIUGmsg(ERget(F_RM0009_Saving), FALSE, 0);
		retval = 0;
		EXEC SQL REPEATED UPDATE dd_cdds
			SET	cdds_name = :cdds_name,
				collision_mode = :coll_mode,
				error_mode = :err_mode
			WHERE	cdds_no = :cdds_no;
		if (RPdb_error_check(DBEC_SINGLE_ROW, NULL) != OK)
		{
			EXEC SQL ROLLBACK;
			retval = -1;
		}
		else if (db_config_changed(0) != OK)
		{
			EXEC SQL ROLLBACK;
			retval = -1;
		}

		if (retval)
		{
			FTbell();
			IIUGerr(E_RM0009_Error_saving, UG_ERR_ERROR, 0);
##			resume
		}

		EXEC SQL COMMIT;
		if (RPdb_error_check(0, NULL) != OK)
		{
			EXEC SQL ROLLBACK;
			IIUGerr(E_RM000A_Error_committing, UG_ERR_ERROR, 0);
##			resume
		}

		*collision_mode = coll_mode;
		*error_mode = err_mode;
		retval = 1;
##		breakdisplay
##	}

##	activate menuitem ERget(FE_Lookup) (activate = 0, validate = 0,
##		expl = ERget(F_FE0116_LookupExpl)), FRSkey10 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs field form_name (objname = name)
		if (STequal(objname, fcoll_mode))
			mode_lookup(coll_mode_opt, fcoll_mode,
				fcoll_mode_alpha);
		else if (STequal(objname, ferr_mode))
			mode_lookup(err_mode_opt, ferr_mode, ferr_mode_alpha);
		else
			IIUFfieldHelp();
##	}

##	activate menuitem ERget(FE_Help) (activate = 0, validate = 0,
##		expl = ERget(F_FE0100_ExplFrameHelp)), FRSkey1 (activate = 0,
##		validate = 0)
##	{
		FEhelp(ERx("rmcddsed.hlp"), ERget(F_RM0031_Edit_cdds));
##	}

##	activate menuitem ERget(FE_End) (activate = 0, validate = 0,
##		expl = ERget(F_FE0102_ExplEnd)), FRSkey3 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs form (chng = change)
		if (chng && IIUFccConfirmChoice(CONF_GENERIC, NULL, NULL,
			NULL, NULL, S_RM000E_End_no_save, S_RM000F_Yes_end,
			S_RM0010_No_end, ERx(""), TRUE) != CONFCH_YES)
##			resume

		retval = 0;
##		breakdisplay
##	}

	return (retval);
##}


bool
mode_valid(
char		*mode_name,
const char	*fint_mode,
char		*mode_alpha)
# if 0
EXEC SQL BEGIN DECLARE SECTION;
char		*mode_name;
##char		*fint_mode;
##char		*mode_alpha;
EXEC SQL END DECLARE SECTION;
# endif
{
	EXEC SQL BEGIN DECLARE SECTION;
##	i2	mode_int;
	EXEC SQL END DECLARE SECTION;
	DBEC_ERR_INFO	errinfo;

##	getform form_name (mode_int = fint_mode)
	EXEC SQL SELECT	alpha_value
		INTO	:mode_alpha
		FROM	dd_option_values
		WHERE	option_name = :mode_name
		AND	numeric_value = :mode_int;
	RPdb_error_check(DBEC_ZERO_ROWS_OK, &errinfo);
	EXEC SQL COMMIT;
	if (errinfo.errorno)
	{
##		message "Error validating collision mode ..."
##			with style = popup
		return (FALSE);
	}
	else if (errinfo.rowcount == 0)
	{
		return (FALSE);
	}
	return (TRUE);
}


void
mode_lookup(
char		*mode_name,
const char	*fint_mode,
const char	*falpha_mode)
# if 0
EXEC SQL BEGIN DECLARE SECTION;
char		*mode_name;
##char		*falpha_mode;
EXEC SQL END DECLARE SECTION;
# endif
##{
	EXEC SQL BEGIN DECLARE SECTION;
##	i2	mode_int;
##	char	mode_alpha[21];
	EXEC SQL END DECLARE SECTION;
	char	list_row[36];
	char	list_rows[2048];

	*list_rows = EOS;
	EXEC SQL SELECT INT2(numeric_value), alpha_value
		INTO	:mode_int, :mode_alpha
		FROM	dd_option_values
		WHERE	option_name = :mode_name
		ORDER	BY 1;
	EXEC SQL BEGIN;
		STtrmwhite(mode_alpha);
		STprintf(list_row, ERx("%d;%s\n"), (i4)mode_int, mode_alpha);
		STcat(list_rows, list_row);
	EXEC SQL END;
	EXEC SQL COMMIT;
	if (pick_mode(list_rows, &mode_int, mode_alpha))
	{
##		putform form_name (fint_mode = mode_int,
##			falpha_mode = mode_alpha)
##		set_frs form (change = 1)
	}
##}


static bool
pick_mode(
char	*list_rows,
i2	*mode,
char	*mode_alpha)
{
	i4	i;
	i4	row;
	char	*p1, *p2, *pend;

	row = IIFDlpListPick(NULL, list_rows, 5, -1, -1, NULL, NULL, NULL,
		NULL);
	if (row >= 0)
	{
		p1 = list_rows;
		pend = STindex(p1, ERx("\n"), 0);
		for (i = 0; i < row; ++i)
		{
			p1 = CMnext(pend);
			pend = STindex(p1, ERx("\n"), 0);
		}
		*pend = EOS;
		p2 = pend = STindex(p1, ERx(";"), 0);
		CMnext(pend);
		STcopy(pend, mode_alpha);
		*p2 = EOS;
		CVan(p1, &i);
		*mode = (i2)i;
		return (TRUE);
	}

	return (FALSE);
}
