/*
** Copyright (c) 1996, 2008 Actian Corporation
*/
# include <compat.h>
# include <cm.h>
# include <st.h>
# include <cv.h>
# include <er.h>
# include <lo.h>
# include <nm.h>
# include <si.h>
# include <gl.h>
# include <iicommon.h>
# include <fe.h>
# include <erfe.h>
# include <uf.h>
# include <ug.h>
# include <stdprmpt.h>
# include <rpu.h>
# include "errm.h"

/**
** Name:	editcfg.qsc - edit RepServer configuration file
**
** Description:
**	Defines
**		edit_cfg_file	- edit configuration file
**
** History:
**	03-dec-96 (joea)
**		Created based on ed_file.osq in replicator library.
**	03-jun-98 (abbjo03)
**		Use RMget_server_dir to prepare server directory.
**	21-oct-98 (abbjo03)
**		Remove defaults that are already defaulted by the RepServer. Do
**		not include vnode in IDB since it should usually be a local
**		connection.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      18-dec-2008 (joea)
**          Replace READONLY/WSCREADONLY by const.
**/

GLOBALREF
EXEC SQL BEGIN DECLARE SECTION;
i2	RMlocal_db_no;
EXEC SQL END DECLARE SECTION;


static bool	form_initd;
static const
##char	*form_name = ERx("rmed_file"),
##	*tf_name = ERx("iitf"),
##	*tf2_name = ERx("flags"),
##	*fsvr_no = ERx("server"),
##	*fline = ERx("line"),
##	*fflag_name = ERx("flag_name"),
##	*fshort_descr = ERx("short_description"),
##	*flong_descr = ERx("long_descr");


/*{
** Name:	edit_cfg_file	- edit configuration file
**
** Description:
**	Allows the user to edit a RepServer configuration file (runrepl.opt).
**
** Inputs:
**	svr_no	- server number
**
** Outputs:
**	none
**
** Returns:
**	none
*/
void
edit_cfg_file(
i2	svr_no)
# if 0
##i2	svr_no;
# endif
##{
	EXEC SQL BEGIN DECLARE SECTION;
##	char	flag_name[7];
##	char	short_descr[21];
##	char	long_descr[501];
	char	local_db_name[DB_MAXNAME+1];
	char	dba_name[DB_MAXNAME+1];
	char	dbms_type[9];
	i4	numrows;
	i4	num_value;
	char	alpha_value[21];
	EXEC SQL END DECLARE SECTION;
##	char	fld_name[FE_MAXNAME+1];
##	char	buff[81];
##	i4	chng;
##	char	newbuff[81];
	char	*p;
	char	path[MAX_LOC+1];
	FILE	*fp;
	LOCATION	loc;
	LOINFORMATION	locinfo;
	i4	locflags;
	bool	found;
	i4	i;
	i4	row;
	char	*p1, *pend;
	char	list_row[36];
	char	list_rows[2048];

	if (RMget_server_dir(svr_no, &loc, path) != OK)
	{
		IIUGerr(E_RM005D_Rservers_not_defined, UG_ERR_ERROR, 0);
		return;
	}
	LOfstfile(ERx("runrepl.opt"), &loc);

	if (!form_initd)
	{
		if (IIUFgtfGetForm(IIUFlcfLocateForm(), form_name) != OK)
		{
			IIUGerr(E_RM0006_Get_form_failed, UG_ERR_ERROR, 1,
				form_name);
			return;
		}
		form_initd = TRUE;
	}

##	inittable form_name tf_name fill
	locflags = 0;
	if (LOinfo(&loc, &locflags, &locinfo) == OK)
	{
		if (SIfopen(&loc, ERx("r"), SI_TXT, SI_MAX_TXT_REC, &fp) != OK)
		{
			LOtos(&loc, &p);
			IIUGerr(E_RM005E_Error_open_file, UG_ERR_ERROR, 1, p);
			return;
		}

		while (SIgetrec(buff, (i4)sizeof(buff), fp) != ENDFILE)
##			loadtable form_name tf_name (fline = buff)
		SIclose(fp);
	}

##	inittable form_name tf2_name read (flong_descr = varchar(500) not null)
	EXEC SQL SELECT flag_name, short_description, flag_description
		INTO	:flag_name, :short_descr, :long_descr
		FROM	dd_server_flags
		ORDER	BY flag_name;
	EXEC SQL BEGIN;
##		loadtable form_name tf2_name (fflag_name = flag_name,
##			fshort_descr = short_descr, flong_descr = long_descr)
	EXEC SQL END;
	if (RPdb_error_check(0, NULL) != OK)
	{
		EXEC SQL ROLLBACK;
		FTbell();
		IIUGerr(E_RM0012_Error_selecting, UG_ERR_ERROR, 0);
		return;
	}
	EXEC SQL COMMIT;

##	display form_name
##	initialize (fsvr_no = svr_no)
##	activate menuitem ERget(FE_Save) (expl = ERget(F_FE0117_SaveExpl)),
##		FRSkey8
##	{
##		inquire_frs form (chng = change)
		if (!chng)
		{
			IIUGerr(E_RM0029_No_changes_to_save, 0, 0);
##			resume
		}

		if (SIfopen(&loc, ERx("w"), SI_TXT, SI_MAX_TXT_REC, &fp) != OK)
		{
			LOtos(&loc, &p);
			STcopy(p, path);
			IIUGerr(E_RM005F_Error_open_file_write, UG_ERR_ERROR,
				1, path);
##			resume
		}

##		unloadtable form_name tf_name (buff = fline)
##		{
			STtrmwhite(buff);
			if (*buff != EOS)
				SIfprintf(fp, ERx("%s\n"), buff);
##		}
		SIclose(fp);

##		breakdisplay
##	}

##	activate menuitem ERget(F_RM0086_Default)
##		(expl = ERget(F_RM0087_Default_expl))
##	{
##		inittable form_name tf_name fill
		STprintf(buff, ERx("-SVR%-d"), svr_no);
##		loadtable form_name tf_name (fline = buff)

		EXEC SQL REPEATED SELECT database_name, dbms_type,
				database_owner
			INTO	:local_db_name, :dbms_type, :dba_name
			FROM	dd_databases
			WHERE	database_no = :RMlocal_db_no;
		if (RPdb_error_check(DBEC_SINGLE_ROW, NULL) != OK)
		{
			STcopy(ERget(F_RM0088_unknown), local_db_name);
			STcopy(ERget(F_RM0088_unknown), dba_name);
			IIUGerr(E_RM0060_Error_get_local_db, UG_ERR_ERROR, 0);
		}
		EXEC SQL COMMIT;

		STtrmwhite(local_db_name);
		STprintf(buff, ERx("-IDB%s"), local_db_name);
		STtrmwhite(dbms_type);
		if (!STequal(dbms_type, ERx("ingres")))
		{
			STcat(buff, ERx("/"));
			STcat(buff, dbms_type);
		}
##		loadtable form_name tf_name (fline = buff)

		STprintf(buff, ERx("-OWN%s"), dba_name);
##		loadtable form_name tf_name (fline = buff)

##		set_frs form (change = 1)
##	}

##	activate menuitem ERget(F_RM0089_SelectFlag)
##		(expl = ERget(F_RM008A_SelectFlag_expl))
##	{
##		inquire_frs field form_name (fld_name = name)
		if (!STequal(fld_name, tf2_name))
		{
			IIUGerr(E_RM0061_Not_on_svr_flags_tf, UG_ERR_ERROR, 0);
##			resume field tf2_name
		}

##		getrow form_name tf2_name (flag_name = fflag_name)
##		unloadtable form_name tf_name (buff = fline)
##		{
			if (*buff != EOS &&
				STbcompare(buff, 4, flag_name, 4, FALSE) == 0)
			{

				IIUGerr(E_RM0062_Flag_already_used,
					UG_ERR_ERROR, 1, flag_name);
##				resume
			}
##		}

##		loadtable form_name tf_name (fline = flag_name)
##		scroll form_name tf_name to end
##		resume field tf_name
##	}

##	activate menuitem ERget(F_RM008B_DescribeFlag)
##		(expl = ERget(F_RM008C_DescribeFlag_expl))
##	{
##		inquire_frs field form_name (buff = name)
		if (!STequal(buff, tf2_name))
		{
			IIUGerr(E_RM0061_Not_on_svr_flags_tf, UG_ERR_ERROR, 0);
##			resume field tf2_name
		}

##		getrow form_name tf2_name (long_descr = flong_descr)
##		message long_descr with style = popup
##	}

##	activate menuitem ERget(FE_Lookup) (activate = 0, validate = 0,
##		expl = ERget(F_FE0116_LookupExpl)), FRSkey10 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs field form_name (buff = name)
		if (!STequal(buff, tf2_name))
		{
			IIUFfieldHelp();
##			resume
		}

##		getrow form_name tf2_name (flag_name = fflag_name)
		EXEC SQL SELECT	COUNT(*)
			INTO	:numrows
			FROM	dd_option_values
			WHERE	flag_name = :flag_name;
		if (numrows == 0)
		{
			IIUGerr(S_RM0063_Flag_has_no_int_val, 0, 0);
##			resume
		}
		else if (numrows == 1)
		{
			IIUGerr(S_RM0064_Flag_uses_pos_int, 0, 0);
##			resume
		}
		else
		{
			*list_rows = EOS;
			EXEC SQL SELECT numeric_value, alpha_value
				INTO	:num_value, :alpha_value
				FROM	dd_option_values
				WHERE	flag_name = :flag_name
				ORDER	BY numeric_value;
			EXEC SQL BEGIN;
				STtrmwhite(alpha_value);
				STprintf(list_row, ERx("%d;%s\n"), num_value,
					alpha_value);
				STcat(list_rows, list_row);
			EXEC SQL END;
			EXEC SQL COMMIT;
			row = IIFDlpListPick(NULL, list_rows, numrows, -1, -1,
				NULL, NULL, NULL, NULL);
			if (row >= 0)
			{
				p1 = list_rows;
				pend = STindex(p1, ERx("\n"), 0);
				for (i = 0; i < row; ++i)
				{
					p1 = CMnext(pend);
					pend = STindex(p1, ERx("\n"), 0);
				}
				*pend = EOS;
				pend = STindex(p1, ERx(";"), 0);
				*pend = EOS;
				CVan(p1, &num_value);

				found = FALSE;
				STprintf(newbuff, ERx("%s%d"), flag_name,
					num_value);
##				unloadtable form_name tf_name (buff = fline)
##				{
					if (STbcompare(buff, 4, flag_name, 4,
						0) == 0)
					{
##						putrow form_name tf_name (
##							fline = newbuff)
						found = TRUE;
##						endloop
					}
##				}

				if (!found)
				{
##					loadtable form_name tf_name
##						(fline = newbuff)
##					scroll form_name tf_name to end
##					resume field tf_name
				}
			}
		}
##	}

##	activate menuitem ERget(FE_Help) (activate = 0, validate = 0,
##		expl = ERget(F_FE0100_ExplFrameHelp)), FRSkey1 (activate = 0,
##		validate = 0)
##	{
		FEhelp(ERx("rmedfile.hlp"), ERget(F_RM008D_Edit_config_file));
##	}

##	activate menuitem ERget(FE_End) (activate = 0, validate = 0,
##		expl = ERget(F_FE0102_ExplEnd)), FRSkey3 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs form (chng = change)
		if (chng && IIUFccConfirmChoice(CONF_GENERIC, NULL, NULL,
			NULL, NULL, S_RM000E_End_no_save, S_RM000F_Yes_end,
			S_RM0010_No_end, ERx(""), TRUE) != CONFCH_YES)
##			resume

##		breakdisplay
##	}
##}
