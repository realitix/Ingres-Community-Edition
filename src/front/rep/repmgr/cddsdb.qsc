/*
** Copyright (c) 1996, 2008 Actian Corporation
*/
# include <compat.h>
# include <cm.h>
# include <st.h>
# include <cv.h>
# include <er.h>
# include <gl.h>
# include <iicommon.h>
# include <fe.h>
# include <erfe.h>
# include <adf.h>
# include <fmt.h>
# include <ft.h>
# include <frame.h>
# include <runtime.h>
# include <uf.h>
# include <ug.h>
# include <stdprmpt.h>
# include <rpu.h>
# include <targtype.h>
# include "errm.h"

/**
** Name:	cddsdb.qsc - CDDS databases
**
** Description:
**	Defines
**		cdds_databases	- CDDS databases
**
** History:
**	16-dec-96 (joea)
**		Created based on cddsdbty.osq in replicator library.
**	14-jan-97 (joea)
**		Use RMtarg_get_descr instead of dd_target_types table.
**	14-nov-97 (joea)
**		Correct call to IIUGerr.
**	30-nov-98 (abbjo03)
**		Allow server number zero, indicating no server.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      18-dec-2008 (joea)
**          Replace READONLY/WSCREADONLY by const.
**/

# define MAX_SERVER_NO		999


GLOBALREF
##char	RMdb_display[];


static bool	form_initd;
static const
##char	*form_name = ERx("rmcdds_dbs"),
##	*tf_name = ERx("iitf"),
##	*fcdds_no = ERx("cdds_no"),
##	*fcdds_name = ERx("cdds_name"),
##	*fdb_no = ERx("database_no"),
##	*fold_db_no = ERx("old_db_no"),
##	*ffull_db_name = ERx("vnode_db_name"),
##	*ftarget_type = ERx("target_type"),
##	*ftarget_descr = ERx("short_description"),
##	*fserver_no = ERx("server_no");


/*{
** Name:	cdds_databases	- CDDS databases
**
** Description:
**	Define the databases containing a CDDS, the target types and the
**	servers.
**
** Inputs:
**	cdds_no			- CDDS number
**	cdds_name		- database name
**
** Outputs:
**	none
**
** Returns:
**	none
*/
void
cdds_databases(
i2	cdds_no,
char	*cdds_name)
# if 0
EXEC SQL BEGIN DECLARE SECTION;
##i2	cdds_no;
##char	*cdds_name;
EXEC SQL END DECLARE SECTION;
# endif
##{
	EXEC SQL BEGIN DECLARE SECTION;
##	i2	db_no;
##	i2	old_db_no;
##	i2	target_type;
##	char	full_db_name[DB_MAXNAME*2+3];
##	i2	server_no;
	char	server_name[25];
	i4	server_exist;
	EXEC SQL END DECLARE SECTION;
##	char	*target_descr;
##	i4	rowstate;
##	i4	rownumber;
##	i4	chng;
##	char	objname[FE_MAXNAME+1];
	DBEC_ERR_INFO	errinfo;
	i4	i;
	i4	row;
	char	*p1, *p2, *pend;
	char	list_row[36];
	char	list_rows[2048];

	if (!form_initd)
	{
		if (IIUFgtfGetForm(IIUFlcfLocateForm(), form_name) != OK)
		{
			IIUGerr(E_RM0006_Get_form_failed, UG_ERR_ERROR, 1,
				form_name);
			return;
		}
		form_initd = TRUE;
	}

##	inittable form_name tf_name fill (fold_db_no = i2 not null)
	EXEC SQL SELECT d.database_no,
			TRIM(db.vnode_name) + '::' + TRIM(db.database_name),
			d.target_type, d.server_no
		INTO	:db_no,
			:full_db_name,
			:target_type, :server_no
		FROM	dd_db_cdds d, dd_databases db
		WHERE	d.cdds_no = :cdds_no
		AND	d.database_no = db.database_no;
	EXEC SQL BEGIN;
		target_descr = RMtarg_get_descr(target_type);
##		loadtable form_name tf_name (fdb_no = db_no,
##			fold_db_no = db_no, ffull_db_name = full_db_name,
##			ftarget_type = target_type,
##			ftarget_descr = target_descr, fserver_no = server_no)
	EXEC SQL END;
	if (RPdb_error_check(DBEC_ZERO_ROWS_OK, NULL) != OK)
	{
		EXEC SQL ROLLBACK;
		FTbell();
		IIUGerr(E_RM0012_Error_selecting, UG_ERR_ERROR, 0);
		return;
	}
	EXEC SQL COMMIT;

##	display form_name fill
##	initialize (db = RMdb_display, fcdds_no = cdds_no,
##		fcdds_name = cdds_name)
##	activate column tf_name fdb_no
##	{
##		inquire_frs row form_name tf_name (chng = change)
		if (chng)
		{
##			getrow form_name tf_name (db_no = fdb_no)
			EXEC SQL SELECT TRIM(vnode_name) + '::' +
					TRIM(database_name)
				INTO	:full_db_name
				FROM	dd_databases
				WHERE	database_no = :db_no;
			RPdb_error_check(0, &errinfo);
			EXEC SQL COMMIT;
			if (errinfo.errorno)
			{
				IIUGerr(E_RM0025_Error_check_db_no,
					UG_ERR_ERROR, 0);
##				resume
			}
			if (errinfo.rowcount == 0)
			{
				IIUGerr(E_RM0026_Invalid_db_no, UG_ERR_ERROR,
					0);
##				resume
			}
##			putrow form_name tf_name (ffull_db_name = full_db_name)
		}
##		resume next
##	}

##	activate column tf_name ftarget_type
##	{
##		inquire_frs row form_name tf_name (chng = change)
		if (chng)
		{
##			getrow form_name tf_name (target_type = ftarget_type)
			if (!VALID_TARGET_TYPE(target_type))
			{
				IIUGerr(E_RM0027_Invalid_target_type,
					UG_ERR_ERROR, 0);
##				resume
			}
			target_descr = RMtarg_get_descr(target_type);
##			putrow form_name tf_name (ftarget_descr = target_descr)
		}
##		resume next
##	}

##	activate column tf_name fserver_no
##	{
##		inquire_frs row form_name tf_name (chng = change)
		if (chng)
		{
##			getrow form_name tf_name (server_no = fserver_no)
			if (server_no < 0 || server_no > MAX_SERVER_NO)
			{
				IIUGerr(E_RM0028_Invalid_server_no,
					UG_ERR_ERROR, 0);
##				resume
			}
		}
##		resume next
##	}

##	activate menuitem ERget(FE_Save) (expl = ERget(F_FE0117_SaveExpl)),
##		FRSkey8
##	{
##		inquire_frs form (chng = change)
		if (!chng)
		{
			IIUGerr(E_RM0029_No_changes_to_save, 0, 0);
##			resume
		}

##		validate
		IIUGmsg(ERget(F_RM0009_Saving), FALSE, 0);
##		unloadtable form_name tf_name (rowstate = _STATE,
##			rownumber = _RECORD, old_db_no = fold_db_no)
##		{
			if (rowstate == stDELETE)
			{
				/*
				** delete the path where the database exists,
				** if any
				*/
				EXEC SQL REPEATED DELETE FROM dd_paths
					WHERE	cdds_no = :cdds_no
					AND	(localdb = :old_db_no
					OR	sourcedb = :old_db_no
					OR	targetdb = :old_db_no);
				if (RPdb_error_check(DBEC_ZERO_ROWS_OK,
					NULL) != OK)
				{
					EXEC SQL ROLLBACK;
					IIUGerr(E_RM002A_Error_saving_tf,
						UG_ERR_ERROR, 0);
##					scroll form_name tf_name to rownumber
##					resume field tf_name
				}

				EXEC SQL REPEATED DELETE FROM dd_db_cdds
					WHERE	cdds_no = :cdds_no
					AND	database_no = :old_db_no;
				if (RPdb_error_check(DBEC_SINGLE_ROW, NULL)
					!= OK)
				{
					EXEC SQL ROLLBACK;
					IIUGerr(E_RM002A_Error_saving_tf,
						UG_ERR_ERROR, 0);
##					scroll form_name tf_name to rownumber
##					resume field tf_name
				}
			}
##		}

		/* process all but Deleted rows */
##		unloadtable form_name tf_name (rowstate = _STATE,
##			rownumber = _RECORD, db_no = fdb_no,
##			old_db_no = fold_db_no, full_db_name = ffull_db_name,
##			target_type = ftarget_type, server_no = fserver_no)
##		{
			if (rowstate == stNEW)
				EXEC SQL REPEATED INSERT INTO dd_db_cdds(
						database_no, cdds_no,
						target_type, server_no)
					VALUES	(:db_no, :cdds_no,
						:target_type, :server_no);
			else if (rowstate == stCHANGE)
				/*
				** Update row using hidden version of key fields
				** in where clause.
				*/
				EXEC SQL REPEATED UPDATE dd_db_cdds
					SET	database_no = :db_no,
						target_type = :target_type,
						server_no = :server_no
					WHERE	cdds_no = :cdds_no
					AND	database_no = :old_db_no;
			if (rowstate == stNEW || rowstate == stCHANGE)
			{
				if (RPdb_error_check(DBEC_SINGLE_ROW, NULL)
					!= OK)
				{
					EXEC SQL ROLLBACK;
					IIUGerr(E_RM002A_Error_saving_tf,
						UG_ERR_ERROR, 0);
##					scroll form_name tf_name to rownumber
##					resume field tf_name
				}

				if (server_no)
				{
					EXEC SQL SELECT COUNT(*)
						INTO	:server_exist
						FROM	dd_servers
						WHERE	server_no = :server_no;
					if (RPdb_error_check(DBEC_SINGLE_ROW,
						NULL) != OK)
					{
						EXEC SQL ROLLBACK;
						IIUGerr(E_RM002A_Error_saving_tf,
							UG_ERR_ERROR, 0);
##						scroll form_name tf_name to
##							rownumber
##						resume field tf_name
					}
					if (!server_exist)
					{
						STprintf(server_name,
							ERx("dd_server%d"),
							server_no);
						EXEC SQL INSERT INTO
								dd_servers (
								server_no,
								server_name)
							VALUES	(:server_no,
								:server_name);
						if (RPdb_error_check(
							DBEC_SINGLE_ROW,
							NULL) != OK)
						{
							EXEC SQL ROLLBACK;
							IIUGerr(E_RM002A_Error_saving_tf,
								UG_ERR_ERROR,
								0);
##							scroll form_name tf_name
##								to rownumber
##							resume field tf_name
						}
					}
				}
			}
##		}
		if (db_config_changed(0) != OK)
		{
			EXEC SQL ROLLBACK;
##			resume
		}

		EXEC SQL COMMIT;
		if (RPdb_error_check(0, NULL) != OK)
		{
			EXEC SQL ROLLBACK;
			IIUGerr(E_RM000A_Error_committing, UG_ERR_ERROR, 0);
##			resume
		}

##		breakdisplay
##	}

##	activate menuitem ERget(FE_Insert)
##		(expl = ERget(F_RM0036_Insert_expl)), FRSkey12
##	{
##		insertrow form_name tf_name (_STATE = 0)
##	}

##	activate menuitem ERget(F_RM0032_RowDelete) (activate = 0,
##		validate = 0, expl = ERget(F_RM0033_RowDelete_expl)), FRSkey14
##		(activate = 0, validate = 0)
##	{
##		getrow form_name tf_name (full_db_name = ffull_db_name)
		if (IIUFccConfirmChoice(CONF_DELETE, full_db_name,
			ERget(F_RM0021_database), NULL, NULL) != CONFCH_YES)
##			resume

##		deleterow form_name tf_name
##		set_frs form (change = 1)
##	}

##	activate menuitem ERget(FE_Lookup) (activate = 0, validate = 0,
##		expl = ERget(F_FE0116_LookupExpl)), FRSkey10 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs column form_name tf_name (objname = name)
		if (STequal(objname, fdb_no))
		{
			*list_rows = EOS;
			EXEC SQL SELECT database_no, TRIM(vnode_name) + '::' +
						database_name
				INTO	:db_no, :full_db_name
				FROM	dd_databases
				WHERE	database_no NOT IN (
					SELECT	database_no
					FROM	dd_db_cdds
					WHERE	cdds_no = :cdds_no)
				ORDER	BY database_no;
			EXEC SQL BEGIN;
				STtrmwhite(full_db_name);
				STprintf(list_row, ERx("%d;%s\n"), (i4)db_no,
					full_db_name);
				STcat(list_rows, list_row);
			EXEC SQL END;
			EXEC SQL COMMIT;
			row = IIFDlpListPick(NULL, list_rows, 4, -1, -1, NULL,
				NULL, NULL, NULL);
			if (row >= 0)
			{
				p1 = list_rows;
				pend = STindex(p1, ERx("\n"), 0);
				for (i = 0; i < row; ++i)
				{
					p1 = CMnext(pend);
					pend = STindex(p1, ERx("\n"), 0);
				}
				*pend = EOS;
				p2 = pend = STindex(p1, ERx(";"), 0);
				CMnext(pend);
				STcopy(pend, full_db_name);
				*p2 = EOS;
				CVan(p1, &i);
				db_no = (i2)i;
##				putrow form_name tf_name (fdb_no = db_no,
##					ffull_db_name = full_db_name)
##				set_frs form (change = 1)
			}
		}
		else if (STequal(objname, ftarget_type))
		{
			*list_rows = EOS;
			for (target_type = TARG_FULL_PEER;
				target_type <= TARG_UNPROT_READ; ++target_type)
			{
				STprintf(list_row, ERx("%d;%s\n"),
					(i4)target_type,
					RMtarg_get_descr(target_type));
				STcat(list_rows, list_row);
			}
			row = IIFDlpListPick(NULL, list_rows, 3, -1, -1, NULL,
				NULL, NULL, NULL);
			if (row >= 0)
			{
				p1 = list_rows;
				pend = STindex(p1, ERx("\n"), 0);
				for (i = 0; i < row; ++i)
				{
					p1 = CMnext(pend);
					pend = STindex(p1, ERx("\n"), 0);
				}
				*pend = EOS;
				p2 = pend = STindex(p1, ERx(";"), 0);
				CMnext(pend);
				target_descr = pend;
				*p2 = EOS;
				CVan(p1, &i);
				target_type = (i2)i;
##				putrow form_name tf_name (
##					ftarget_type = target_type,
##					ftarget_descr = target_descr)
##				set_frs form (change = 1)
			}
		}
		else
		{
			IIUFfieldHelp();
		}
##	}

##	activate FRSkey7 (expl = ERget(F_FE0104_ExplFind))
##	{
		FEtabfnd(form_name, tf_name);
##	}

##	activate FRSkey5 (expl = ERget(F_FE0105_ExplTop))
##	{
##		scroll form_name tf_name to 1
##	}

##	activate FRSkey6 (expl = ERget(F_FE0106_ExplBottom))
##	{
##		scroll form_name tf_name to end
##	}

##	activate menuitem ERget(FE_Help) (activate = 0, validate = 0,
##		expl = ERget(F_FE0100_ExplFrameHelp)), FRSkey1 (activate = 0,
##		validate = 0)
##	{
		FEhelp(ERx("rmcddbty.hlp"), ERget(F_RM0034_Define_cdds_dbs));
##	}

##	activate menuitem ERget(FE_End) (activate = 0, validate = 0,
##		expl = ERget(F_FE0102_ExplEnd)), FRSkey3 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs form (chng = change)
		if (chng && IIUFccConfirmChoice(CONF_GENERIC, NULL, NULL,
			NULL, NULL, S_RM000E_End_no_save, S_RM000F_Yes_end,
			S_RM0010_No_end, ERx(""), TRUE) != CONFCH_YES)
##			resume

##		breakdisplay
##	}
##}
