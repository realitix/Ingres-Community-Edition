/*
** Copyright (c) 1997, 2008 Actian Corporation
*/
# include <compat.h>
# include <cm.h>
# include <st.h>
# include <cv.h>
# include <er.h>
# include <gl.h>
# include <iicommon.h>
# include <fe.h>
# include <erfe.h>
# include <uf.h>
# include <ug.h>
# include <stdprmpt.h>
# include <rpu.h>
# include "errm.h"

/**
** Name:	tbledit.qsc - edit a registered table
**
** Description:
**	Defines
**		tbl_edit	- edit a registered table
**
** History:
**	10-jan-97 (joea)
**		Created based on tbledit.osq in replicator library.
**	24-mar-97 (joea) bug 81176
**		Set tbl_num return variable after call to tbl_register().
**	23-jun-97 (joea) bug 83328
**		Correct getform statement on priority lookup table field.
**	10-oct-97 (joea)
**		Remove unused argument to dropsupp.
**	14-nov-97 (joea)
**		Issue an error message if zero rows selected in ListChoices
**		menu item.
**	02-sep-98 (abbjo03)
**		Replace ddba_messageit with IIUGerr. In the Save option, add
**		error checking after calling dropsupp.
**	22-mar-99 (abbjo03)
**		Correct selection of valid lookup tables in a SQL-92
**		installation.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	20-mar-02 (toumi01)
**		Change 300 to DB_MAX_COLS (at present 1024).
**      18-dec-2008 (joea)
**          Replace READONLY/WSCREADONLY by const.
**/

EXEC SQL BEGIN DECLARE SECTION;
##typedef struct
##{
	char	col_name[DB_MAXNAME+1];
##	i4	key_seq;
	char	datatype[DB_MAXNAME+1];
##} DD_COLUMN;

##static DD_COLUMN	keys[DB_MAX_COLS];

EXEC SQL END DECLARE SECTION;


GLOBALREF
EXEC SQL BEGIN DECLARE SECTION;
i2	RMlocal_db_no;
EXEC SQL END DECLARE SECTION;

GLOBALREF
##char	RMdb_display[];


static bool	form_initd;
static const
##char	*form_name = ERx("rmtbl_detail"),
##	*tf_name = ERx("iitf"),
##	*ftbl_name = ERx("table_name"),
##	*ftbl_owner = ERx("table_owner"),
##	*fcdds_no = ERx("cdds_no"),
##	*fcdds_name = ERx("cdds_name"),
##	*findex_used = ERx("index_used"),
##	*fcdds_lookup_tbl = ERx("cdds_lookup_table"),
##	*fprio_lookup_tbl = ERx("prio_lookup_table"),
##	*fcols_registd = ERx("columns_registered"),
##	*fsupp_objs_created = ERx("supp_objs_created"),
##	*frules_created = ERx("rules_created"),
##	*fcol_name = ERx("column_name"),
##	*fcol_seq = ERx("col_seq"),
##	*fbase_col_seq = ERx("base_col_seq"),
##	*fkey_seq = ERx("key_sequence"),
##	*fdatatype = ERx("datatype"),
##	*fmandatory = ERx("mandatory"),
##	*freplic_col = ERx("replicated_column");


FUNC_EXTERN STATUS tbl_register(i4 *tbl_no, char *tbl_name,
	char *tbl_owner, i2 cdds_no, char *unique_rule,
	char *tbl_indexes, char *columns_registered, char *index_used);
FUNC_EXTERN STATUS dropsupp(i4 tbl_no);
FUNC_EXTERN STATUS tblsave(i4 tbl_no, char *tbl_name);


static void set_table_keys(i4 tbl_no, char *tbl_name, char *tbl_owner,
	char *index_used);
static bool pick_table(char *list_rows, char *title, char *tbl_name);


/*{
** Name:	tbl_edit	- edit a registered table
**
** Description:
**	Display and manage details of table registration including CDDS and
**	priority lookups, CDDS assignment, and registration of key and
**	replicated columns.
**
** Inputs:
**
** Outputs:
**
** Returns:
**	none
*/
void
tbl_edit(
i4	*tbl_num,
char	*tbl_name,
char	*tbl_owner,
i2	*cdds_num,
char	*cdds_name,
char	*cdds_lookup_tbl,
char	*prio_lookup_tbl,
char	*index_used,
char	*cols_registd,
char	*supp_objs_created,
char	*rules_created,
char	*unique_rule,
char	*tbl_indexes)
# if 0
EXEC SQL BEGIN DECLARE SECTION;
##char	*tbl_name;
##char	*tbl_owner;
##char	*cdds_name;
##char	*cdds_lookup_tbl;
##char	*prio_lookup_tbl;
##char	*index_used;
##char	*cols_registd;
##char	*supp_objs_created;
##char	*rules_created;
EXEC SQL END DECLARE SECTION;
# endif
##{
	EXEC SQL BEGIN DECLARE SECTION;
	i4	index_exist;
	i4	lookup_exist;
##	char	col_name[DB_MAXNAME+1];
##	i4	base_col_seq;		/* from iicolumns */
##	i4	col_seq;		/* from dd_regist_columns */
##	i4	key_seq;
##	char	datatype[DB_MAXNAME+1];
##	char	mandatory[2];
##	char	replic_col[2];
	char	local_db_name[DB_MAXNAME*2+3];
##	i2	cdds_no;
	i4	tbl_no;
##	char	new_cdds_name[DB_MAXNAME+1];
##	char	lookup_tbl[DB_MAXNAME+1];
##	char	index_name[DB_MAXNAME+1];
##	char	cdds_lookup[DB_MAXNAME+1];
##	char	prio_lookup[DB_MAXNAME+1];
	i4	n;
	EXEC SQL END DECLARE SECTION;
##	i4	chng;
##	char	objname[FE_MAXNAME+1];
##	i4	in_tf;
	DBEC_ERR_INFO	errinfo;
##	char	*yes = ERget(F_UG0001_Yes1);
##	char	*no = ERget(F_UG0006_No1);
	char	list_row[36];
	char	list_rows[2048];
	i4	i;
	i4	row;
	char	*p1, *p2, *pend;

	cdds_no = *cdds_num;
	tbl_no = *tbl_num;
	STcopy(index_used, index_name);
	STcopy(cdds_lookup_tbl, cdds_lookup);
	STcopy(prio_lookup_tbl, prio_lookup);

	if (!form_initd)
	{
		if (IIUFgtfGetForm(IIUFlcfLocateForm(), form_name) != OK)
		{
			IIUGerr(E_RM0006_Get_form_failed, UG_ERR_ERROR, 1,
				form_name);
			return;
		}
		form_initd = TRUE;
	}

##	inittable form_name tf_name update (fcol_seq = i4 not null,
##		fbase_col_seq = i4 not null, fdatatype = char(32) not null,
##		fmandatory = char(1) not null)

	STtrmwhite(tbl_name);
	STtrmwhite(tbl_owner);
	IIUGmsg(ERget(F_RM0053_Selecting_column_reg), FALSE, 2, tbl_owner,
		tbl_name);
	/*
	** Determine whether the dd_regist_columns table has been populated
	** for this table
	*/
	errinfo.rowcount = 0;
	while (errinfo.rowcount == 0)
	{
		if (tbl_no)
		{
			EXEC SQL SELECT d.column_name, i.column_sequence,
					d.column_sequence, d.key_sequence,
					LOWERCASE(TRIM(i.column_datatype)),
					CHAREXTRACT('ny',
						LOCATE(i.column_nulls +
						i.column_defaults, 'Y') - 1)
				INTO	:col_name, :base_col_seq,
					:col_seq, :key_seq,
					:datatype, :mandatory
				FROM	dd_regist_columns d,
					dd_regist_tables t, iicolumns i
				WHERE	d.table_no = :tbl_no
				AND	d.table_no = t.table_no
				AND	d.column_name = i.column_name
				AND	t.table_name = i.table_name
				AND	t.table_owner = i.table_owner
				ORDER	BY 2;
			EXEC SQL BEGIN;
				if (col_seq)
					STcopy(yes, replic_col);
				else
					STcopy(no, replic_col);
##				loadtable form_name tf_name (
##					freplic_col = replic_col,
##					fcol_name = col_name,
##					fkey_seq = key_seq, fcol_seq = col_seq,
##					fbase_col_seq = base_col_seq,
##					fdatatype = datatype,
##					fmandatory = mandatory)
			EXEC SQL END;
			RPdb_error_check(0, &errinfo);
			if (errinfo.errorno)
			{
				EXEC SQL ROLLBACK;
				FTbell();
				IIUGerr(E_RM0012_Error_selecting,
					UG_ERR_ERROR, 0);
				return;
			}
		}
		if (errinfo.rowcount == 0 || tbl_no == 0)
		{
			EXEC SQL ROLLBACK;
			if (IIUFccConfirmChoice(CONF_GENERIC, NULL, NULL,
				NULL, NULL, S_RM0038_No_table_regist_yet,
				S_RM0039_Yes_register, S_RM003A_No_register,
				ERx(""), TRUE) != CONFCH_YES)
				return;
			if (tbl_register(&tbl_no, tbl_name, tbl_owner, cdds_no,
					unique_rule, tbl_indexes, cols_registd,
					index_used) != OK)
				return;
			*tbl_num = tbl_no;
		}
	}
	EXEC SQL COMMIT;

	/* Make sure that a unique key exists */
	EXEC SQL REPEATED SELECT COUNT(*)
		INTO	:index_exist
		FROM	iiindexes
		WHERE	base_name = :tbl_name
		AND	unique_rule = 'U';
	if (RPdb_error_check(DBEC_SINGLE_ROW, NULL) != OK)
	{
		EXEC SQL ROLLBACK;
		FTbell();
		IIUGerr(E_RM003B_Err_check_uniq_index, UG_ERR_ERROR, 0);
	}
	else if (!index_exist && CMcmpcase(unique_rule, "U"))
	{
		EXEC SQL COMMIT;
		IIUGerr(E_RM003C_No_unique_indexes, UG_ERR_ERROR, 0);
	}

##	display form_name update
##	initialize (db = RMdb_display, ftbl_name = tbl_name,
##		ftbl_owner = tbl_owner, fcdds_no = cdds_no,
##		fcdds_name = cdds_name, findex_used = index_used,
##		fcdds_lookup_tbl = cdds_lookup_tbl,
##		fprio_lookup_tbl = prio_lookup_tbl,
##		fcols_registd = cols_registd,
##		fsupp_objs_created = supp_objs_created,
##		frules_created = rules_created)
##	activate field fcdds_no
##	{
##		inquire_frs field form_name (chng = change)
		if (chng)
		{
##			getform (cdds_no = fcdds_no)
			EXEC SQL REPEATED SELECT cdds_name
				INTO	:new_cdds_name
				FROM	dd_cdds
				WHERE	cdds_no = :cdds_no;
			RPdb_error_check(DBEC_ZERO_ROWS_OK, &errinfo);
			if (errinfo.errorno)
			{
				FTbell();
				IIUGerr(E_RM003D_Error_check_cdds,
					UG_ERR_ERROR, 0);
##				resume
			}
			else if (errinfo.rowcount == 0)
			{
				i4	pcdds_no = cdds_no;

				FTbell();
				IIUGerr(E_RM002C_Not_valid_value, UG_ERR_ERROR,
					1, &pcdds_no);
##				resume
			}
##			putform (fcdds_name = new_cdds_name)
		}
##		resume next
##	}

##	activate field findex_used
##	{
##		inquire_frs field form_name (chng = change)
		if (chng)
		{
##			getform (index_name = findex_used)
			if (STequal(index_name, tbl_name) &&
				!CMcmpcase(unique_rule, ERx("U")))
			{
				set_table_keys(tbl_no, tbl_name, tbl_owner,
					index_name);
##				resume next
			}
			EXEC SQL REPEATED SELECT COUNT(*)
				INTO	:index_exist
				FROM	iiindexes
				WHERE	base_name = :tbl_name
				AND	index_name = :index_name
				AND	unique_rule = 'U';
			RPdb_error_check(0, &errinfo);
			EXEC SQL COMMIT;
			if (errinfo.errorno)
			{
				FTbell();
				IIUGerr(E_RM003E_Error_check_index,
					UG_ERR_ERROR, 0);
##				resume
			}
			if (!index_exist)
			{
				FTbell();
				IIUGerr(E_RM003F_Not_valid_value_str,
					UG_ERR_ERROR, 1, index_name);
##				resume
			}
			set_table_keys(tbl_no, tbl_name, tbl_owner,
				index_name);
		}
##		resume next
##	}

##	activate field fcdds_lookup_tbl
##	{
##		inquire_frs field form_name (chng = change)
##		getform (cdds_lookup = fcdds_lookup_tbl)
		if (chng && *cdds_lookup != EOS)
		{
			EXEC SQL REPEATED SELECT COUNT(*)
				INTO	:lookup_exist
				FROM	iicolumns
				WHERE	table_name = :cdds_lookup
				AND	column_name IN ('cdds_no', 'CDDS_NO');
			RPdb_error_check(0, &errinfo);
			EXEC SQL COMMIT;
			if (errinfo.errorno)
			{
				FTbell();
				IIUGerr(E_RM0040_Error_check_lookup,
					UG_ERR_ERROR, 0);
##				resume
			}
			if (!lookup_exist)
			{
				FTbell();
				IIUGerr(E_RM003F_Not_valid_value_str,
					UG_ERR_ERROR, 1, cdds_lookup);
##				resume
			}
		}
##		resume next
##	}

##	activate field fprio_lookup_tbl
##	{
##		inquire_frs field form_name (chng = change)
##		getform (prio_lookup = fprio_lookup_tbl)
		if (chng && *prio_lookup != EOS)
		{
			EXEC SQL REPEATED SELECT COUNT(*)
				INTO	:lookup_exist
				FROM	iicolumns
				WHERE	table_name = :prio_lookup
				AND	column_name IN ('dd_priority',
					'DD_PRIORITY');
			RPdb_error_check(0, &errinfo);
			EXEC SQL COMMIT;
			if (errinfo.errorno)
			{
				FTbell();
				IIUGerr(E_RM0040_Error_check_lookup,
					UG_ERR_ERROR, 0);
##				resume
			}
			if (!lookup_exist)
			{
				FTbell();
				IIUGerr(E_RM003F_Not_valid_value_str,
					UG_ERR_ERROR, 1, cdds_lookup);
##				resume
			}
		}
##		resume next
##	}

##	activate column tf_name freplic_col
##	{
##		getrow form_name tf_name (key_seq = fkey_seq,
##			replic_col = freplic_col, mandatory = fmandatory)
		if (key_seq > 0 && CMcmpcase(replic_col, yes))
		{
			IIUGerr(E_RM0041_Key_col_must_regist, UG_ERR_ERROR, 0);
##			putrow form_name tf_name (freplic_col = yes)
##			resume
		}

		if (!CMcmpcase(mandatory, yes) && CMcmpcase(replic_col, yes))
		{
			IIUGerr(E_RM0042_Not_null_must_regist, UG_ERR_ERROR, 0);
##			putrow form_name tf_name (freplic_col = yes)
##			resume
		}

		if (!CMcmpcase(replic_col, yes) || !CMcmpcase(replic_col, no))
##			resume next
		IIUGerr(E_RM0043_Col_regist_y_or_n, UG_ERR_ERROR, 0);
##	}

##	activate menuitem ERget(FE_Save) (expl = ERget(F_FE0117_SaveExpl)),
##		FRSkey8
##	{
##		inquire_frs form (chng = change)
		if (!chng)
		{
			IIUGerr(E_RM0029_No_changes_to_save, 0, 0);
##			resume
		}

##		validate
##		getform (cdds_no = fcdds_no, new_cdds_name = fcdds_name,
##			index_name = findex_used,
##			cdds_lookup = fcdds_lookup_tbl,
##			prio_lookup = fprio_lookup_tbl,
##			supp_objs_created = fsupp_objs_created,
##			rules_created = frules_created)

		STtrmwhite(supp_objs_created);
		STtrmwhite(rules_created);
		if (*supp_objs_created != EOS || *rules_created != EOS)
		{
			if (IIUFccConfirmChoice(CONF_GENERIC, NULL, NULL,
				NULL, NULL, S_RM0044_Drop_existing_objects,
				S_RM0045_Yes_drop, S_RM0046_No_drop,
				ERx(""), TRUE) != CONFCH_YES)
##				resume

			EXEC SQL SELECT TRIM(vnode_name) + '::' +
						TRIM(database_name)
				INTO	:local_db_name
				FROM	dd_databases
				WHERE	database_no = :RMlocal_db_no;
			if (RPdb_error_check(DBEC_SINGLE_ROW, NULL) != OK)
			{
				EXEC SQL ROLLBACK;
				IIUGerr(E_RM0030_Err_retrieve_db_name,
					UG_ERR_ERROR, 0);
##				resume
			}

			if (dropsupp(tbl_no) != OK)
##				resume				
			*supp_objs_created = *rules_created = EOS;
##			putform (fsupp_objs_created = supp_objs_created,
##				frules_created = rules_created)
		}

		if (tblsave(tbl_no, tbl_name) != OK)
		{
			IIUGerr(E_RM0009_Error_saving, UG_ERR_ERROR, 0);
##			resume
		}

		*cdds_num = (i2)cdds_no;
		STcopy(new_cdds_name, cdds_name);
		STcopy(index_name, index_used);
		STcopy(cdds_lookup, cdds_lookup_tbl);
		STcopy(prio_lookup, prio_lookup_tbl);
##		breakdisplay
##	}

##	activate menuitem ERget(FE_Lookup) (activate = 0, validate = 0,
##		expl = ERget(F_FE0116_LookupExpl)), FRSkey10 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs field form_name (objname = name)
		*list_rows = EOS;
		if (STequal(objname, findex_used))
		{
			EXEC SQL SELECT table_name
				INTO	:index_name
				FROM	iitables
				WHERE	table_name = :tbl_name
				AND	table_owner = :tbl_owner
				AND	unique_rule = 'U'
				UNION
				SELECT	DISTINCT index_name
				FROM	iiindexes
				WHERE	base_name = :tbl_name
				AND	index_owner = :tbl_owner
				AND	unique_rule = 'U'
				ORDER	BY 1;
			EXEC SQL BEGIN;
				STtrmwhite(index_name);
				STprintf(list_row, ERx("%s\n"), index_name);
				STcat(list_rows, list_row);
			EXEC SQL END;
			EXEC SQL COMMIT;
			if (pick_table(list_rows, ERget(S_RM004B_Unique_keys),
				index_name))
			{
				set_table_keys(tbl_no, tbl_name, tbl_owner,
					index_name);
##				putform (findex_used = index_name)
##				set_frs form (change = 1)
			}
		}
		else if (STequal(objname, fcdds_no))
		{
			EXEC SQL SELECT cdds_no, cdds_name
				INTO	:cdds_no, :new_cdds_name
				FROM	dd_cdds
				ORDER	BY cdds_no;
			EXEC SQL BEGIN;
				STtrmwhite(new_cdds_name);
				STprintf(list_row, ERx("%d;%s\n"),
					(i4)cdds_no, new_cdds_name);
				STcat(list_rows, list_row);
			EXEC SQL END;
			EXEC SQL COMMIT;
			row = IIFDlpListPick(NULL, list_rows, 5, -1, -1, NULL,
				NULL, NULL, NULL);
			if (row >= 0)
			{
				p1 = list_rows;
				pend = STindex(p1, ERx("\n"), 0);
				for (i = 0; i < row; ++i)
				{
					p1 = CMnext(pend);
					pend = STindex(p1, ERx("\n"), 0);
				}
				*pend = EOS;
				p2 = pend = STindex(p1, ERx(";"), 0);
				CMnext(pend);
				STcopy(pend, new_cdds_name);
				*p2 = EOS;
				CVan(p1, &i);
				cdds_no = (i2)i;
##				putform (fcdds_no = cdds_no,
##					fcdds_name = new_cdds_name)
##				set_frs form (change = 1)
			}
		}
		else if (STequal(objname, fcdds_lookup_tbl))
		{
			EXEC SQL SELECT table_name
				INTO	:lookup_tbl
				FROM	iicolumns c
				WHERE	c.column_name IN ('cdds_no', 'CDDS_NO')
				AND	NOT EXISTS (
					SELECT	*
					FROM	dd_support_tables s
					WHERE	LOWERCASE(s.table_name) =
						LOWERCASE(c.table_name))
				ORDER	BY table_name;
			EXEC SQL BEGIN;
				STtrmwhite(lookup_tbl);
				STprintf(list_row, ERx("%s\n"), lookup_tbl);
				STcat(list_rows, list_row);
			EXEC SQL END;
			EXEC SQL INQUIRE_SQL (:n = ROWCOUNT);
			EXEC SQL COMMIT;
			if (!n)
			{
				IIUGerr(E_RM0080_No_valid_choices,
					UG_ERR_ERROR, 0);
##				resume
			}

			if (pick_table(list_rows,
				ERget(S_RM004C_Cdds_lookup_tables),
				lookup_tbl))
			{
##				putform (fcdds_lookup_tbl = lookup_tbl)
##				set_frs form (change = 1)
			}
		}
		else if (STequal(objname, fprio_lookup_tbl))
		{
			EXEC SQL SELECT table_name
				INTO	:lookup_tbl
				FROM	iicolumns c
				WHERE	c.column_name IN ('dd_priority',
					'DD_PRIORITY')
				AND	NOT EXISTS (
					SELECT *
					FROM	dd_support_tables s
					WHERE	LOWERCASE(s.table_name) =
						LOWERCASE(c.table_name))
				ORDER	BY table_name;
			EXEC SQL BEGIN;
				STtrmwhite(lookup_tbl);
				STprintf(list_row, ERx("%s\n"), lookup_tbl);
				STcat(list_rows, list_row);
			EXEC SQL END;
			EXEC SQL INQUIRE_SQL (:n = ROWCOUNT);
			EXEC SQL COMMIT;
			if (!n)
			{
				IIUGerr(E_RM0080_No_valid_choices,
					UG_ERR_ERROR, 0);
##				resume
			}

			if (pick_table(list_rows,
				ERget(S_RM004D_Prio_lookup_tables),
				lookup_tbl))
			{
##				putform (fprio_lookup_tbl = lookup_tbl)
##				set_frs form (change = 1)
			}
		}
		else
		{
			IIUFfieldHelp();
		}
##	}

##	activate FRSkey7 (expl = ERget(F_FE0104_ExplFind))
##	{
		FEtabfnd(form_name, tf_name);
##	}

##	activate FRSkey5 (expl = ERget(F_FE0105_ExplTop))
##	{
##		inquire_frs field form_name (objname = name, in_tf = table)
		if (!in_tf)
		{
			FTbell();
			IIUGerr(E_RM0048_Cursor_in_tf_for_top, UG_ERR_ERROR,
				0);
		}
		else
		{
##			scroll form_name tf_name to 1
		}
##	}

##	activate FRSkey6 (expl = ERget(F_FE0106_ExplBottom))
##	{
##		inquire_frs field form_name (objname = name, in_tf = table)
		if (!in_tf)
		{
			FTbell();
			IIUGerr(E_RM0049_Cursor_in_tf_for_bot, UG_ERR_ERROR,
				0);
		}
		else
		{
##			scroll form_name tf_name to end
		}
##	}

##	activate menuitem ERget(FE_Help) (activate = 0, validate = 0,
##		expl = ERget(F_FE0100_ExplFrameHelp)), FRSkey1 (activate = 0,
##		validate = 0)
##	{
		FEhelp(ERx("rmtbledt.hlp"), ERget(F_RM0054_Register_columns));
##	}

##	activate menuitem ERget(FE_End) (activate = 0, validate = 0,
##		expl = ERget(F_FE0102_ExplEnd)), FRSkey3 (activate = 0,
##		validate = 0)
##	{
##		inquire_frs form (chng = change)
		if (chng && IIUFccConfirmChoice(CONF_GENERIC, NULL, NULL,
			NULL, NULL, S_RM000E_End_no_save, S_RM000F_Yes_end,
			S_RM0010_No_end, ERx(""), TRUE) != CONFCH_YES)
##			resume

##		breakdisplay
##	}
##}


/*
** This procedure fills a local array (keys) with the key columns and resets
** the tablefield with new sequence numbers.  Also validates that no illegal
** (money/float) fields are being used
*/
static void
set_table_keys(
i4	tbl_no,
char	*tbl_name,
char	*tbl_owner,
char	*index_used)
# if 0
EXEC SQL BEGIN DECLARE SECTION;
i4	tbl_no;
char	*tbl_name;
char	*tbl_owner;
char	*index_used;
EXEC SQL END DECLARE SECTION;
# endif
##{
	EXEC SQL BEGIN DECLARE SECTION;
##	char	col_name[DB_MAXNAME+1];
##	char	replic_col[2];
	EXEC SQL END DECLARE SECTION;
	i4	i;
	DBEC_ERR_INFO	errinfo;
##	char	*yes = ERget(F_UG0001_Yes1);

	i = 0;
	if (!STequal(index_used, tbl_name))
	{
		EXEC SQL SELECT d.column_name, c.key_sequence,
				LOWERCASE(TRIM(c.column_datatype))
			INTO	:keys[i]
			FROM	iiindexes i, iicolumns c, dd_regist_columns d
			WHERE	c.column_name = d.column_name
			AND	c.table_name = :index_used
			AND	c.table_owner = i.base_owner
			AND	d.table_no = :tbl_no
			AND	i.base_name = :tbl_name
			AND	i.base_owner = :tbl_owner
			AND	i.index_name = :index_used;
		EXEC SQL BEGIN;
			STtrmwhite(keys[i].col_name);
			++i;
		EXEC SQL END;
	}
	else
	{
		EXEC SQL SELECT d.column_name, c.key_sequence,
				LOWERCASE(TRIM(c.column_datatype))
			INTO	:keys[i]
			FROM	dd_regist_columns d, dd_regist_tables t,
				iicolumns c
			WHERE	d.table_no = :tbl_no
			AND	d.table_no = t.table_no
			AND	d.column_name = c.column_name
			AND	t.table_name = c.table_name
			AND	t.table_owner = c.table_owner
			AND	c.key_sequence > 0;
		EXEC SQL BEGIN;
			STtrmwhite(keys[i].col_name);
			++i;
		EXEC SQL END;
	}
	RPdb_error_check(0, &errinfo);
	if (errinfo.errorno)
	{
		EXEC SQL ROLLBACK;
		FTbell();
		IIUGerr(E_RM004A_Error_select_keys, UG_ERR_ERROR, 0);
		return;
	}
	else if (errinfo.rowcount == 0)
	{
		EXEC SQL ROLLBACK;
		IIUGerr(E_RM0047_No_keys_found, UG_ERR_ERROR, 0);
		return;
	}

	/* Check for invalid key datatypes */
	for (i = 0; i < errinfo.rowcount; ++i)
	{
		if (keys[i].key_seq > 0 &&
			(STequal(keys[i].datatype, ERx("money")) ||
			STequal(keys[i].datatype, ERx("float"))))
		{
			IIUGerr(E_RM0081_Invalid_key_type, UG_ERR_ERROR, 0);
			keys[i].key_seq = 0;
			return;
		}
	}

##	unloadtable form_name tf_name (col_name = fcol_name,
##		replic_col = freplic_col)
##	{
		if (!CMcmpcase(replic_col, yes))
##			putrow form_name tf_name (fkey_seq = 0)
		for (i = 0; i < errinfo.rowcount; ++i)
		{
			if (STequal(keys[i].col_name, col_name))
			{
##				putrow form_name tf_name (
##					fkey_seq = keys[i].key_seq,
##					freplic_col = yes)
			}
		}
##	}
##}


static bool
pick_table(
char	*list_rows,
char	*title,
char	*tbl_name)
{
	i4	i;
	i4	row;
	char	*p1, *pend;

	row = IIFDlpListPick(title, list_rows, 5, -1, -1, NULL, NULL, NULL,
		NULL);
	if (row >= 0)
	{
		p1 = list_rows;
		pend = STindex(p1, ERx("\n"), 0);
		for (i = 0; i < row; ++i)
		{
			p1 = CMnext(pend);
			pend = STindex(p1, ERx("\n"), 0);
		}
		*pend = EOS;
		STcopy(p1, tbl_name);
		return (TRUE);
	}
	return (FALSE);
}
