/*
**  Copyright (c) 2004 Actian Corporation 1984
*/

/*
** Name:	 helptbl.qc
**
*/

# include	<compat.h>
# include	<st.h>		/* 6-x_PC_80x86 */
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
# include	<fe.h>
# include	<ui.h>
# include	<adf.h>
# include	<afe.h>
# include	<si.h>
# include	<cv.h>
# include	<er.h>
# include	<ug.h>
# include	"ertu.h"
# include	"tuconst.h"


FUNC_EXTERN	STATUS	FEatt_fopen();
FUNC_EXTERN	STATUS	FEatt_fetch();
FUNC_EXTERN	STATUS	FEatt_close();
FUNC_EXTERN	VOID	FEatt_dbdata();
FUNC_EXTERN	VOID	FEatt_utype();

GLOBALREF char IITU_Blank[],
	       IITU_Empty[],
	       IITU_WithSysMaint[];
/* statics */

/**
** Name:	tugetattr	Fill form with attribute information.
**
** Description:
**	Fill a form with the attribute information for a table.  Adds defaults
**	list entry for each item if necessary.  Fills hidden column
**	'default_lkey' with i4  corresponding to that of the defaults list
**	entry created.
**
** Inputs:
**	rel_info	relation information structure.
**	formname	form to fill up.
**	formtbl		table field to fill up.
**
** Outputs:
**	twidth		Width of the table, in bytes, as a string.
**
**	Returns:
**		0 if any error.  Count of number of attributes in 
**		table, if found.
**
** History:
**	1-dec-1987 (peter)
**		Rewritten.
**	26-jan-1988 (danielt)
**		Integrated SQL changes
**	19-aug-1988 (peter)
**		update names of catalog columns for 6.1.
**	19-apr-1990 (pete)
**		Add support for display of logical keys, using new structure
**		members in FE_ATT_INFO.
**	10/11/92 (dkh) - Removed readonly qualification on references
**			 declaration to IITU_Blank, IITU_Empty and
**			 IITU_WithSysMaint.  Alpha cross compiler does
**			 not like the qualification for globalrefs.
**	5-apr-1993 (rogerl)
**		Add default list entry for each row that's got one.
**	19-jul-1993 (rogerl)
**		Instead of having IITUadAddDefault() query the dbms for a 
**		default value, pass that value in since it's readily available
**		from FEatt_* given a few slight modifications.
**	21-jul-1993 (rogerl)
**		Strip quotes (and escaping quotes) of default value from DBMS.
**	11-oct-1993 (rogerl)
**		Requote delimited identifier column names for editable display.
**		Non-editable display is not requoted (54944).
**	15-oct-1993 (rogerl)
**		Redo 54944 fix.  Effect is the same, but use less resources.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	26-Aug-2009 (kschendel) b121804
**	    Remove function defns now in headers.
*/
i4
tugetattr(rel_info, formname, formtbl, twidth)
UI_HELP_INFO	*rel_info;
## char 	*formname;
## char 	*formtbl;
char	*twidth;
{
	EXEC SQL BEGIN DECLARE SECTION;
	char	*table_name;
	char 	*table_owner;
	EXEC SQL END DECLARE SECTION;
	i4	attrcount = 0;
	i4	tuplewidth = 0;
	i2	tag;
	i4	numkeys;
##	char	null_value[5];
##	char	def_value[8];
##	char	isindex[15];
				     /* 22 = sizeof("with system_maintained") */
##	char	typename[DB_TYPE_SIZE + 1 + 22 + 1];
	EXEC SQL BEGIN DECLARE SECTION;
##	char	colname[FE_UNRML_MAXNAME+1];
##	i4	keyed;
	bool	is_field_editable = FALSE;
	i4	key_id = 0;
	EXEC SQL END DECLARE SECTION;
	struct	TU_KEYSTRUCT	*keylist;
	struct	TU_KEYSTRUCT	*new;
	STATUS		rval;
	DB_DATA_VALUE	dbvalue;
	DB_USER_TYPE	user_type;
	FE_ATT_QBLK	att_block;
	FE_ATT_INFO	att_info;

	FE_REL_INFO	dmy ;	/* required for call to FEatt_fopen */

	/* 
	** If this is the create form, the field is editable
	*/
	if ( STcompare( ERx("tucreatefr"), formname ) == 0 )
		is_field_editable = TRUE;

	/* 
	** Point the table and owner to correct things.
	*/
	table_name = rel_info->table_name;
	table_owner = rel_info->table_owner;

	/* required for call to FEatt_fopen	*/
	STcopy (rel_info->table_name, dmy.name );
	STcopy (rel_info->table_owner, dmy.owner);

	/*
	** Get the key info from the iikey_columns catalog. Since
	** this isn't avaliable via the FEattinfo stuff, we have to
	** get it first and load it into a structure.
	*/
	numkeys = 0;
	tag = FEgettag();
	keylist = NULL;

	if (IIUIdcn_ingres() != TRUE)
	{
		rval = OK;
		EXEC SQL REPEATED SELECT key_sequence, column_name
			INTO :keyed, :colname
			FROM iicolumns
			WHERE table_name = :table_name
 			AND	table_owner = :table_owner
 			AND	key_sequence <> 0;
		EXEC SQL BEGIN;
			numkeys++;
 			new  = (struct TU_KEYSTRUCT *)FEreqmem((u_i4)tag,
 				(u_i4)sizeof(struct TU_KEYSTRUCT),
 				FALSE, &rval);
			if (rval != OK)
			{
				EXEC SQL ENDSELECT;
			}

			new->next = keylist;
			new->keynum = keyed;
			STtrmwhite(colname);
			STcopy(colname, new->name);
			keylist = new;
		EXEC SQL END;

		if (rval != OK)	/* memory allocation error in select loop */
		{
			FEfree(tag);
			FTerror(ERget(E_TU001C_Cant_allocate_memory));
			return(0); /* 0 indicates "no attributes for table" */
		}

		if (numkeys == 0) /* no keys in iicolumns; check iialt_columns*/
		{
			i4 prev_key;

			/* REPEATED removed from statement below at Heather's
			** request for SQL/DS Gateway. Can be added back later,
			** once GTW group Ok's it.  (4/7/89 pe)
			**
			** There may be several sets of unique keys on a table
			** listed in iialt_columns. Each will have a
			** different value of "key_id". We want only
			** the first one, so use ORDER BY so related keys will
			** come out together and ENDSELECT when reach next one.
			** Fixed 9/12/89 (pete).
			*/
			EXEC SQL SELECT key_sequence, column_name, key_id
				INTO  :keyed, :colname, :key_id
				FROM  iialt_columns
				WHERE table_name = :table_name
				AND   table_owner = :table_owner
				ORDER BY key_id;
			EXEC SQL BEGIN;
				if (numkeys == 0)	/* first time thru */
				{
				    prev_key = key_id;
				}
				if (prev_key != key_id) /* new key. exit loop */
				{
				    EXEC SQL ENDSELECT;
				}

				numkeys++;
 				new= (struct TU_KEYSTRUCT *)FEreqmem((u_i4)tag,
 					(u_i4)sizeof(struct TU_KEYSTRUCT),
 					FALSE, &rval);
				if (rval != OK)
				{
					EXEC SQL ENDSELECT;
				}
	
				new->next = keylist;
				new->keynum = keyed;
				STtrmwhite(colname);
				STcopy(colname, new->name);
				keylist = new;
			EXEC SQL END;

			if (rval != OK)	/* memory alloc error in select loop */
			{
				FEfree(tag);
				FTerror(ERget(E_TU001C_Cant_allocate_memory));
				return(0);
			}
		}
	}
	
	if ((rval = FEatt_fopen(&att_block, &dmy)) == OK)
	{
		while (FEatt_fetch(&att_block, &att_info) == OK)
		{
##		i4 dkey = 0; /* hidden column defaults list 'key' */

			/*
			** Figure out what is displayed on the table field.
			** (tblfld's columns: colname, format, keys, nullable,
			** and defable). Call FEatt_utype to load the info into
			** our DB_USER_TYPE. Call FEatt_dbvalue to load into
			** the DB_DATA_VALUE (for type length).
			*/
			FEatt_utype(&att_info, &user_type);
			FEatt_dbdata(&att_info, &dbvalue);
			if (IIUIdml() == UI_DML_GTWSQL)
			{
				_VOID_ IIAFgtm_gtwTypeMap(&dbvalue, &user_type);
			}

			if (
			 (IIUIdcl_logkeys()) &&
			 (att_info.adf_type != att_info.column_internal_ingtype)
			   )
			{
			    /* Database supports logical keys, and this is
			    ** a special type, whose name is in
			    ** column_internal_datatype. Also, 
			    ** the "column_internal_.." members in att_info
			    ** have been filled in.
			    */
			    STpolycat(3,
				att_info.column_internal_datatype,
				(att_info.column_system_maintained[0] == 'Y')
				    ? IITU_Blank : IITU_Empty,
				(att_info.column_system_maintained[0] == 'Y')
				    ? IITU_WithSysMaint : IITU_Empty,
				typename);
			}
			else
			{
			    /* type name is in user_type.dbut_name.*/
			    STcopy(user_type.dbut_name, typename);

			}

			CVlower(typename);

			/* Use colname as a repository for normalized
			** name; later use unchanged att_info.column_name
			** as lookup key
			*/
			if ( is_field_editable )
			    IIUGxri_id( att_info.column_name, colname );
			else
			    STcopy( att_info.column_name, colname );

			/* 
			** The att_info.default_type will contain the
			** default value for 6.5 and on. Keep doing what
			** we did for earlier releases, but do the new
			** logic in 6.5
			*/
  			if (STcompare(IIUIscl_StdCatLevel(),UI_LEVEL_65) < 0)
			{
                            /* Set the nullable/default columns;
                            ** set default of  Not null, Not default
                            */

			    STcopy(ERget(F_UG0007_No2), null_value); 
			    STcopy(ERget(F_UG0007_No2), def_value);

			    if (user_type.dbut_kind == DB_UT_NULL)
			    {
				/* Nullable, NotDefault ("not applicable") */

				STcopy(ERget(F_UG0002_Yes2),null_value);
			       	/* 
				** also set def_value to "n/a" as fix
			        ** for jupbug 2066 
				*/
			        STcopy(ERget(F_TU0001_n_a), def_value);
			    }
			    else if (user_type.dbut_kind == DB_UT_DEF)
			    {
			    	/* Not Nullable, With Defaults */
			    	STcopy(ERget(F_UG0002_Yes2),def_value);
			    }
			    if (IIUIdml() == UI_DML_GTWSQL)
			    {
			    	STcopy(ERget(F_TU0001_n_a), def_value);
			    }
			}
			else /* Version is 6.5 or greater */
			{
			    /*
			    ** We now get the nullable/default_type
			    ** information directly from the attinfo structure,
			    ** right?
			    ** 
			    ** NEED TO verify that we can rely on this
			    ** information. 
			    */
			    if (att_info.nulls)
			    {
				STcopy(ERget(F_UG0002_Yes2),null_value);
			    }
			    else
			    {
				STcopy(ERget(F_UG0007_No2),null_value);
			    }
			    /*
			    ** string has blanks for formatting, just
			    ** nukem and display the string with no padding
			    */
			    STzapblank(att_info.default_type, def_value);

			    /* grab default value and install it
			    ** in our defaults list if there should be one
			    ** ("user" has no corresponding value in list,
			    ** only "value", ditto for "null")
			    */
			    if (STequal( def_value, ERget(F_TU0074_Value2 ) ))
			    {
			    char defv[ DB_MAX_COLUMN_DEFAULT_LENGTH + 1 ];
				/* the defaults value is stored in
				** the iicolumns catalog in completely escaped
				**form - i.e. the quotes are all escaped and it
				**has leading and trailing quotes.  We strip
				** them for display to the user. (and then
				** reconstruct 'normal' form if creating a table
				** with it)
				 */

				 STtrmwhite( att_info.default_value );

				/* strip leading/trailing and embedded quotes */

				TUstripquotes( att_info.default_value, defv);

					/* dkey is the hidden column
					** value, corresponding to 'key'
					** attribute in the default node
					*/
				dkey =
				    IITUadAddDefault( defv );
			    }
			}
			
			isindex[0] = EOS;
			/*
			** check numkeys first for efficiency; we don't
			** want each columname to have to search a list
			** if there aren't any more elements in the list
			** to search!
			*/
			if (numkeys > 0)
			{
			    new = keylist;
			    while (new != NULL)
			    {
				if (STcompare(new->name,att_info.column_name)
					== 0)
				{
				    /* WE HAVE A MATCH!! */
				    CVna(new->keynum, isindex);
				    numkeys--;
				    break;
				}
				new = new->next;
			    }
			}
			else if (att_info.keyseq != 0) {
			    /* INGRES should always come thru here.
			    Gateways with numkeys == 0 will also */

			    CVna(att_info.keyseq, isindex);	

			    /* don't want to copy key sequence when its zero,
			    cause zeros show up in column "Key #" */
			}

			/* dbvalue.db_length is this column's length */
			tuplewidth += dbvalue.db_length;

			/* one more attribute counted */
			attrcount ++;

##			LOADTABLE formname formtbl (name = colname,
##						datafmt = typename,
##						key = isindex,
##						nullable = null_value,
##						defable = def_value,
##						default_lkey = dkey)

		}	/* end while loop */

		FEatt_close(&att_block);

	}	/* end if att_open */

	else	/* problem doing the FEatt_open */
	{
		FEfree(tag);
		FTerror(ERget(E_TU001D_Error_in_FEatt_open));
		return(0);
	}

	CVna(tuplewidth, twidth);
	rval = FEfree(tag);
	if (rval != OK)
	{
		FTerror(ERget(E_TU001E_Error_freeing_up_memo));
		return(0);
	}
	return(attrcount);
}
