/*
**	Copyright (c) 2004 Actian Corporation
**	All rights reserved.
*/

#include	<compat.h>
#include	<st.h>
#include	<er.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
#include	<fe.h>
#include	<ug.h>
#include	<erui.h>
##include	<ooclass.qsh>
##include	<oocat.qsh>
#include	<oosymbol.h>
#include	<oodefine.h>
#include	"eroo.h"

/**
** Name:	oosavfrm.qc -	Object Save Frame Module.
**
** Description:
**	Contains routines that are the generic save frame and save sub-menu
**	for objects to be used when an object is editted before being saved
**	(e.g., forms.)  (Objects that are created before being editted, such
**	as applications, use 'OOcreateFrame()' to create them.)  Defines:
**
**	OOsaveSequence()	save (sub)menu sequence.
**	IIOOsvFrame()		save frame.
**
** History:
**	Revision 6.0  87/04  peterk
**	Initial revision.
**	2-mar-1988 (danielt) changed to give error message from the save
**		frame if there was an error with 'IIOOsave()'.
**      18-oct-1993 (kchin)
**          	Since the return type of OOsnd() has been changed to PTR,
**          	when being called in IIOOsvFrame(), its return
**          	type needs to be cast to the proper datatype.
**      06-dec-93 (smc)
**		Bug #58882
**          	Commented lint pointer truncation warning.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**/

#define _Help_Expl	F_FE0100_ExplFrameHelp

static STATUS save_it();

/*{
** Name:	OOsaveSequence() - generic OO Catalog Save submenu sequence
**
** Description:
**	Provide generic Catalog Save submenu sequence, invoking 'IIOOsave()'
**	generic save routine to directly save the object, or 'IIOOsvFrame()'
**	to bring up generic Save Frame to modify object attributes,
**	as appropriate according to user selection.
**
** Input params:
**	OOID	*id;		// ptr to object id
**	char	*savename;	// new name for object
**	char	*catform;	// catalog form name
**	char	*cattabl;	// catalog form tableField name
**	char	*detform;	// catalog detail form name
**	char	*title;		// detail frame title string
**	PTR	ptr;		// PTR to application-specific data structure
**	i4	(*display)();	// application-specific display function
**	i4	(*save)();	// application-specific save function
**	MENUPARM menup[];	// dynamic menu specification array
**	STATUS  (*setup)(); 	// application-specific setup routine
**	char	*help_scr;	// customized help screen
**	bool	bypass;		// bypass the submenu
**
** Output params:
**	OOID	*id;		// filled in with saved id for object
**
** Returns:
**	STATUS		OK	// a save actually happened
**			FAIL	// save didn't happen (not nec. an error)
**
** Side Effects:
**	displays Save sequence sub-menu; may invoke Save frame; object
**	may be saved in database.
**
** History:
**	4/87 (peterk) - created.
**	07-nov-88 (sylviap) 
**		Added another parameter, a customized help screen, to 
**		OOsaveSequence and 'IIOOsvFrame()'.
**	28-feb-1990 (Mike S)
**		Added yet another parameter, to skip the submenu
**      05-Feb-96 (fanra01)
**              Changed extern to GLOBALREF.
*/

STATUS
OOsaveSequence(id, savename, catform, cattabl, saveform, title, ptr,
			   display, save, menup, setup, help_scr, bypass)
OOID	*id;
char	*savename;
char	*catform;
char	*cattabl;
char	*saveform;
char	*title;
PTR	ptr;
i4	(*display)();
i4	(*save)();
MENUPARAM	*menup;
STATUS	(*setup)();
char	*help_scr;
bool	bypass;
{
	OO_OBJECT	*obj = OOp(*id);
	OOID		class = obj->class;

	if ( !obj->data.inDatabase )
	{
		/* It's a new object.  Do the EditInfo frame */
		return IIOOsvFrame( id, savename, catform, cattabl,
					saveform, title, ptr,
					display, save, menup, setup, help_scr
		);
	}
	else if (bypass)
	{
		/* Skip the submenu and save it */
		 return save_it(id, ptr, save, setup);
	}


	/* Go through the submenu */
	for (;;)
	{
##	    SUBMENU
##	    ACTIVATE MENUITEM ERget(FE_EditInfo)
##	    {
		return IIOOsvFrame( id, savename, catform, cattabl,
					saveform, title, ptr,
					display, save, menup, setup, help_scr
		);
##	    }
##	    ACTIVATE MENUITEM ERget(FE_Save), FRSkey8
##	    {
		 return save_it(id, ptr, save, setup);

##	    }
##	    ACTIVATE MENUITEM ERget(FE_Forget), FRSkey9
##	    {
		return FAIL;
##	    }
##	    ACTIVATE MENUITEM ERget(FE_Help) (expl = ERget(_Help_Expl)), FRSkey1
##	    {
		FEhelp(ERx("oosavseq.hlp"), title);
##	    }
	}
}

/*
**	save_it
**
**	Save the object 
*/
static STATUS
save_it(id, ptr, save, setup)
OOID	*id;
PTR	ptr;
i4	(*save)();
STATUS	(*setup)();
{
	STATUS	ret;

# ifdef DGC_AOS
	/*
	** Until INGRES supports a readonly mode, DG will use the
	** following code to avoid ugly error messages that occur
	** when trying to write to the database when we are only
	** connected for readonly access.
	*/
	if (IIUIcro_CheckReadOnly())
	{
		IIUGerr(E_UI0016_ReadOnly_err, 0, 0);
		return (OK);
	}
	else 
	{
# endif

	    	if ( setup != NULL && (ret = (*setup)(*id, ptr)) != OK )
	    	{ /* put error message here */
			return ret;
	    	}
	    	return IIOOsave( id, ptr, save );
# ifdef DGC_AOS
	}
# endif
}

/*{
** Name:	IIOOsvFrame() - display generic OO Catalog Save frame
**
** Description:
**	Display Catalog Save Frame, handling user interface interactions
**	and calling OO routines to update generic Object DB Catalogs
**	(ii_id, ii_objects, ii_longremarks.)  Invoke passed in
**	application-specific display and save functions as appropriate
**	to complete display and/or save tasks.
**
** Input params:
**	OOID	*id;		// ptr to object id
**	char	*savename;	// new name for object
**	char	*catform;	// catalog form name
**	char	*cattabl;	// catalog form tableField name
**	char	*saveform;	// catalog save form name
**	char	*title;		// save frame title string
**	PTR	ptr;		// PTR to application-specific data structure
**	i4	(*display)();	// application-specific display function
**	i4	(*save)();	// application-specific save function
**	MENUPARM menup[];	// dynamic menu specification array
**	STATUS  (*setup)(); 	// application-specific setup routine
**
** Output params:
**	OOID	*id;		// filled in with saved id for object
**
** Returns:
**	{STATUS}	OK	// a save actually happened
**			FAIL	// save didn't happen (not nec. an error)
**
** Side Effects:
**	displays Save sequence sub-menu; may invoke Save frame; object
**	may be saved in database.
**
** History:
**	4/87 (peterk) - created.
**	2-mar-1988 (danielt) changed to give error message from the save
**		frame if there was an error with 'IIOOsave()'.
*/

bool	IIUFcheckEnd();

char	*iiooStrAlloc();

STATUS
IIOOsvFrame ( id, savename, catform, cattabl, saveform, title, ptr,
			display, save, menup, setup, help_scr )
OOID	*id;
##char	*savename;
##char	*catform;
##char	*cattabl;
##char	*saveform;
##char	*title;
PTR	ptr;
i4	(*display)();
i4	(*save)();
##MENUPARAM	*menup;
STATUS	(*setup)();
char	*help_scr;
{
##	register OO_OBJECT	*obj;
	STATUS			dbchange = FAIL;
	bool			is_new = ( *id < 0 );
##	char			buf[OOLONGREMSIZE+1];

##	GLOBALREF MENUPARAM	lmenup[];

	if ((obj = OOp(*id)) == NULL)
	{
		IIUGerr( E_OO0028_Object_not_found, UG_ERR_ERROR, 1, id );
		return FAIL;
	}

	{
	    /* Vifred/RBF need an explicit FTclear() to clear screen
	    ** before displaying Save Frame since they are not in
	    ** normal forms mode.
	    */
	    FTclear();

	    /* set up dynamic menuitems */
	    iiooMenuItem(menup, lmenup);

##	    DISPLAY saveform UPDATE
##	    INITIALIZE
##	    {
##		char	*srem, *cre, *alt;

		/* set up dynamic FRSKEY mappings */
		iiooMenuFrsKey(menup, 0);

		/* set mode of extra fields to be non-updateable */
##		SET_FRS FIELD saveform (
##		    mode(xfield1) = QUERY,
##		    mode(xfield2) = QUERY,
##		    mode(xfield3) = QUERY,
##		    mode(xfield4) = QUERY
##		)
		srem = obj->short_remark != NULL ? obj->short_remark: _;
		cre = obj->create_date != NULL ? obj->create_date: _;
		alt = obj->alter_date != NULL ? obj->alter_date: _;
##		PUTFORM (
##			_title = title,
##			_name = savename,
##			_owner = obj->owner,
##			_short_remark = srem,
##			_create_date = cre,
##			_altr_date = alt
##		);

		/* retrieve long remarks and display them */
		if (!is_new)
		{
		    OOrd_seqText(*id, buf, _ii_longremarks, _long_remark);
		    obj->long_remark = iiooStrAlloc(obj, buf);
		    OOput_long_remark(saveform, obj->long_remark);
		}
		else
		{
		    OOput_long_remark(saveform, _);
		}

		/* Object specific attributes */
		if ( display != NULL && (*display)(*id, ptr) != OK)
##		    BREAKDISPLAY;

##	    }
##	    ACTIVATE MENUITEM lmenup[0].mpstring:
##	    {
		if ((*lmenup[0].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[1].mpstring:
##	    {
		if ((*lmenup[1].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[2].mpstring:
##	    {
		if ((*lmenup[2].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[3].mpstring:
##	    {
		if ((*lmenup[3].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[4].mpstring:
##	    {
		if ((*lmenup[4].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[5].mpstring:
##	    {
		if ((*lmenup[5].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[6].mpstring:
##	    {
		if ((*lmenup[6].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[7].mpstring:
##	    {
		if ((*lmenup[7].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[8].mpstring:
##	    {
		if ((*lmenup[8].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM lmenup[9].mpstring:
##	    {
		if ((*lmenup[9].mpaction)(*id, ptr) != OK)
##		    BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM ERget(FE_Save), FRSkey8:
##	    {
		OOID	newid;
		STATUS	ret;
##		i4	longchange;
##		char	currname[FE_MAXNAME+1];

# ifdef DGC_AOS
		/*
		** Until INGRES supports a readonly mode, DG will use the
		** following code to avoid ugly error messages that occur
		** when trying to write to the database when we are only
		** connected for readonly access.
		*/
		if (IIUIcro_CheckReadOnly())
		{
			IIUGerr(E_UI0016_ReadOnly_err, 0, 0);
##			resume
		}
# endif

##		GETFORM ( currname = _name );

		/* Perform basic names checks.  This should have been validated
		** on the name field (which should be lowercase as well,) but
		** double-check just to be sure.
		*/
		if ( iiooCheckName(currname) != OK )
##			RESUME FIELD _name;

		/* Note:  If the name was changed and the save is confirmed,
		** then the object needs to be saved as a new object (or
		** overwrites an existing object.)  Check the ID returned by
		** the confirmName method and get the long remarks, which will
		** need to be saved as well even though they didn't change.
		*/
    		/* Lint truncation warning if size of ptr > OOID, 
		** but code valid. 
		*/
		if ( (newid = (OOID)OOsnd(*id, _confirmName, currname, FALSE)) 
		    == nil )
		{
##			RESUME FIELD _name;
		}

		obj = OOp(newid);

##		GETFORM (buf = _short_remark)
		obj->short_remark =
			STtrmwhite(buf) <= 0 ? _ : iiooStrAlloc(obj, buf);

##		INQUIRE_FRS FIELD saveform (longchange = change(_long_remark));

		if ( longchange == 1 || obj->ooid != *id )
		{
			OOget_long_remark(saveform, buf);
			/* Note:  If Long Remark is not empty force deletion
			** from DB by setting it to " ".  JupBug #9163.
			*/
			obj->long_remark = ( STtrmwhite(buf) <= 0 )
						? " " : iiooStrAlloc(obj, buf);
		}
		else
		{
			obj->long_remark = (char *) NULL;
		}

		*id = newid;

		if ( setup != NULL && (ret = (*setup)(*id, ptr)) != OK )
		{ /* put error message here */
			dbchange = ret;
##			BREAKDISPLAY
		}
		if ( IIOOsave( id, ptr, save ) == OK )
		{
			obj = OOp(*id);

##			PUTFORM (	_altr_date = obj->alter_date,
##					_create_date = obj->create_date
##			);

			/* set "form changed" to FALSE */
##			SET_FRS FORM ( change = 0 );

			/* update row on main catalog form */
			OBinsertrow(obj, catform, cattabl,
					FEtbsins( catform, cattabl, currname,
							_name, TRUE
					)
			);
			dbchange = OK;
##			BREAKDISPLAY;
		}
		else
		{
			IIUGerr(E_OO003F_err_writing_db, 0, 0);
		}
##	    }
##	    ACTIVATE MENUITEM ERget(FE_Forget) (validate = 0),
##			FRSkey9 (validate = 0):
##	    {
		/* check for form changes before ending */
		if ( IIUFcheckEnd() )
##			BREAKDISPLAY;
##	    }
##	    ACTIVATE MENUITEM ERget(FE_Help)
##				(expl = ERget(_Help_Expl), validate = 0),
##			FRSkey1 (validate = 0)
##	    {
		FEhelp( help_scr == NULL ? ERx("oosave.hlp") : help_scr, title);
##	    }

	}

	return dbchange;
}
