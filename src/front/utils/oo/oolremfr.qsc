/*
** Copyright (c) 1990, 2008 Actian Corporation
**	All rights reserved.
*/

#include	<compat.h>
#include	<st.h>
#include	<er.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
#include	<fe.h>
#include	<ug.h>
#include	<ui.h>
#include	<ooclass.h>
##include	<oocat.qsh>
#include	<oodefine.h>
#include	<oosymbol.h>
#include	"eroo.h"

/**
** Name:	oolremfr.qsc -	Object Long Remark Edit Frame.
**
** Description:
**	Contains the routine used to display and edit a long remark for an
**	object.  Defines:
**
**	IIOOedLongRemark()	edit/view object long remark frame.
**	IIOOckLongRemark()	get long remark from edit/view form.
**
** History:
**	Revision 6.4  90/04  wong
**	Initial revision.
**      06-dec-93 (smc)
**	    Bug #58882
**          Commented lint pointer truncation warning.
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**      16-dec-2008 (joea)
**          Replace READONLY/WSCREADONLY by const.
**	23-Aug-2009 (kschendel) 121804
**	    Update some of the function declarations to fix gcc 4.3 problems.
**/

char	*iiooStrAlloc();

/*{
** Name:	IIOOedLongRemark() -	Edit/View Object Long Remark Frame.
**
** Description:
**	Displays Long Remark Edit/View Frame for an object.  The long remark
**	for the object will be fetched from the DB if has not already.  A
**	long remark will be non-NULL, but may be empty.
**
** Input params:
**	self	{OO_OBJECT *}  The object.
**	edit	{bool}  Whether editing or viewing.
**
** Side Effects:
**	Long remark for an object may be retrieved and set.
**
** History:
**	04/90 (jhw) Written.
*/

static OOID	_curID = 0;

static const
##	char	_Form[]	= ERx("iilongremarks");

#define _HelpExpl	F_FE0100_ExplFrameHelp
#define _CancelExpl	F_FE0102_ExplEnd

VOID
IIOOedLongRemark ( self, edit )
register OO_OBJECT	*self;
bool			edit;
##{
##	char	*_mode;
##	i4	change;

	if ( _curID == 0 )
	{
		char	*forms[2];
		
		forms[0] = _Form;
		forms[1] = NULL;
		if ( IIUFaddForms(forms) != OK )
			return;
	}

        /* lint truncation warning if size of ptr > OOID, but code valid */
	if ( edit && (bool)OOsndSelf(self, _authorized) )
	{ /* can update */
		_mode = ERx("update");
	}
	else
	{ /* no update, read only */
		_mode = ERx("read");
	}

##	DISPLAY _Form _mode
##	INITIALIZE
##	{
		/* fetch long remarks and display them */
		if ( self->long_remark == NULL )
		{
			if ( self->ooid <= OC_UNDEFINED )
##				CLEAR FIELD _long_remark;
			else
			{
				char	long_rem[OOLONGREMSIZE+1];

				if ( OOrd_seqText( self->ooid, long_rem,
						_ii_longremarks, _long_remark
					) != nil )
				{
					_VOID_ STtrmwhite(long_rem);
					self->long_remark =
						iiooStrAlloc(self, long_rem);
				}
				OOput_long_remark(_Form, self->long_remark);
			}
		}
		else if ( _curID != self->ooid )
		{
			OOput_long_remark(_Form, self->long_remark);
		}
		_curID = self->ooid;
##	}

##	ACTIVATE MENUITEM ERget(FE_OK), FRSkey4:
##	{
##		INQUIRE_FRS FORM ( change = change );
##		ENDDISPLAY;
##	}

##	ACTIVATE MENUITEM ERget(FE_Cancel)
##				( expl = ERget(_CancelExpl), validate = 0 ),
##			FRSkey9 ( validate = 0 )
##	{
		/* restore */
		change = 0;
		OOput_long_remark(_Form, self->long_remark);
##		ENDDISPLAY;
##	}

##	ACTIVATE MENUITEM ERget(FE_Help)(expl = ERget(_HelpExpl), validate = 0),
##			FRSkey1 (validate = 0)
##	{
		FEhelp( ERx("oolremfr.hlp"), ERget(S_OO0050_LRemHelpBanner));
##	}

	if ( change != 0 )
##		SET_FRS FORM ( change = change );

##}

/*
** Name:	IIOOckLongRemark() -	Get Long Remark from Edit/View Form.
**
** Description:
**	Checks whether the long remark was edited on the edit/view frame
**	and sets the long remark to the new value.
**
** Input:
**	self	{OO_OBJECT *}  The object.
**
** Returns:
**	{bool}  TRUE if the long remark was changed.
**
** History:
**	04/90 (jhw) Written.
*/
bool
IIOOckLongRemark ( OO_OBJECT *self )
##{
##	i4	change;
	char	long_rem[OOLONGREMSIZE+1];

	if ( self->long_remark == NULL || _curID != self->ooid )
		return FALSE;

	OOget_long_remark(_Form, long_rem);

	if ( STequal(self->long_remark, long_rem) )
		return FALSE;
	else
	{
		self->long_remark = iiooStrAlloc(self, long_rem);
		self->data.dirty = TRUE;
		return TRUE;
	}
	/*NOT REACHED*/
##}
