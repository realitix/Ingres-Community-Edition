/*
**	Copyright (c) 2004 Actian Corporation
*/

# include	<compat.h>
# include	<gl.h>
# include	<sl.h>
# include	<iicommon.h>
# include	<fe.h>
# include	<er.h>
# include	"decls.h"
# include	<ug.h>
# include	<frsctblk.h>
# include	<st.h>
# include	<me.h>
# include	<vt.h>
# include       <lo.h>
# include	"vfhlp.h"
# include	"ervf.h"
# include	"uf.h"
# include	<frame.h>

/**
** Name:	vfedtrim.qsc -	trim edit code
**
** Description:
**	This file contains functions to control a user's editing of a piece
**	of trim.  Users can edit the text of the trim, or specify attributes
**	for that trim.
**
**	IIVFteTrimEdit	allow modification of the trim or its attributes
**	IIVFtaTrimAttr	change the attributes of a piece of trim
**
** History:
**	06-sep-89 (bruceb)	Written.
**		Written.  (Much swiped from vfedbox.qsc.)
**	21-mar-94 (smc) Bug #60829
**		Added #include header(s) required to define types passed
**		in prototyped external function calls.
**	29-may-1997 (canor01)
**	    Clean up compiler warnings from CL prototypes.
**      02-Jul-1999 (hweho01)
**              Included uf.h header file, it contains the function     
**              prototype of IIUFlcfLocateForm(). Without the explicit
**              declaration, the default int return value for a function 
**              will truncate a 64-bit address on ris_u64 platform. 
**	21-jan-1999 (hanch04)
**	    replace nat and longnat with i4
**	31-aug-2000 (hanch04)
**	    cross change to main
**	    replace nat and longnat with i4
**	21-Aug-2009 (kschendel) 121804
**	    Need frame.h to satisfy gcc 4.3.
**/


# define	MAX_TRIM_ATTR	4

static	char	*trimattrnames[MAX_TRIM_ATTR];
static	i4	trimattrflgs[] =
{
	fdRVVID,
	fdBLINK,
	fdUNLN,
	fdCHGINT
};

/* field header so we can change the color of the color field on the fly */
static	FLDHDR	*colorhdr;
static	i4	colorseq;		/* field sequence number */


FUNC_EXTERN	char	*flgToChar();
FUNC_EXTERN	VOID	charToFlag();
FUNC_EXTERN	FIELD	*FDfind();
FUNC_EXTERN	FLDHDR	*IIFDgfhGetFldHdr();

VOID		IIVFtaTrimAttr();
static	VOID	allocTrimAttr();

static	bool	trimfrm_alloc = FALSE;
static	FRAME	*vftrmatr = NULL;

/* Name of both the edit trim attributes form, and the form's table field. */
##static	char	*name = ERx("vftrmatr");


/*{
** Name:	IIVFteTrimEdit	- edit a piece of trim
**
** Description:
**	The user has just selected edit from the main edit menu while
**	positioned on a piece of textual trim.  Allow editing of either
**	the text or the attributes.  Ending from either of those choices
**	exits back to the main menu.
**
** Inputs:
**	ps	- position structure of the trim
**
** Outputs:
**
**	Returns:
**
**	Exceptions:
**		None
**
** Side Effects:
**
** History:
**	06-sep-89 (bruceb)	Written
*/
VOID
IIVFteTrimEdit(ps)
POS	*ps;	
{
    char	hlpbuf[100];

    if (!trimfrm_alloc)
    {
	allocTrimAttr();
	trimfrm_alloc = TRUE;
    }

    setGlobUn(edTRIM, ps, NULL);
    for (;;)
    {
##	submenu
##	activate menuitem ERget(FE_Trim)
##	{
	    scrmsg(ERget(F_VF001B_Edit_trim));
	    editTrim(ps);
	    break;
##	}
##	activate menuitem ERget(F_VF0038_Attr)
##	{
	    IIVFtaTrimAttr(ps);
	    break;
##	}
##	activate menuitem ERget(FE_Help), FRSkey1
##	{
	    STcopy(ERget(S_VF0144_Edit_Trim), hlpbuf);
	    vfhelp(VFH_EDTRIM, hlpbuf);
##	}
##	activate menuitem ERget(F_VF0018_End), FRSkey3
##	{
	    break;
##	}
    }
    setGlMove(ps);
    vfTrigUpd();
    vfUpdate(globy, globx, TRUE);
} 


/*{
** Name:	IIVFtaTrimAttr	- change the attributes of a piece of trim
**
** Description:
**	Display a form allowing the user to change the color and 
**	attributes of a piece of trim.
**
** Inputs:
**	ps;	- position structure of the trim
**
** Outputs:
**
**	Returns:
**
**	Exceptions:
**		None
**
** Side Effects:
**
** History:
**	06-sep-89 (bruceb)	Written
*/
VOID
IIVFtaTrimAttr(ps)
POS	*ps;
{
##  char	flgbuf[5];
##  char	*p;
##  i4		curcolor;
##  i4		i;
##  i4		oldcolor;
##  i4		flags;
##  char	uflag[6];
    char	hlpbuf[100];
    TRIM	*tr;
	
##  clear screen

##  display name update
##  initialize
##  {
##	inittable name name UPDATE

	tr = (TRIM *)ps->ps_feat;
	flags = tr->trmflags;

	for (i = 0; i < MAX_TRIM_ATTR; i++) 
	{ 
	    STcopy(flgToChar(flags, trimattrflgs[i]), flgbuf);
	    p = trimattrnames[i];
##	    loadtable name name (attr = p, sett = flgbuf)
	}
	oldcolor = curcolor = vfgetcolor(flags); 
	vfsetcolor(&colorhdr->fhdflags, curcolor);
##	putform name (color = curcolor) 
##	putform name (colortitle = ERget(F_VF0010_Color))
	FTsetda(vftrmatr, colorseq, FT_UPDATE, FT_REGFLD, 0, 0,
	    colorhdr->fhdflags);

##  }
##  activate scrollup name, scrolldown name
##  {
##	resume	/* Do nothing; just return. */
##  }
##  activate field ERx("color")
##  {
##	getform (curcolor = color)
	if (curcolor != oldcolor)
	{
	    vfsetcolor(&colorhdr->fhdflags, curcolor);
	    FTsetda(vftrmatr, colorseq, FT_UPDATE, FT_REGFLD, 0, 0,
		colorhdr->fhdflags);
	    oldcolor = curcolor;
	}
	else
	{
##	    resume next
	}
##  }
##  ACTIVATE MENUITEM ERget(FE_Lookup) (VALIDATE = 0, ACTIVATE = 0,
##		EXPL = ERget(FE_LookupExpl)), 
##		FRSkey10 (VALIDATE = 0, ACTIVATE = 0)
##  {
	IIUFfieldHelp();
##  }
##  activate menuitem ERget(FE_Help), FRSkey1 (validate = 0)
##  {
	STcopy(ERget(S_VF0143_Trim_Attributes), hlpbuf);
	FEhelp(VFH_TRMATTR, hlpbuf);
##  }
##  activate menuitem ERget(FE_End), FRSkey3
##  {
##	validate field name 
	flags = i = 0;
##	unloadtable name name (uflag = sett)
##	{
	    if (i < MAX_TRIM_ATTR)
	    {
		charToFlag(&flags, uflag, trimattrflgs[i]);
		i++;
	    }
	    else
	    {
##		endloop
	    }
##	}
##	getform (curcolor = color)
	vfsetcolor(&flags, curcolor);
	tr->trmflags = flags;
##	enddisplay
##  }
    FTclear();
}


static VOID
allocTrimAttr()
{
	REGFLD	*dummy;
	FIELD	*fld;
	FRAME	*tframe;

	FDsetparse(FALSE);

	if (IIUFgtfGetForm(IIUFlcfLocateForm(), name) != OK)
	{
		syserr(ERget(S_VF0001_Can_not_access_form), name);
	}

	FDsetparse(TRUE);

	/*
	**  Workaround to get things running.  Not sure why this
	**  is needed.
	*/
	tframe = IIfindfrm(name);
	fld = FDfind((i4 **)tframe->frfld, ERx("colortitle"),
		tframe->frfldno, IIFDgfhGetFldHdr);
	colorseq = FDgtfldno(FT_UPDATE, tframe, fld, &dummy);
	colorhdr = FDgethdr(fld);

	vftrmatr = tframe;

	trimattrnames[0] = ERget(F_VF0004_Reverse_Video);
	trimattrnames[1] = ERget(F_VF0005_Blinking);
	trimattrnames[2] = ERget(F_VF0006_Underline);
	trimattrnames[3] = ERget(F_VF0007_Brightness_Change);
}
