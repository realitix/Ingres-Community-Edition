/*
**  Copyright (C) 2005-2006 Actian Corporation. All Rights Reserved.
*/

/*
**    Source   : dbedoc.cpp, Implementation File   (Document of MDI Child Frame)
**    Project  : CA-OpenIngres/Monitoring.
**    Author   : EMB, Standard Skeleton Generated by MFC Widzard + extern C definition 
**               UK Sotheavut, Detail implementation.
**    Purpose  : The Document Data for the DBEvent Trace
**
** History (after 26-Sep-2000)
** 
** 26-Sep-2000 (uk$so01)
**    SIR #102711: Callable in context command line improvement (for Manage-IT)
**    Select the input database if specified.
** 26-Mar-2001 (noifr01)
**    (sir 104270) removal of code for managing Ingres/Desktop
**
*/

#include "stdafx.h"
#include "mainmfc.h"
#include "dbedoc.h"
#include "dbeframe.h"
#include "toolbars.h"

#include "mainfrm.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

extern "C" {
#include "dba.h"
#include "domdata.h"
#include "dbaginfo.h"
#include "dbaset.h"               // Oivers
}

IMPLEMENT_DYNCREATE(CDbeventDoc, CDocument)

CDbeventDoc::CDbeventDoc()
{
    m_bLoaded = FALSE;
    m_bToolbarVisible = TRUE;

    m_hNode         = -1;
    m_OIVers        = -1;
    m_strDBName     = "";
    m_bDBInit       = FALSE;
    m_bSysDBEvent   = FALSE;
    m_bPopupOnRaise = FALSE;
    m_bClearFirst   = FALSE;
    m_nCounter1     = 1; 
    m_nCounter2     = 0;
    m_nHandle       = -1;
    m_nMaxLine      = 200;

    m_pListRegisteredDBEvent = NULL;
    m_pListRaisedDBEvent     = NULL;

    m_bToolbarVisible = TRUE;

    m_SeqNum = 0;
    m_strInputDatabase = _T("");
}

void CDbeventDoc::SetInputDatabase(LPCTSTR lpszDatabase)
{
	m_strInputDatabase = lpszDatabase? lpszDatabase: (LPCTSTR)_T("");
}

BOOL CDbeventDoc::OnNewDocument()
{
	if (!CDocument::OnNewDocument())
		return FALSE;
	return TRUE;
}

CDbeventDoc::~CDbeventDoc()
{
  if (m_hNode!= -1) {
    char *nodeName = GetVirtNodeName(m_hNode);

    // close node struct
    CloseNodeStruct(m_hNode, TRUE);

    // request for refresh list of opened windows
    if (DelayedUpdatesAccepted())
      DelayUpdateOnNode(nodeName);
  }

  CleanUp();
}


BEGIN_MESSAGE_MAP(CDbeventDoc, CDocument)
	//{{AFX_MSG_MAP(CDbeventDoc)
		// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDbeventDoc diagnostics

#ifdef _DEBUG
void CDbeventDoc::AssertValid() const
{
	CDocument::AssertValid();
}

void CDbeventDoc::Dump(CDumpContext& dc) const
{
	CDocument::Dump(dc);
}

void CDbeventDoc::DisplayDoc()
{
    TRACE1 ("MaxLine:           %d\n", m_nMaxLine);
    TRACE1 ("CurrentDatabase:   %s\n", m_strDBName);
    TRACE1 ("Sys DBEvent:       %d\n", m_bSysDBEvent);
    TRACE1 ("PopupOnRaise:      %d\n", m_bPopupOnRaise);
    TRACE0 ("Registerd DBEvents\n");
    
    POSITION pos = m_listRegisteredDBEvent.GetHeadPosition();
    while  (pos != NULL)
    {
        CuDataRegisteredDBevent* dbe = m_listRegisteredDBEvent.GetNext (pos);
        TRACE3 ("DBE:   \t%s\tOWNER:    \t%s\tCHECK:    \t%d\n", dbe->m_strDBEvent, dbe->m_strOwner, dbe->m_bRegistered);
    }
    TRACE0 ("Raised DBEvents\n");
    pos = m_listRaisedDBEvent.GetHeadPosition();
    while  (pos != NULL)
    {
        CuDataRaisedDBevent* dbe = m_listRaisedDBEvent.GetNext (pos);
        TRACE1 ("TIME: %s\t", dbe->m_strTime);
        TRACE3 ("DBE:   \t%s\tOWNER:    \t%s\tTEXT:    \t%s\n", dbe->m_strDBEvent, dbe->m_strDBEOwner, dbe->m_strDBEText);
    }
}

#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CDbeventDoc serialization

void CDbeventDoc::Serialize(CArchive& ar)
{
    CString caption;

    try
    {
        CTime   time = CTime::GetCurrentTime();
        CString strCTime = time.Format ("%c");
        CleanUp();
        if (ar.IsStoring())
        {
            // document caption
            caption = GetTitle();
            ar << caption;
            // sequential number
            ar << m_SeqNum;

            // node information
            ar << m_OIVers;
            ar << m_hNode;

            ar << (DWORD)m_nMaxLine;
            ar << m_strDBName;
            ar << m_strRaisedSince;
            ar << m_bPopupOnRaise;
            ar << m_bSysDBEvent;
            ar << m_bClearFirst;
            ar << m_nCounter1;   

            CString strItem;
            LPTSTR  lpszOwner;
            BOOL    bChecked;
            int i,  nCount = m_pListRegisteredDBEvent->GetCount();
            for (i=0; i<nCount; i++)
            {
                m_pListRegisteredDBEvent->GetText (i, strItem);
                lpszOwner = (LPTSTR)m_pListRegisteredDBEvent->GetItemData (i);
                bChecked  = (m_pListRegisteredDBEvent->GetCheck (i) == 1)? TRUE: FALSE;
                m_listRegisteredDBEvent.AddTail (new CuDataRegisteredDBevent (strItem, lpszOwner, bChecked));
            }
        
            CString strNum;
            CString strDbe;
            CString strOwner;
            CString strText;
            nCount = m_pListRaisedDBEvent->GetItemCount();
            for (i=0; i<nCount; i++)
            {
                strNum   = m_pListRaisedDBEvent->GetItemText (i, 0);
                strItem  = m_pListRaisedDBEvent->GetItemText (i, 1);
                strDbe   = m_pListRaisedDBEvent->GetItemText (i, 2);
                strOwner = m_pListRaisedDBEvent->GetItemText (i, 3);
                strText  = m_pListRaisedDBEvent->GetItemText (i, 4);
                m_listRaisedDBEvent.AddTail (new CuDataRaisedDBevent (strNum, strItem, strDbe, strOwner, strText));
            }
            m_listRaisedDBEvent.AddTail (new CuDataRaisedDBevent ("", strCTime,VDBA_MfcResourceString(IDS_INTERRUPTED) , "", ""));//"<Interrupted>"
            m_listRegisteredDBEvent.Serialize (ar);
            m_listRaisedDBEvent.Serialize (ar);

            // visibility of the related frame toolbar
            POSITION pos = GetFirstViewPosition();
            CView *pView = GetNextView(pos);
            ASSERT (pView);
            CDbeventFrame *pFrame = (CDbeventFrame*)pView->GetParent()->GetParent();   // 2 levels due to splitter wnd
            ASSERT (pFrame);
            if(IsToolbarVisible(pFrame))
              ar << TRUE;
            else
              ar << FALSE;

            // full state of all toolbars in the frame
            pFrame->GetDockState(m_toolbarState);
            m_toolbarState.Serialize(ar);

            // frame window placement
            memset(&m_wplj, 0, sizeof(m_wplj));
            BOOL bResult = pFrame->GetWindowPlacement(&m_wplj);
            ASSERT (bResult);
            ar.Write(&m_wplj, sizeof(m_wplj));

            // splitbar
            CSplitterWnd *pSplit = (CSplitterWnd *)pView->GetParent();
            ASSERT (pSplit);
            pSplit->GetColumnInfo(0, m_cxCur, m_cxMin);
            ar << m_cxCur;
            ar << m_cxMin;
            ar << m_strInputDatabase;
          }
          else
          {
            m_bLoaded = TRUE;

            // document caption
            ar >> caption;
            SetTitle(caption);
            // sequential number
            ar >> m_SeqNum;
            CMainFrame* pMainFrame = (CMainFrame *)AfxGetMainWnd();
            ASSERT (pMainFrame);
            pMainFrame->UpdateDbeventSeqNum(m_SeqNum);

            // node information
            ar >> m_OIVers;
            ar >> m_hNode;
            SetOIVers(m_OIVers);

            DWORD dwMax;

            ar >> dwMax;
            m_nMaxLine = (int)dwMax;
            ar >> m_strDBName;
            ar >> m_strRaisedSince;
            ar >> m_bPopupOnRaise;
            ar >> m_bSysDBEvent;
            ar >> m_bClearFirst;
            ar >> m_nCounter1;   
            m_nCounter1++;
            m_listRegisteredDBEvent.Serialize (ar);
            m_listRaisedDBEvent.Serialize (ar);	
            m_listRaisedDBEvent.AddTail (new CuDataRaisedDBevent ("", strCTime,VDBA_MfcResourceString(IDS_RESTARTED) , "", ""));//"<Restarted>"	

            // state of the related frame toolbar
            ar >> m_bToolbarVisible;

            // full state of all toolbars in the frame
            m_toolbarState.Serialize(ar);

            // frame window placement
            ar.Read(&m_wplj, sizeof(m_wplj));

            // splitbar
            ar >> m_cxCur;
            ar >> m_cxMin;
            ar >> m_strInputDatabase;
        }
    }
    catch (CMemoryException* e)
    {
        VDBA_OutOfMemoryMessage();
        e->Delete();
    }
    catch (CArchiveException* e)
    {
        VDBA_ArchiveExceptionMessage (e);
        e->Delete();
    }
}

/////////////////////////////////////////////////////////////////////////////
// CDbeventDoc commands
void CDbeventDoc::CleanUp()
{
    while (!m_listRegisteredDBEvent.IsEmpty())
        delete m_listRegisteredDBEvent.RemoveHead();
    while (!m_listRaisedDBEvent.IsEmpty())
        delete m_listRaisedDBEvent.RemoveHead();
}


void CDbeventDoc::DeleteContents() 
{
    CleanUp();
    CDocument::DeleteContents();
}






IMPLEMENT_SERIAL (CuDataRegisteredDBevent, CObject, 1)
CuDataRegisteredDBevent::CuDataRegisteredDBevent()
{
    m_strDBEvent = "";
    m_strOwner   = "";
    m_bRegistered= FALSE;
}

CuDataRegisteredDBevent::CuDataRegisteredDBevent(LPCTSTR lpszDBEvent, LPCTSTR lpszOwner, BOOL bRegistered)
{
    m_strDBEvent = lpszDBEvent;
    m_strOwner   = lpszOwner;
    m_bRegistered= bRegistered;
}

CuDataRegisteredDBevent::CuDataRegisteredDBevent(const CuDataRegisteredDBevent& c)
{
    m_strDBEvent = c.m_strDBEvent;
    m_strOwner   = c.m_strOwner;
    m_bRegistered= c.m_bRegistered;
}

CuDataRegisteredDBevent& CuDataRegisteredDBevent::operator= (const CuDataRegisteredDBevent& c)
{
    m_strDBEvent = c.m_strDBEvent;
    m_bRegistered= c.m_bRegistered;
    m_strOwner   = c.m_strOwner;
    return *this;
}

void CuDataRegisteredDBevent::Serialize (CArchive& ar)
{
    if (ar.IsStoring())
    {
        ar << m_strDBEvent;
        ar << m_strOwner;
        ar << m_bRegistered;
    }
    else
    {
        ar >> m_strDBEvent;
        ar >> m_strOwner;
        ar >> m_bRegistered;
    }
}

IMPLEMENT_SERIAL (CuDataRaisedDBevent, CObject, 1)
CuDataRaisedDBevent::CuDataRaisedDBevent()
{
    m_strNum     = "";      
    m_strTime    = "";      
    m_strDBEvent = "";   
    m_strDBEOwner= "";  
    m_strDBEText = "";   
}

CuDataRaisedDBevent::CuDataRaisedDBevent(
    LPCTSTR lpszNum,
    LPCTSTR lpszTime, 
    LPCTSTR lpszDBEvent, 
    LPCTSTR lpszOwner,
    LPCTSTR lpszText)
{
    m_strNum     = lpszNum;      
    m_strTime    = lpszTime;      
    m_strDBEvent = lpszDBEvent;   
    m_strDBEOwner= lpszOwner;  
    m_strDBEText = lpszText;   
}

CuDataRaisedDBevent::CuDataRaisedDBevent(const CuDataRaisedDBevent& c)
{
    m_strNum     = c.m_strNum     ;      
    m_strTime    = c.m_strTime    ;    
    m_strDBEvent = c.m_strDBEvent ;   
    m_strDBEOwner= c.m_strDBEOwner; 
    m_strDBEText = c.m_strDBEText ; 
}

CuDataRaisedDBevent& CuDataRaisedDBevent::operator= (const CuDataRaisedDBevent& c)
{
    m_strNum     = c.m_strNum     ;      
    m_strTime    = c.m_strTime    ;    
    m_strDBEvent = c.m_strDBEvent ;   
    m_strDBEOwner= c.m_strDBEOwner; 
    m_strDBEText = c.m_strDBEText ; 
    return *this;
}

void CuDataRaisedDBevent::Serialize (CArchive& ar)
{
    if (ar.IsStoring())
    {
        ar << m_strNum;
        ar << m_strTime;
        ar << m_strDBEvent;
        ar << m_strDBEOwner;
        ar << m_strDBEText;
    }
    else
    {
        ar >> m_strNum;
        ar >> m_strTime;
        ar >> m_strDBEvent;
        ar >> m_strDBEOwner;
        ar >> m_strDBEText;
    }
}



void CDbeventDoc::SetSeqNum(int val)
{
  m_SeqNum = val;
}
