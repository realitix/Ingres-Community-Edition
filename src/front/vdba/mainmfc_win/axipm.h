#pragma once
#include "font.h"

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CuIpm wrapper class

class CuIpm : public CWnd
{
protected:
	DECLARE_DYNCREATE(CuIpm)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xAB474686, 0xE577, 0x11D5, { 0x87, 0x8C, 0x0, 0xC0, 0x4F, 0x1F, 0x75, 0x4A } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DIpm

// Functions
//

	BOOL Initiate(LPCTSTR lpszNode, LPCTSTR lpszServer, LPCTSTR lpszUser, LPCTSTR lpszOption)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, lpszNode, lpszServer, lpszUser, lpszOption);
		return result;
	}
	void ExpandBranch()
	{
		InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ExpandAll()
	{
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void CollapseBranch()
	{
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void CollapseAll()
	{
		InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ExpandOne()
	{
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void CollapseOne()
	{
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL ExpressRefresh()
	{
		BOOL result;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ItemShutdown()
	{
		BOOL result;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ForceRefresh()
	{
		BOOL result;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OpenServer()
	{
		BOOL result;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CloseServer()
	{
		BOOL result;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ReplicationServerChangeNode()
	{
		BOOL result;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ResourceTypeChange(short nResType)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, nResType);
		return result;
	}
	BOOL NullResource(short bSet)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, bSet);
		return result;
	}
	BOOL InternalSession(short bSet)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, bSet);
		return result;
	}
	BOOL SystemLockList(short bSet)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, bSet);
		return result;
	}
	BOOL InactiveTransaction(short bSet)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, bSet);
		return result;
	}
	BOOL IsEnabledShutdown()
	{
		BOOL result;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL IsEnabledOpenServer()
	{
		BOOL result;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL IsEnabledCloseServer()
	{
		BOOL result;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL IsEnabledReplicationChangeNode()
	{
		BOOL result;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	SCODE Loading(LPUNKNOWN pStream)
	{
		SCODE result;
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms, pStream);
		return result;
	}
	SCODE Storing(LPUNKNOWN * ppStream)
	{
		SCODE result;
		static BYTE parms[] = VTS_PUNKNOWN ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms, ppStream);
		return result;
	}
	void ProhibitActionOnTreeCtrl(short nYes)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nYes);
	}
	BOOL UpdateFilters(short * arrayFilter, short nArraySize)
	{
		BOOL result;
		static BYTE parms[] = VTS_PI2 VTS_I2 ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, arrayFilter, nArraySize);
		return result;
	}
	void SearchItem()
	{
		InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetSessionStart(long nStart)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nStart);
	}
	void SetSessionDescription(LPCTSTR lpszSessionDescription)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms, lpszSessionDescription);
	}
	void StartExpressRefresh(long nSeconds)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nSeconds);
	}
	BOOL SelectItem(LPCTSTR lpszNode, LPCTSTR lpszServer, LPCTSTR lpszUser, LPCTSTR lpszKey, VARIANT * pArrayItem, short nShowTree)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_PVARIANT VTS_I2 ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, lpszNode, lpszServer, lpszUser, lpszKey, pArrayItem, nShowTree);
		return result;
	}
	void SetErrorlogFile(LPCTSTR lpszFullPathFile)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms, lpszFullPathFile);
	}
	short FindAndSelectTreeItem(LPCTSTR lpszText, long nMode)
	{
		short result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_I2, (void*)&result, parms, lpszText, nMode);
		return result;
	}
	long GetMonitorObjectsCount()
	{
		long result;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetHelpID()
	{
		long result;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void SetHelpFile(LPCTSTR lpszFileWithoutPath)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, lpszFileWithoutPath);
	}
	short GetConnected(LPCTSTR lpszNode, LPCTSTR lpszDatabase)
	{
		short result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_I2, (void*)&result, parms, lpszNode, lpszDatabase);
		return result;
	}

// Properties
//

long GetTimeOut()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}
void SetTimeOut(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}
long GetRefreshFrequency()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}
void SetRefreshFrequency(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}
BOOL GetActivateRefresh()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}
void SetActivateRefresh(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}
BOOL GetShowGrid()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}
void SetShowGrid(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}
COleFont GetFont()
{
	LPDISPATCH result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return COleFont(result);
}
void SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}
long GetUnit()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}
void SetUnit(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}
long GetMaxSession()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}
void SetMaxSession(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}


};
