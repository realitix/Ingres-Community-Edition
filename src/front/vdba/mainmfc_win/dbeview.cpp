/****************************************************************************************
//                                                                                     //
//  Copyright (C) 2005-2006 Actian Corporation. All Rights Reserved.                   //
//                                                                                     //
//    Source   : DbeView.cpp, Implementation   (MDI Child Frame)                       //
//                                                                                     //
//                                                                                     //
//    Project  : CA-OpenIngres/Monitoring.                                             //
//    Author   : EMB, Standard Skeleton Generated by MFC Widzard.                      //
//               UK Sotheavut, Detail implementation.                                  //
//                                                                                     //
//    Purpose  : The left pane for the DBEvent Trace.                                  //
//               It contains the Modeless Dialog (Header and Check list Box)           //
****************************************************************************************/

#include "stdafx.h"
#include "mainmfc.h"
#include "dbedoc.h"
#include "dbeview.h"
#include "dbeframe.h"
#include "toolbars.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CDbeventView

IMPLEMENT_DYNCREATE(CDbeventView, CView)

CDbeventView::CDbeventView()
{
    m_pDlgRegisteredDBEvent = NULL;
}

CDbeventView::~CDbeventView()
{
}


BEGIN_MESSAGE_MAP(CDbeventView, CView)
    //{{AFX_MSG_MAP(CDbeventView)
    ON_WM_CREATE()
    ON_WM_SIZE()
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDbeventView drawing

void CDbeventView::OnDraw(CDC* pDC)
{
    CDocument* pDoc = GetDocument();
    // TODO: add draw code here
}

/////////////////////////////////////////////////////////////////////////////
// CDbeventView diagnostics

#ifdef _DEBUG
void CDbeventView::AssertValid() const
{
    CView::AssertValid();
}

void CDbeventView::Dump(CDumpContext& dc) const
{
    CView::Dump(dc);
}
#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CDbeventView message handlers

int CDbeventView::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
    if (CView::OnCreate(lpCreateStruct) == -1)
        return -1;
    
    m_pDlgRegisteredDBEvent = new CuDlgDBEventPane01 (this);
    m_pDlgRegisteredDBEvent->Create (IDD_DBEVENTPANE1, this);
    m_pDlgRegisteredDBEvent->ShowWindow (SW_SHOW);
    return 0;
}

void CDbeventView::OnSize(UINT nType, int cx, int cy) 
{
    CView::OnSize(nType, cx, cy);
    if (!m_pDlgRegisteredDBEvent || (m_pDlgRegisteredDBEvent && !m_pDlgRegisteredDBEvent->m_hWnd))
        return;
    CRect r;
    GetClientRect (r);
    m_pDlgRegisteredDBEvent->MoveWindow (r);
}

BOOL CDbeventView::PreCreateWindow(CREATESTRUCT& cs) 
{
    cs.style |= WS_CLIPCHILDREN;
    return CView::PreCreateWindow(cs);
}

void CDbeventView::OnInitialUpdate() 
{
    CView::OnInitialUpdate();
    CDbeventDoc* pDoc        = (CDbeventDoc*)GetDocument();
    CSplitterWnd*  pSplitter = (CSplitterWnd*)GetParent ();
    CDbeventFrame* pFrame    = (CDbeventFrame*)pSplitter->GetParent();
    
    ASSERT (pDoc);

    // toolbar caption according to doc caption
    CString docTitle = pDoc->GetTitle();
    pFrame->GetDialogBar()->SetWindowText(docTitle);

    if (pDoc->IsLoadedDoc()) {
      // frame window placement
      BOOL bResult = pFrame->SetWindowPlacement(pDoc->GetWPLJ());
      ASSERT (bResult);

      // splitbar placement
      int cxCur = pDoc->GetSplitterCxCur();
      int cxMin = pDoc->GetSplitterCxMin();
      pSplitter->SetColumnInfo(0, cxCur, cxMin);
      pSplitter->RecalcLayout();

      // set full state of all toolbars in the frame
      CDockState& ToolbarsState = pDoc->GetToolbarState();
      pFrame->SetDockState(ToolbarsState);
    
      // Set frame toolbar visibility state according to load info
      if (pDoc->m_bToolbarVisible)
        SetToolbarVisible(pFrame, TRUE);      // force immediate update
      else
        SetToolbarInvisible(pFrame, TRUE);    // force immediate update
    }
    else
    {
        //
        // The left pane (Register DBEvent pane) is 30% of the Frame Client erea.
        CRect rcClient;
        pFrame->GetClientRect (rcClient);
        pSplitter->SetColumnInfo(0, (int) (0.3 * (double)rcClient.Width()), 10);
        pSplitter->RecalcLayout();
    }
    //
    // Initialize the MaxLine Edit Box
    CuDbeDlgBar* pDlgBar = pFrame->GetDialogBar ();
    CEdit* pEdit = pDlgBar->GetEditMaxLine();
    if (pEdit && IsWindow (pEdit->m_hWnd))
    {
        CString strFormat;
        strFormat.Format ("%d", pDoc->m_nMaxLine);
        pEdit->SetLimitText  (4);
        pEdit->SetWindowText (strFormat);
    }
    //
    // Initialize the Sys DBEvent Check Box.
    CButton* pButton = pDlgBar->GetSysDBEventButton ();
    pButton->SetCheck (pDoc->m_bSysDBEvent);
    //
    // Initialize the Popup On Raise Check Box.
    pButton = pDlgBar->GetPopupButton ();
    pButton->SetCheck (pDoc->m_bPopupOnRaise);
    //
    // Initialize the Clear First Check Box.
    pButton = pDlgBar->GetClearFirstButton ();
    pButton->SetCheck (pDoc->m_bClearFirst);

    //
    // Initialize the ComboBox of Databases.
    CString strNone;
    CComboBox* pCombo =  pDlgBar->GetComboDatabase ();
    if (strNone.LoadString (IDS_DATABASE_NONE) == 0)
        strNone = "<None>";
    pCombo->AddString (strNone);
    if (pDoc->m_strDBName == "" || pDoc->m_strDBName == strNone)
    {
        pCombo->SetCurSel (0);
        return;
    }
    pCombo->AddString (pDoc->m_strDBName);
    pCombo->SelectString (-1, pDoc->m_strDBName);
}

void CDbeventView::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint) 
{
    //
    // Notified from the Outside that the DBEvent should refresh its data
    // when lHint is not 0
	if ((int)lHint != 0 && (m_pDlgRegisteredDBEvent && IsWindow (m_pDlgRegisteredDBEvent->m_hWnd)))
    {
        TRACE0 ("ReFresh the Data ...\n");
        m_pDlgRegisteredDBEvent->OnRefresh();
    }
}
