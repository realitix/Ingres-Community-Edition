// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "vsdactl.h"

/////////////////////////////////////////////////////////////////////////////
// CuVsda

IMPLEMENT_DYNCREATE(CuVsda, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CuVsda properties

/////////////////////////////////////////////////////////////////////////////
// CuVsda operations

void CuVsda::SetSchema1Param(LPCTSTR lpszNode, LPCTSTR lpszDatabase, LPCTSTR lpszUser)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszNode, lpszDatabase, lpszUser);
}

void CuVsda::SetSchema2Param(LPCTSTR lpszNode, LPCTSTR lpszDatabase, LPCTSTR lpszUser)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszNode, lpszDatabase, lpszUser);
}

void CuVsda::StoreSchema(LPCTSTR lpszNode, LPCTSTR lpszDatabase, LPCTSTR lpszUser, LPCTSTR lpszFile)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszNode, lpszDatabase, lpszUser, lpszFile);
}

void CuVsda::LoadSchema1Param(LPCTSTR lpszFile)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszFile);
}

void CuVsda::LoadSchema2Param(LPCTSTR lpszFile)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszFile);
}

void CuVsda::DoCompare(short nMode)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nMode);
}

void CuVsda::UpdateDisplayFilter(LPCTSTR lpszFilter)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszFilter);
}

BOOL CuVsda::IsEnableDiscard()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CuVsda::DiscardItem()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CuVsda::IsEnableUndiscard()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CuVsda::UndiscardItem()
{
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CuVsda::HideFrame(short nShow)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nShow);
}

BOOL CuVsda::IsEnableAccessVdba()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CuVsda::AccessVdba()
{
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CuVsda::SetSessionStart(long nStart)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nStart);
}

void CuVsda::SetSessionDescription(LPCTSTR lpszDescription)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lpszDescription);
}

BOOL CuVsda::IsResultFrameVisible()
{
	BOOL result;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CuVsda::DoWriteFile()
{
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
